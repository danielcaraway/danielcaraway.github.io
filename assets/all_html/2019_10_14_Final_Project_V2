{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Taking what we have learned from analyzing the kaggle dataset, we decided that we needed more information to try to  \n",
    "# predict profit. We are applying what we learned from our Kaggle analysis to our the numbers dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ali and Kendra Final Project \n",
    "\n",
    "#importing pandas, csv, \n",
    "import csv \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import statistics\n",
    "#To create testing and training dfs and labels \n",
    "from sklearn.model_selection import train_test_split \n",
    "# To model the Gaussian Navie Bayes classifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "# To calculate the accuracy score of the model\n",
    "from sklearn.metrics import accuracy_score\n",
    "#confusion matrix \n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "#To get a count or tally of a category in our df \n",
    "from collections import Counter\n",
    "#for pre-processing to fit all numeric data on the standard scale \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "#for applying PCA function on training and testing sets \n",
    "from sklearn.decomposition import PCA\n",
    "#logistic regression \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "#SVMs \n",
    "from sklearn.svm import SVC\n",
    "#For association rule mining \n",
    "from apyori import apriori\n",
    "#This will allow us to silence the warnings\n",
    "import warnings \n",
    "warnings.simplefilter(\"ignore\")\n",
    "#For the confusion matrix \n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Functions that we are going to use in our file: \n",
    "\n",
    "#Creating a function that will change a column data type to category \n",
    "def cat_fun(df, column): \n",
    "    df[column] = df[column].astype(\"category\") \n",
    "    return(df[column])\n",
    "\n",
    "#Creating a function that will remove anything in our df and replace it with nothing \n",
    "def remove(df, column, object_to_remove): \n",
    "    df[column] = df[column].str.replace(object_to_remove, \"\")\n",
    "    return(df[column])\n",
    "\n",
    "#Creating a function that will discretize our columns based on quartiles \n",
    "def quartile_discretize(df, column, categories): \n",
    "    df[column] = pd.qcut(df[column], 4, labels = categories)\n",
    "    return(df[column])\n",
    "\n",
    "#Creating a function that will merge our dfs with a left join\n",
    "def left_merge_2_conditions(df1, df2, column1, column2):\n",
    "    df = pd.merge(df1, df2, how = \"left\", on=[column1, column2])\n",
    "    return(df)\n",
    "\n",
    "#Creating a function that groups by, counts, creates a new column from the index, drops the index and changes the column names\n",
    "def groupby_count(df, groupby_column, count_column): \n",
    "    new_df = pd.DataFrame(df.groupby(groupby_column)[count_column].count())\n",
    "    new_df.columns = [\"count\"]\n",
    "    new_df[groupby_column] = new_df.index.get_level_values(0)\n",
    "    new_df.reset_index(drop = True, inplace = True)\n",
    "    return(new_df)\n",
    "\n",
    "#Creating a function that groups by, counts, creates a new column from the index, drops the index and changes the column names\n",
    "def groupby_2_count(df, groupby_column1, groupby_column2, count_column): \n",
    "    new_df = pd.DataFrame(df.groupby([groupby_column1, groupby_column2 ])[count_column].count())\n",
    "    new_df.columns = [\"count\"]\n",
    "    new_df[groupby_column1] = new_df.index.get_level_values(0)\n",
    "    new_df[groupby_column2] = new_df.index.get_level_values(1)\n",
    "    new_df.reset_index(drop = True, inplace = True)\n",
    "    return(new_df)\n",
    "\n",
    "#Creating a function that groups by, counts, creates a new column from the index, drops the index and changes the column names\n",
    "def groupby_3_count(df, groupby_column1, groupby_column2, groupby_column3, count_column): \n",
    "    new_df = pd.DataFrame(df.groupby([groupby_column1, groupby_column2, groupby_column3 ])[count_column].count())\n",
    "    new_df.columns = [\"count\"]\n",
    "    new_df[groupby_column1] = new_df.index.get_level_values(0)\n",
    "    new_df[groupby_column2] = new_df.index.get_level_values(1)\n",
    "    new_df[groupby_column3] = new_df.index.get_level_values(2)\n",
    "    new_df.reset_index(drop = True, inplace = True)\n",
    "    return(new_df)\n",
    "\n",
    "# Going to use matplotlib for plotting... \n",
    "# To create a plot we followed the following formula: \n",
    "# df.plot(x-axis, y-axis, kind = type of plot, color = [(we specified colors to use here)], legend = False (we did not \n",
    "# want a legend displayed), title = \"Title\") then we added a ylabel with plt.ylabel(\"Type label here\") and an x label \n",
    "# with plt.xlabel(\"type label here\"). Finally, we wanted to change the direction of the xtick names from a 90 degree angle \n",
    "# to no angle with plt.xticks(rotation = rotation angle desired)\n",
    "def bar_graph_count(df, x_column, y_column, title):\n",
    "    g = df.plot(x_column, y_column, kind = \"bar\", legend = False, title = title)\n",
    "    g = plt.ylabel(y_column)\n",
    "    g = plt.xlabel(x_column)\n",
    "    return(g)\n",
    "\n",
    "\n",
    "#This will calculate the exponential moving average of the columns we want\n",
    "#exponential moving averages give more weight to the most recent data and less weight to older data \n",
    "def exp_moving_avg(d, column_to_be_meaned):\n",
    "    d[\"exp_moving_avg\"] = d[column_to_be_meaned].ewm(com = 0.5,adjust=False).mean()\n",
    "    exp_moving_avg = list(d[\"exp_moving_avg\"])\n",
    "    #Adding a 0 to the first entry to exp_moving_avg\n",
    "    exp_moving_avg = [0] + exp_moving_avg\n",
    "    #Removing the last entry in the list \n",
    "    exp_moving_avg.pop()\n",
    "    #Creating a column named exp_moving_avg with the results \n",
    "    d[\"exp_moving_avg\"] = exp_moving_avg\n",
    "    return(exp_moving_avg)\n",
    "\n",
    "#This will calculate the cumulative moving average\n",
    "def cumulative_moving_avg(d): \n",
    "    d[\"moving_avg\"] = d.expanding(min_periods = 1).mean()\n",
    "    moving_avg = list(d[\"moving_avg\"])\n",
    "    #Adding a 0 to the first entry to moving avg\n",
    "    cumulative_moving_avg = [0] + moving_avg\n",
    "    #Removing the last entry in the list \n",
    "    cumulative_moving_avg.pop()\n",
    "    return(cumulative_moving_avg)\n",
    "\n",
    "#This will get the list of all of the entries in the column that we are interested in for calculating the averages\n",
    "def getting_list_of_entries(df, column_interested_in, column_to_be_meaned): \n",
    "    avg_people = pd.DataFrame(df.groupby([column_interested_in, \"released\"])[column_to_be_meaned].mean())\n",
    "    avg_column_scores = pd.DataFrame()\n",
    "    column_interested = list(df[column_interested_in].unique())\n",
    "    return([avg_people, column_interested])\n",
    "\n",
    "#This will make a df for our moving averages that we are calculating \n",
    "def making_df(people_df, column_interested_in, released, person, cumulative_avg, exp_avg): \n",
    "    df_2 = pd.DataFrame({column_interested_in: person, \"released\": released, \"cumulative_mean\": cumulative_avg, \"exp_mean\": exp_avg})\n",
    "    return(df_2)\n",
    "\n",
    "#This includes the functions above, and will calculate the exponential and cumulative moving averages for which ever \n",
    "#column we specify and return a df will the column interested in, released, cumulative_mean, exp_mean\n",
    "def calculating_moving_avg(df, column_interested_in, column_to_be_meaned, ty):\n",
    "    people_df = pd.DataFrame()\n",
    "    people = getting_list_of_entries(df, column_interested_in, column_to_be_meaned)\n",
    "    cumulative_avg = []\n",
    "    avg_people = people[0]\n",
    "    avg_people\n",
    "    for person in people[1]: \n",
    "        d = avg_people.groupby(column_interested_in).get_group(person)\n",
    "        cumulative_avg = cumulative_moving_avg(d)\n",
    "        exp_avg = exp_moving_avg(d, column_to_be_meaned)\n",
    "        d.reset_index(inplace = True)\n",
    "        released = d[\"released\"]\n",
    "        df = pd.DataFrame({column_interested_in: person, \"released\": released, ty+\"_cumulative_mean_\"+column_interested_in : cumulative_avg, ty+\"_exp_mean_\"+column_interested_in: exp_avg})\n",
    "        people_df = people_df.append(df)\n",
    "    return(people_df)\n",
    "\n",
    "#Confusion Matrix Graph Function \n",
    "def confusion_matrix_graph (cm, accuracy_label, type_of_df): \n",
    "    g = plt.figure(figsize=(2,2))\n",
    "    g = sns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r', cbar = False);\n",
    "    g = plt.ylabel('Actual');\n",
    "    g = plt.xlabel('Predicted');\n",
    "    g = all_sample_title = type_of_df +' Accuracy Score: {0}'.format(round(accuracy_label, 4))\n",
    "    g = plt.title(all_sample_title, size = 12);\n",
    "    return(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading in the V2_TN_reports.csv that we scraped \n",
    "movies = pd.read_csv(\"V2_TN_reports_dates.csv\", encoding = \"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>CreativeType</th>\n",
       "      <th>DomesticBoxOffice</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Infl.Adj.Dom.BoxOffice</th>\n",
       "      <th>InternationalBoxOffice</th>\n",
       "      <th>MaximumTheaters</th>\n",
       "      <th>OpeningWeekendRevenue</th>\n",
       "      <th>OpeningWeekendTheaters</th>\n",
       "      <th>ProductionBudget</th>\n",
       "      <th>ProductionMethod</th>\n",
       "      <th>Released</th>\n",
       "      <th>ReleasedWorldwide</th>\n",
       "      <th>ReleasedWorldwide_2</th>\n",
       "      <th>Released_2</th>\n",
       "      <th>Source</th>\n",
       "      <th>TheatricalDistributor</th>\n",
       "      <th>TheatricalEngagements</th>\n",
       "      <th>Title</th>\n",
       "      <th>WorldwideBoxOffice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Fantasy</td>\n",
       "      <td>$317,871,467</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$510,437,208</td>\n",
       "      <td>$657,176,139</td>\n",
       "      <td>3,672</td>\n",
       "      <td>$90,294,621</td>\n",
       "      <td>3,672</td>\n",
       "      <td>$125,000,000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>Nov 16, 2001</td>\n",
       "      <td>Nov 15, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>36,120</td>\n",
       "      <td>Harry Potter and the SorcererÃ¢ÂÂs Stone</td>\n",
       "      <td>$975,047,606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Fantasy</td>\n",
       "      <td>$315,544,750</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$502,999,394</td>\n",
       "      <td>$571,666,235</td>\n",
       "      <td>3,381</td>\n",
       "      <td>$47,211,490</td>\n",
       "      <td>3,359</td>\n",
       "      <td>$109,000,000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>Dec 19, 2001</td>\n",
       "      <td>Dec 19, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>New Line</td>\n",
       "      <td>39,234</td>\n",
       "      <td>The Lord of the Rings: The Fellowshipâ¦</td>\n",
       "      <td>$887,210,985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$289,423,425</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$449,635,428</td>\n",
       "      <td>$270,334,294</td>\n",
       "      <td>3,649</td>\n",
       "      <td>$62,577,067</td>\n",
       "      <td>3,237</td>\n",
       "      <td>$115,000,000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>Nov 2, 2001</td>\n",
       "      <td>Nov 2, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Original Screenplay</td>\n",
       "      <td>Walt Disney</td>\n",
       "      <td>45,411</td>\n",
       "      <td>Monsters, Inc.</td>\n",
       "      <td>$559,757,719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$267,655,011</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$430,801,615</td>\n",
       "      <td>$224,157,783</td>\n",
       "      <td>3,715</td>\n",
       "      <td>$42,347,760</td>\n",
       "      <td>3,587</td>\n",
       "      <td>$50,000,000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>May 18, 2001</td>\n",
       "      <td>May 18, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Dreamworks SKG</td>\n",
       "      <td>40,234</td>\n",
       "      <td>Shrek</td>\n",
       "      <td>$491,812,794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$260,044,825</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$438,980,791</td>\n",
       "      <td>$85,096,578</td>\n",
       "      <td>3,256</td>\n",
       "      <td>$55,820,330</td>\n",
       "      <td>3,127</td>\n",
       "      <td>$123,000,000</td>\n",
       "      <td>Live Action</td>\n",
       "      <td>Nov 17, 2000</td>\n",
       "      <td>Nov 17, 2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Universal</td>\n",
       "      <td>27,579</td>\n",
       "      <td>How the Grinch Stole Christmas</td>\n",
       "      <td>$345,141,403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  CreativeType DomesticBoxOffice      Genre  \\\n",
       "0           0       Fantasy      $317,871,467  Adventure   \n",
       "1           1       Fantasy      $315,544,750  Adventure   \n",
       "2           2  Kids Fiction      $289,423,425  Adventure   \n",
       "3           3  Kids Fiction      $267,655,011  Adventure   \n",
       "4           4  Kids Fiction      $260,044,825  Adventure   \n",
       "\n",
       "  Infl.Adj.Dom.BoxOffice InternationalBoxOffice MaximumTheaters  \\\n",
       "0           $510,437,208           $657,176,139           3,672   \n",
       "1           $502,999,394           $571,666,235           3,381   \n",
       "2           $449,635,428           $270,334,294           3,649   \n",
       "3           $430,801,615           $224,157,783           3,715   \n",
       "4           $438,980,791            $85,096,578           3,256   \n",
       "\n",
       "  OpeningWeekendRevenue OpeningWeekendTheaters ProductionBudget  \\\n",
       "0           $90,294,621                  3,672     $125,000,000   \n",
       "1           $47,211,490                  3,359     $109,000,000   \n",
       "2           $62,577,067                  3,237     $115,000,000   \n",
       "3           $42,347,760                  3,587      $50,000,000   \n",
       "4           $55,820,330                  3,127     $123,000,000   \n",
       "\n",
       "        ProductionMethod      Released ReleasedWorldwide  ReleasedWorldwide_2  \\\n",
       "0  Animation/Live Action  Nov 16, 2001      Nov 15, 2001                 2001   \n",
       "1  Animation/Live Action  Dec 19, 2001      Dec 19, 2001                 2001   \n",
       "2      Digital Animation   Nov 2, 2001       Nov 2, 2001                 2001   \n",
       "3      Digital Animation  May 18, 2001      May 18, 2001                 2001   \n",
       "4            Live Action  Nov 17, 2000      Nov 17, 2000                 2000   \n",
       "\n",
       "   Released_2                             Source TheatricalDistributor  \\\n",
       "0        2001  Based on Fiction Book/Short Story          Warner Bros.   \n",
       "1        2001  Based on Fiction Book/Short Story              New Line   \n",
       "2        2001                Original Screenplay           Walt Disney   \n",
       "3        2001  Based on Fiction Book/Short Story        Dreamworks SKG   \n",
       "4        2000  Based on Fiction Book/Short Story             Universal   \n",
       "\n",
       "  TheatricalEngagements                                       Title  \\\n",
       "0                36,120  Harry Potter and the SorcererÃ¢ÂÂs Stone   \n",
       "1                39,234    The Lord of the Rings: The Fellowshipâ¦   \n",
       "2                45,411                              Monsters, Inc.   \n",
       "3                40,234                                       Shrek   \n",
       "4                27,579              How the Grinch Stole Christmas   \n",
       "\n",
       "  WorldwideBoxOffice  \n",
       "0       $975,047,606  \n",
       "1       $887,210,985  \n",
       "2       $559,757,719  \n",
       "3       $491,812,794  \n",
       "4       $345,141,403  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are dropping the first column named Unnamed:0 \n",
    "movies.drop(\"Unnamed: 0\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1987, 19)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We have 1987 movies and 19 columns in our current df \n",
    "#We are going to drop any rows if they have nas or missing values for budget\n",
    "movies.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1971"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are going to check to see if we have any duplicates \n",
    "movies.drop_duplicates(subset =\"Title\", \n",
    "                     keep = \"first\", inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1060"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies.Title.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We had 16 movies with missing values... \n",
    "#Now we are going to drop any movies with 0s in budget \n",
    "movies = movies[movies[\"ProductionBudget\"] != \"$0\"]\n",
    "movies = movies.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1060"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies)\n",
    "#We did not have any movies with a 0 budget "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are going to drop any movies with a DomesticBoxOffice of 0 \n",
    "movies = movies[movies[\"DomesticBoxOffice\"] != \"$0\"]\n",
    "movies = movies.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1041"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['level_0', 'index', 'CreativeType', 'DomesticBoxOffice', 'Genre',\n",
       "       'Infl.Adj.Dom.BoxOffice', 'InternationalBoxOffice', 'MaximumTheaters',\n",
       "       'OpeningWeekendRevenue', 'OpeningWeekendTheaters', 'ProductionBudget',\n",
       "       'ProductionMethod', 'Released', 'ReleasedWorldwide',\n",
       "       'ReleasedWorldwide_2', 'Released_2', 'Source', 'TheatricalDistributor',\n",
       "       'TheatricalEngagements', 'Title', 'WorldwideBoxOffice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We had 19 movies with missing domestic box office info \n",
    "\n",
    "#We are going to change column names to something a little more user friendly. First, we will look at the column names \n",
    "movies.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "movies.drop(['level_0', 'index'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = [\"creative_type\", \"domestic_box_office\", \"genre\", \"inflated_adj_dom_box_office\", \"int_box_office\", \"max_theaters\", \n",
    "                \"open_wkend_rev\", \"open_wkend_theaters\", \"budget\", \"production_method\", \"released\", \"released_ww\", \"year\",\n",
    "                \"year_ww\", \"source\", \"distributor\", \"engagements\", \"title\", \"world_wide_box_office\"]\n",
    "movies.columns = column_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>creative_type</th>\n",
       "      <th>domestic_box_office</th>\n",
       "      <th>genre</th>\n",
       "      <th>inflated_adj_dom_box_office</th>\n",
       "      <th>int_box_office</th>\n",
       "      <th>max_theaters</th>\n",
       "      <th>open_wkend_rev</th>\n",
       "      <th>open_wkend_theaters</th>\n",
       "      <th>budget</th>\n",
       "      <th>production_method</th>\n",
       "      <th>released</th>\n",
       "      <th>released_ww</th>\n",
       "      <th>year</th>\n",
       "      <th>year_ww</th>\n",
       "      <th>source</th>\n",
       "      <th>distributor</th>\n",
       "      <th>engagements</th>\n",
       "      <th>title</th>\n",
       "      <th>world_wide_box_office</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>$317,871,467</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$510,437,208</td>\n",
       "      <td>$657,176,139</td>\n",
       "      <td>3,672</td>\n",
       "      <td>$90,294,621</td>\n",
       "      <td>3,672</td>\n",
       "      <td>$125,000,000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>Nov 16, 2001</td>\n",
       "      <td>Nov 15, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>36,120</td>\n",
       "      <td>Harry Potter and the SorcererÃ¢ÂÂs Stone</td>\n",
       "      <td>$975,047,606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>$315,544,750</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$502,999,394</td>\n",
       "      <td>$571,666,235</td>\n",
       "      <td>3,381</td>\n",
       "      <td>$47,211,490</td>\n",
       "      <td>3,359</td>\n",
       "      <td>$109,000,000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>Dec 19, 2001</td>\n",
       "      <td>Dec 19, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>New Line</td>\n",
       "      <td>39,234</td>\n",
       "      <td>The Lord of the Rings: The Fellowshipâ¦</td>\n",
       "      <td>$887,210,985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$289,423,425</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$449,635,428</td>\n",
       "      <td>$270,334,294</td>\n",
       "      <td>3,649</td>\n",
       "      <td>$62,577,067</td>\n",
       "      <td>3,237</td>\n",
       "      <td>$115,000,000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>Nov 2, 2001</td>\n",
       "      <td>Nov 2, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Original Screenplay</td>\n",
       "      <td>Walt Disney</td>\n",
       "      <td>45,411</td>\n",
       "      <td>Monsters, Inc.</td>\n",
       "      <td>$559,757,719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$267,655,011</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$430,801,615</td>\n",
       "      <td>$224,157,783</td>\n",
       "      <td>3,715</td>\n",
       "      <td>$42,347,760</td>\n",
       "      <td>3,587</td>\n",
       "      <td>$50,000,000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>May 18, 2001</td>\n",
       "      <td>May 18, 2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Dreamworks SKG</td>\n",
       "      <td>40,234</td>\n",
       "      <td>Shrek</td>\n",
       "      <td>$491,812,794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>$260,044,825</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>$438,980,791</td>\n",
       "      <td>$85,096,578</td>\n",
       "      <td>3,256</td>\n",
       "      <td>$55,820,330</td>\n",
       "      <td>3,127</td>\n",
       "      <td>$123,000,000</td>\n",
       "      <td>Live Action</td>\n",
       "      <td>Nov 17, 2000</td>\n",
       "      <td>Nov 17, 2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "      <td>Universal</td>\n",
       "      <td>27,579</td>\n",
       "      <td>How the Grinch Stole Christmas</td>\n",
       "      <td>$345,141,403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  creative_type domestic_box_office      genre inflated_adj_dom_box_office  \\\n",
       "0       Fantasy        $317,871,467  Adventure                $510,437,208   \n",
       "1       Fantasy        $315,544,750  Adventure                $502,999,394   \n",
       "2  Kids Fiction        $289,423,425  Adventure                $449,635,428   \n",
       "3  Kids Fiction        $267,655,011  Adventure                $430,801,615   \n",
       "4  Kids Fiction        $260,044,825  Adventure                $438,980,791   \n",
       "\n",
       "  int_box_office max_theaters open_wkend_rev open_wkend_theaters  \\\n",
       "0   $657,176,139        3,672    $90,294,621               3,672   \n",
       "1   $571,666,235        3,381    $47,211,490               3,359   \n",
       "2   $270,334,294        3,649    $62,577,067               3,237   \n",
       "3   $224,157,783        3,715    $42,347,760               3,587   \n",
       "4    $85,096,578        3,256    $55,820,330               3,127   \n",
       "\n",
       "         budget      production_method      released   released_ww  year  \\\n",
       "0  $125,000,000  Animation/Live Action  Nov 16, 2001  Nov 15, 2001  2001   \n",
       "1  $109,000,000  Animation/Live Action  Dec 19, 2001  Dec 19, 2001  2001   \n",
       "2  $115,000,000      Digital Animation   Nov 2, 2001   Nov 2, 2001  2001   \n",
       "3   $50,000,000      Digital Animation  May 18, 2001  May 18, 2001  2001   \n",
       "4  $123,000,000            Live Action  Nov 17, 2000  Nov 17, 2000  2000   \n",
       "\n",
       "   year_ww                             source     distributor engagements  \\\n",
       "0     2001  Based on Fiction Book/Short Story    Warner Bros.      36,120   \n",
       "1     2001  Based on Fiction Book/Short Story        New Line      39,234   \n",
       "2     2001                Original Screenplay     Walt Disney      45,411   \n",
       "3     2001  Based on Fiction Book/Short Story  Dreamworks SKG      40,234   \n",
       "4     2000  Based on Fiction Book/Short Story       Universal      27,579   \n",
       "\n",
       "                                        title world_wide_box_office  \n",
       "0  Harry Potter and the SorcererÃ¢ÂÂs Stone          $975,047,606  \n",
       "1    The Lord of the Rings: The Fellowshipâ¦          $887,210,985  \n",
       "2                              Monsters, Inc.          $559,757,719  \n",
       "3                                       Shrek          $491,812,794  \n",
       "4              How the Grinch Stole Christmas          $345,141,403  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "creative_type                  object\n",
       "domestic_box_office            object\n",
       "genre                          object\n",
       "inflated_adj_dom_box_office    object\n",
       "int_box_office                 object\n",
       "max_theaters                   object\n",
       "open_wkend_rev                 object\n",
       "open_wkend_theaters            object\n",
       "budget                         object\n",
       "production_method              object\n",
       "released                       object\n",
       "released_ww                    object\n",
       "year                            int64\n",
       "year_ww                         int64\n",
       "source                         object\n",
       "distributor                    object\n",
       "engagements                    object\n",
       "title                          object\n",
       "world_wide_box_office          object\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking at the data type for each column in our df \n",
    "movies.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                     1041\n",
       "unique                       8\n",
       "top       Contemporary Fiction\n",
       "freq                       441\n",
       "Name: creative_type, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.creative_type.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Eventually, we need to change the following to numeric: \n",
    "    # domestic_box_office \n",
    "    # inflated_adj_dom_box_office \n",
    "    # int_box_office\n",
    "    # max_theathers \n",
    "    # open_wkend_rev \n",
    "    # open_wkend_theaters \n",
    "    # budget \n",
    "    # engagements \n",
    "    # world_wide_box_office \n",
    "# We need to change the following to category: \n",
    "    # creative_type \n",
    "    # genre \n",
    "    # production_method \n",
    "    # source \n",
    "    # distributor \n",
    "# We need to change the following to date: \n",
    "    # released \n",
    "    # released ww\n",
    "#Once we are done cleaning the data we are going to change the data types of the above questions. \n",
    "#If we change them now, when we clean the df and removed rows, the old categories \n",
    "#remain, and still show as possible categories. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#First we need to replace the $ and ',' in the columns to be changed to numeric \n",
    "#First, creating a list of columns that we want to change to numeric\n",
    "numeric_columns = [\"domestic_box_office\", \"inflated_adj_dom_box_office\", \"int_box_office\", \n",
    "                   \"max_theaters\", \"open_wkend_rev\", \"open_wkend_theaters\", \"budget\", \"engagements\", \n",
    "                    \"world_wide_box_office\"]\n",
    "#We are using our remove function which takes the following arguments: df, column, item to remove\n",
    "movies[\"domestic_box_office\"] = remove(movies, \"domestic_box_office\", \"$\")\n",
    "movies[\"domestic_box_office\"] = remove(movies, \"domestic_box_office\", \",\")\n",
    "movies[\"inflated_adj_dom_box_office\"] = remove(movies, \"inflated_adj_dom_box_office\", \"$\")\n",
    "movies[\"inflated_adj_dom_box_office\"] = remove(movies, \"inflated_adj_dom_box_office\", \",\")\n",
    "movies[\"int_box_office\"] = remove(movies, \"int_box_office\", \"$\")\n",
    "movies[\"int_box_office\"] = remove(movies, \"int_box_office\", \",\")\n",
    "movies[\"max_theaters\"] = remove(movies, \"max_theaters\", \",\")\n",
    "movies[\"open_wkend_theaters\"] = remove(movies, \"open_wkend_theaters\", \",\")\n",
    "movies[\"open_wkend_rev\"] = remove(movies, \"open_wkend_rev\", \"$\")\n",
    "movies[\"open_wkend_rev\"] = remove(movies, \"open_wkend_rev\", \",\")\n",
    "movies[\"budget\"] = remove(movies, \"budget\", \"$\")\n",
    "movies[\"budget\"] = remove(movies, \"budget\", \",\")\n",
    "movies[\"engagements\"] = remove(movies, \"engagements\", \",\")\n",
    "movies[\"world_wide_box_office\"] = remove(movies, \"world_wide_box_office\", \"$\")\n",
    "movies[\"world_wide_box_office\"] = remove(movies, \"world_wide_box_office\", \",\")\n",
    "#Changing all of the columns in numeric_columns to numeric \n",
    "movies[numeric_columns] = movies[numeric_columns].apply(pd.to_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need to change the following to date: released, released ww\n",
    "movies[\"released\"] = pd.to_datetime(movies[\"released\"])\n",
    "movies[\"released_ww\"] = pd.to_datetime(movies[\"released_ww\"])\n",
    "#Separating the month, day and year into their own columns in case we would like to analyze based on month, day or year\n",
    "movies[\"month\"], movies[\"day\"] = movies[\"released\"].dt.month, movies[\"released\"].dt.day\n",
    "movies[\"month_ww\"], movies[\"day_ww\"] = movies[\"released_ww\"].dt.month, movies[\"released_ww\"].dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "creative_type                          object\n",
       "domestic_box_office                     int64\n",
       "genre                                  object\n",
       "inflated_adj_dom_box_office             int64\n",
       "int_box_office                          int64\n",
       "max_theaters                            int64\n",
       "open_wkend_rev                          int64\n",
       "open_wkend_theaters                     int64\n",
       "budget                                  int64\n",
       "production_method                      object\n",
       "released                       datetime64[ns]\n",
       "released_ww                    datetime64[ns]\n",
       "year                                    int64\n",
       "year_ww                                 int64\n",
       "source                                 object\n",
       "distributor                            object\n",
       "engagements                             int64\n",
       "title                                  object\n",
       "world_wide_box_office                   int64\n",
       "month                                   int64\n",
       "day                                     int64\n",
       "month_ww                                int64\n",
       "day_ww                                  int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking data types again \n",
    "movies.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CategoricalDtype(categories=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], ordered=True)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Changing the month to an ordered category \n",
    "cat = list(range(1,13))\n",
    "#Changing the month data type from int to ordered category \n",
    "movies[\"month\"] = pd.Categorical(movies[\"month\"], ordered = True, categories = cat)\n",
    "movies[\"month_ww\"] = pd.Categorical(movies[\"month_ww\"], ordered = True, categories = cat)\n",
    "#Checking to see if it worked \n",
    "movies.month.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating columns named domestic_profit, int_profit, ww_profit \n",
    "#We want to be able to look at the profit for each movie... Therefore we are creating a \n",
    "#profit column which is gross - budget \n",
    "movies[\"dom_profit\"] = movies[\"domestic_box_office\"] - movies[\"budget\"]\n",
    "movies[\"int_profit\"] = movies[\"int_box_office\"] - movies[\"budget\"]\n",
    "movies[\"ww_profit\"] = movies[\"world_wide_box_office\"] - movies[\"budget\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>creative_type</th>\n",
       "      <th>domestic_box_office</th>\n",
       "      <th>genre</th>\n",
       "      <th>inflated_adj_dom_box_office</th>\n",
       "      <th>int_box_office</th>\n",
       "      <th>max_theaters</th>\n",
       "      <th>open_wkend_rev</th>\n",
       "      <th>open_wkend_theaters</th>\n",
       "      <th>budget</th>\n",
       "      <th>production_method</th>\n",
       "      <th>...</th>\n",
       "      <th>engagements</th>\n",
       "      <th>title</th>\n",
       "      <th>world_wide_box_office</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>month_ww</th>\n",
       "      <th>day_ww</th>\n",
       "      <th>dom_profit</th>\n",
       "      <th>int_profit</th>\n",
       "      <th>ww_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>317871467</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>510437208</td>\n",
       "      <td>657176139</td>\n",
       "      <td>3672</td>\n",
       "      <td>90294621</td>\n",
       "      <td>3672</td>\n",
       "      <td>125000000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>36120</td>\n",
       "      <td>Harry Potter and the SorcererÃ¢ÂÂs Stone</td>\n",
       "      <td>975047606</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>192871467</td>\n",
       "      <td>532176139</td>\n",
       "      <td>850047606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>315544750</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>502999394</td>\n",
       "      <td>571666235</td>\n",
       "      <td>3381</td>\n",
       "      <td>47211490</td>\n",
       "      <td>3359</td>\n",
       "      <td>109000000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>39234</td>\n",
       "      <td>The Lord of the Rings: The Fellowshipâ¦</td>\n",
       "      <td>887210985</td>\n",
       "      <td>12</td>\n",
       "      <td>19</td>\n",
       "      <td>12</td>\n",
       "      <td>19</td>\n",
       "      <td>206544750</td>\n",
       "      <td>462666235</td>\n",
       "      <td>778210985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>289423425</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>449635428</td>\n",
       "      <td>270334294</td>\n",
       "      <td>3649</td>\n",
       "      <td>62577067</td>\n",
       "      <td>3237</td>\n",
       "      <td>115000000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>...</td>\n",
       "      <td>45411</td>\n",
       "      <td>Monsters, Inc.</td>\n",
       "      <td>559757719</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>174423425</td>\n",
       "      <td>155334294</td>\n",
       "      <td>444757719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>267655011</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>430801615</td>\n",
       "      <td>224157783</td>\n",
       "      <td>3715</td>\n",
       "      <td>42347760</td>\n",
       "      <td>3587</td>\n",
       "      <td>50000000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>...</td>\n",
       "      <td>40234</td>\n",
       "      <td>Shrek</td>\n",
       "      <td>491812794</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>217655011</td>\n",
       "      <td>174157783</td>\n",
       "      <td>441812794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>260044825</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>438980791</td>\n",
       "      <td>85096578</td>\n",
       "      <td>3256</td>\n",
       "      <td>55820330</td>\n",
       "      <td>3127</td>\n",
       "      <td>123000000</td>\n",
       "      <td>Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>27579</td>\n",
       "      <td>How the Grinch Stole Christmas</td>\n",
       "      <td>345141403</td>\n",
       "      <td>11</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>17</td>\n",
       "      <td>137044825</td>\n",
       "      <td>-37903422</td>\n",
       "      <td>222141403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  creative_type  domestic_box_office      genre  inflated_adj_dom_box_office  \\\n",
       "0       Fantasy            317871467  Adventure                    510437208   \n",
       "1       Fantasy            315544750  Adventure                    502999394   \n",
       "2  Kids Fiction            289423425  Adventure                    449635428   \n",
       "3  Kids Fiction            267655011  Adventure                    430801615   \n",
       "4  Kids Fiction            260044825  Adventure                    438980791   \n",
       "\n",
       "   int_box_office  max_theaters  open_wkend_rev  open_wkend_theaters  \\\n",
       "0       657176139          3672        90294621                 3672   \n",
       "1       571666235          3381        47211490                 3359   \n",
       "2       270334294          3649        62577067                 3237   \n",
       "3       224157783          3715        42347760                 3587   \n",
       "4        85096578          3256        55820330                 3127   \n",
       "\n",
       "      budget      production_method  ... engagements  \\\n",
       "0  125000000  Animation/Live Action  ...       36120   \n",
       "1  109000000  Animation/Live Action  ...       39234   \n",
       "2  115000000      Digital Animation  ...       45411   \n",
       "3   50000000      Digital Animation  ...       40234   \n",
       "4  123000000            Live Action  ...       27579   \n",
       "\n",
       "                                        title  world_wide_box_office  month  \\\n",
       "0  Harry Potter and the SorcererÃ¢ÂÂs Stone              975047606     11   \n",
       "1    The Lord of the Rings: The Fellowshipâ¦              887210985     12   \n",
       "2                              Monsters, Inc.              559757719     11   \n",
       "3                                       Shrek              491812794      5   \n",
       "4              How the Grinch Stole Christmas              345141403     11   \n",
       "\n",
       "  day month_ww  day_ww dom_profit  int_profit  ww_profit  \n",
       "0  16       11      15  192871467   532176139  850047606  \n",
       "1  19       12      19  206544750   462666235  778210985  \n",
       "2   2       11       2  174423425   155334294  444757719  \n",
       "3  18        5      18  217655011   174157783  441812794  \n",
       "4  17       11      17  137044825   -37903422  222141403  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking to see if that helped\n",
    "movies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a percent profit column to have a normalized way to compare profits. \n",
    "#percent_profit = profit/budget*100 \n",
    "movies[\"dom_percent_profit\"] = movies[\"dom_profit\"]/movies[\"budget\"]*100\n",
    "movies[\"int_percent_profit\"] = movies[\"int_profit\"]/movies[\"budget\"]*100\n",
    "movies[\"ww_percent_profit\"] = movies[\"ww_profit\"]/movies[\"budget\"]*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>creative_type</th>\n",
       "      <th>domestic_box_office</th>\n",
       "      <th>genre</th>\n",
       "      <th>inflated_adj_dom_box_office</th>\n",
       "      <th>int_box_office</th>\n",
       "      <th>max_theaters</th>\n",
       "      <th>open_wkend_rev</th>\n",
       "      <th>open_wkend_theaters</th>\n",
       "      <th>budget</th>\n",
       "      <th>production_method</th>\n",
       "      <th>...</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>month_ww</th>\n",
       "      <th>day_ww</th>\n",
       "      <th>dom_profit</th>\n",
       "      <th>int_profit</th>\n",
       "      <th>ww_profit</th>\n",
       "      <th>dom_percent_profit</th>\n",
       "      <th>int_percent_profit</th>\n",
       "      <th>ww_percent_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>317871467</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>510437208</td>\n",
       "      <td>657176139</td>\n",
       "      <td>3672</td>\n",
       "      <td>90294621</td>\n",
       "      <td>3672</td>\n",
       "      <td>125000000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>192871467</td>\n",
       "      <td>532176139</td>\n",
       "      <td>850047606</td>\n",
       "      <td>154.297174</td>\n",
       "      <td>425.740911</td>\n",
       "      <td>680.038085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fantasy</td>\n",
       "      <td>315544750</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>502999394</td>\n",
       "      <td>571666235</td>\n",
       "      <td>3381</td>\n",
       "      <td>47211490</td>\n",
       "      <td>3359</td>\n",
       "      <td>109000000</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>19</td>\n",
       "      <td>12</td>\n",
       "      <td>19</td>\n",
       "      <td>206544750</td>\n",
       "      <td>462666235</td>\n",
       "      <td>778210985</td>\n",
       "      <td>189.490596</td>\n",
       "      <td>424.464436</td>\n",
       "      <td>713.955032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>289423425</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>449635428</td>\n",
       "      <td>270334294</td>\n",
       "      <td>3649</td>\n",
       "      <td>62577067</td>\n",
       "      <td>3237</td>\n",
       "      <td>115000000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>174423425</td>\n",
       "      <td>155334294</td>\n",
       "      <td>444757719</td>\n",
       "      <td>151.672543</td>\n",
       "      <td>135.073299</td>\n",
       "      <td>386.745843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>267655011</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>430801615</td>\n",
       "      <td>224157783</td>\n",
       "      <td>3715</td>\n",
       "      <td>42347760</td>\n",
       "      <td>3587</td>\n",
       "      <td>50000000</td>\n",
       "      <td>Digital Animation</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>217655011</td>\n",
       "      <td>174157783</td>\n",
       "      <td>441812794</td>\n",
       "      <td>435.310022</td>\n",
       "      <td>348.315566</td>\n",
       "      <td>883.625588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kids Fiction</td>\n",
       "      <td>260044825</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>438980791</td>\n",
       "      <td>85096578</td>\n",
       "      <td>3256</td>\n",
       "      <td>55820330</td>\n",
       "      <td>3127</td>\n",
       "      <td>123000000</td>\n",
       "      <td>Live Action</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>17</td>\n",
       "      <td>137044825</td>\n",
       "      <td>-37903422</td>\n",
       "      <td>222141403</td>\n",
       "      <td>111.418557</td>\n",
       "      <td>-30.815790</td>\n",
       "      <td>180.602767</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  creative_type  domestic_box_office      genre  inflated_adj_dom_box_office  \\\n",
       "0       Fantasy            317871467  Adventure                    510437208   \n",
       "1       Fantasy            315544750  Adventure                    502999394   \n",
       "2  Kids Fiction            289423425  Adventure                    449635428   \n",
       "3  Kids Fiction            267655011  Adventure                    430801615   \n",
       "4  Kids Fiction            260044825  Adventure                    438980791   \n",
       "\n",
       "   int_box_office  max_theaters  open_wkend_rev  open_wkend_theaters  \\\n",
       "0       657176139          3672        90294621                 3672   \n",
       "1       571666235          3381        47211490                 3359   \n",
       "2       270334294          3649        62577067                 3237   \n",
       "3       224157783          3715        42347760                 3587   \n",
       "4        85096578          3256        55820330                 3127   \n",
       "\n",
       "      budget      production_method  ... month day  month_ww  day_ww  \\\n",
       "0  125000000  Animation/Live Action  ...    11  16        11      15   \n",
       "1  109000000  Animation/Live Action  ...    12  19        12      19   \n",
       "2  115000000      Digital Animation  ...    11   2        11       2   \n",
       "3   50000000      Digital Animation  ...     5  18         5      18   \n",
       "4  123000000            Live Action  ...    11  17        11      17   \n",
       "\n",
       "  dom_profit int_profit  ww_profit dom_percent_profit  int_percent_profit  \\\n",
       "0  192871467  532176139  850047606         154.297174          425.740911   \n",
       "1  206544750  462666235  778210985         189.490596          424.464436   \n",
       "2  174423425  155334294  444757719         151.672543          135.073299   \n",
       "3  217655011  174157783  441812794         435.310022          348.315566   \n",
       "4  137044825  -37903422  222141403         111.418557          -30.815790   \n",
       "\n",
       "  ww_percent_profit  \n",
       "0        680.038085  \n",
       "1        713.955032  \n",
       "2        386.745843  \n",
       "3        883.625588  \n",
       "4        180.602767  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking to see that worked \n",
    "movies.head()\n",
    "#Writing the clean version of the df to a csv file \n",
    "#movies.to_csv(\"clean.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #For some reason the functions do not work without rereading in the csv file... \n",
    "# movies = pd.read_csv(\"clean.csv\", encoding = \"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1041"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies.domestic_box_office.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Aggregating a moving average column and calculating the mean average pp for each creative type;\n",
    "#by calculating the mean pp for all creative types but for only the movies prior to the \n",
    "#movie we are calculting the mean for. \n",
    "dom_ct_ma = calculating_moving_avg(movies, \"creative_type\", \"dom_percent_profit\", \"dom\")\n",
    "int_ct_ma = calculating_moving_avg(movies, \"creative_type\", \"int_percent_profit\", \"int\")\n",
    "ww_ct_ma = calculating_moving_avg(movies, \"creative_type\", \"ww_percent_profit\", \"ww\")\n",
    "# #Genres: \n",
    "dom_genre_ma = calculating_moving_avg(movies, \"genre\", \"dom_percent_profit\", \"dom\")\n",
    "int_genre_ma = calculating_moving_avg(movies, \"genre\", \"int_percent_profit\", \"int\")\n",
    "ww_genre_ma = calculating_moving_avg(movies, \"genre\", \"ww_percent_profit\", \"ww\")\n",
    "# production_method: \n",
    "dom_pm_ma = calculating_moving_avg(movies, \"production_method\", \"dom_percent_profit\", \"dom\")\n",
    "int_pm_ma = calculating_moving_avg(movies, \"production_method\", \"int_percent_profit\", \"int\")\n",
    "ww_pm_ma = calculating_moving_avg(movies, \"production_method\", \"ww_percent_profit\", \"ww\")\n",
    "# source\n",
    "dom_source_ma = calculating_moving_avg(movies, \"source\", \"dom_percent_profit\", \"dom\")\n",
    "int_source_ma = calculating_moving_avg(movies, \"source\", \"int_percent_profit\", \"int\")\n",
    "ww_source_ma = calculating_moving_avg(movies, \"source\", \"ww_percent_profit\", \"ww\")\n",
    "# distributor: \n",
    "dom_distributor_ma = calculating_moving_avg(movies, \"distributor\", \"dom_percent_profit\", \"dom\")\n",
    "int_distributor_ma = calculating_moving_avg(movies, \"distributor\", \"int_percent_profit\", \"int\")\n",
    "ww_distributor_ma = calculating_moving_avg(movies, \"distributor\", \"ww_percent_profit\", \"ww\")\n",
    "#Month \n",
    "dom_month_ma = calculating_moving_avg(movies, \"month\", \"dom_percent_profit\", \"dom\")\n",
    "int_month_ma = calculating_moving_avg(movies, \"month\", \"int_percent_profit\", \"int\")\n",
    "ww_month_ma = calculating_moving_avg(movies, \"month\", \"ww_percent_profit\", \"ww\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#We are going to use our left_merge_2_conditions function: \n",
    "#Inputs: df1, df2, column to merge on 1 and column to merge on 2 \n",
    "\n",
    "#Creating a movies domestic df \n",
    "movies_dom = left_merge_2_conditions(movies, dom_ct_ma, \"creative_type\", \"released\")\n",
    "movies_dom = left_merge_2_conditions(movies_dom, dom_genre_ma, \"genre\", \"released\")\n",
    "movies_dom = left_merge_2_conditions(movies_dom, dom_pm_ma, \"production_method\", \"released\")\n",
    "movies_dom = left_merge_2_conditions(movies_dom, dom_source_ma, \"source\", \"released\")\n",
    "movies_dom = left_merge_2_conditions(movies_dom, dom_distributor_ma, \"distributor\", \"released\")\n",
    "movies_dom = left_merge_2_conditions(movies_dom, dom_month_ma, \"month\", \"released\")\n",
    "\n",
    "#Creating a movies_int df \n",
    "movies_int = left_merge_2_conditions(movies, int_ct_ma, \"creative_type\", \"released\")\n",
    "movies_int = left_merge_2_conditions(movies_int, int_genre_ma, \"genre\", \"released\")\n",
    "movies_int = left_merge_2_conditions(movies_int, int_pm_ma, \"production_method\", \"released\")\n",
    "movies_int = left_merge_2_conditions(movies_int, int_source_ma, \"source\", \"released\")\n",
    "movies_int = left_merge_2_conditions(movies_int, int_distributor_ma, \"distributor\", \"released\")\n",
    "movies_int = left_merge_2_conditions(movies_int, int_month_ma, \"month\", \"released\")\n",
    "\n",
    "#Creating a movies_ww df \n",
    "movies_ww = left_merge_2_conditions(movies, ww_ct_ma, \"creative_type\", \"released\")\n",
    "movies_ww = left_merge_2_conditions(movies_ww, ww_genre_ma, \"genre\", \"released\")\n",
    "movies_ww = left_merge_2_conditions(movies_ww, ww_pm_ma, \"production_method\", \"released\")\n",
    "movies_ww = left_merge_2_conditions(movies_ww, ww_source_ma, \"source\", \"released\")\n",
    "movies_ww = left_merge_2_conditions(movies_ww, ww_distributor_ma, \"distributor\", \"released\")\n",
    "movies_ww = left_merge_2_conditions(movies_ww, ww_month_ma, \"month\", \"released\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1041"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking at the movies_dom df head \n",
    "len(movies_dom)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'domestic_box_office', 'genre',\n",
       "       'inflated_adj_dom_box_office', 'int_box_office', 'max_theaters',\n",
       "       'open_wkend_rev', 'open_wkend_theaters', 'budget', 'production_method',\n",
       "       'released', 'released_ww', 'year', 'year_ww', 'source', 'distributor',\n",
       "       'engagements', 'title', 'world_wide_box_office', 'month', 'day',\n",
       "       'month_ww', 'day_ww', 'dom_profit', 'int_profit', 'ww_profit',\n",
       "       'dom_percent_profit', 'int_percent_profit', 'ww_percent_profit',\n",
       "       'dom_cumulative_mean_creative_type', 'dom_exp_mean_creative_type',\n",
       "       'dom_cumulative_mean_genre', 'dom_exp_mean_genre',\n",
       "       'dom_cumulative_mean_production_method',\n",
       "       'dom_exp_mean_production_method', 'dom_cumulative_mean_source',\n",
       "       'dom_exp_mean_source', 'dom_cumulative_mean_distributor',\n",
       "       'dom_exp_mean_distributor', 'dom_cumulative_mean_month',\n",
       "       'dom_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the column names for movies_dom\n",
    "movies_dom.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'genre', 'open_wkend_rev', 'open_wkend_theaters',\n",
       "       'budget', 'production_method', 'released', 'year', 'source',\n",
       "       'distributor', 'title', 'month', 'day', 'dom_percent_profit',\n",
       "       'dom_cumulative_mean_creative_type', 'dom_exp_mean_creative_type',\n",
       "       'dom_cumulative_mean_genre', 'dom_exp_mean_genre',\n",
       "       'dom_cumulative_mean_production_method',\n",
       "       'dom_exp_mean_production_method', 'dom_cumulative_mean_source',\n",
       "       'dom_exp_mean_source', 'dom_cumulative_mean_distributor',\n",
       "       'dom_exp_mean_distributor', 'dom_cumulative_mean_month',\n",
       "       'dom_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing released_ww, year_ww, world_wide_box_office, month_ww, day_ww, int_profit, ww_profit\n",
    "columns_to_remove = [\"released_ww\", \"year_ww\", \"world_wide_box_office\", \"month_ww\", \"day_ww\", \"int_profit\", \"ww_profit\", \"int_percent_profit\", \"ww_percent_profit\", \"int_box_office\", \n",
    "                    \"domestic_box_office\", \"inflated_adj_dom_box_office\", \"max_theaters\", \"engagements\", \"dom_profit\"]\n",
    "movies_dom.drop(columns_to_remove, axis = 1, inplace = True)\n",
    "movies_dom.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating an aggregated column to see if the open_wken_rev/open_wkend_theaters shows if a movie is in more demand \n",
    "movies_dom[\"open_wkend_rev/open_wkend_theaters\"] = movies_dom[\"open_wkend_rev\"]/movies_dom[\"open_wkend_theaters\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are removing any rows that have 0s for the newly calculated columns \n",
    "#Looking to see what happens if we remove all the movies with a 0 for exp_mean_director and exp_mean_star\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_creative_type\"] != 0]\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_genre\"] != 0]\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_production_method\"] != 0]\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_source\"] != 0]\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_distributor\"] != 0]\n",
    "movies_dom = movies_dom[movies_dom[\"dom_cumulative_mean_month\"] != 0]\n",
    "\n",
    "movies_dom.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "968"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies_dom) #We still have 1859 movies in our df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing creative_type, genre, production_method, source, distributor to category \n",
    "#We are using our cat_fun which takes the following inputs: df, column to change\n",
    "movies_dom[\"creative_type\"] = cat_fun(movies_dom, \"creative_type\")\n",
    "movies_dom[\"genre\"] = cat_fun(movies_dom, \"genre\")\n",
    "movies_dom[\"production_method\"] = cat_fun(movies_dom, \"production_method\")\n",
    "movies_dom[\"source\"] = cat_fun(movies_dom, \"source\")\n",
    "movies_dom[\"distributor\"] = cat_fun(movies_dom, \"distributor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'domestic_box_office', 'genre',\n",
       "       'inflated_adj_dom_box_office', 'int_box_office', 'max_theaters',\n",
       "       'open_wkend_rev', 'open_wkend_theaters', 'budget', 'production_method',\n",
       "       'released', 'released_ww', 'year', 'year_ww', 'source', 'distributor',\n",
       "       'engagements', 'title', 'world_wide_box_office', 'month', 'day',\n",
       "       'month_ww', 'day_ww', 'dom_profit', 'int_profit', 'ww_profit',\n",
       "       'dom_percent_profit', 'int_percent_profit', 'ww_percent_profit',\n",
       "       'int_cumulative_mean_creative_type', 'int_exp_mean_creative_type',\n",
       "       'int_cumulative_mean_genre', 'int_exp_mean_genre',\n",
       "       'int_cumulative_mean_production_method',\n",
       "       'int_exp_mean_production_method', 'int_cumulative_mean_source',\n",
       "       'int_exp_mean_source', 'int_cumulative_mean_distributor',\n",
       "       'int_exp_mean_distributor', 'int_cumulative_mean_month',\n",
       "       'int_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Repeating the above process for movies_int \n",
    "#Looking at the movies_int columns \n",
    "movies_int.columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'genre', 'open_wkend_rev', 'open_wkend_theaters',\n",
       "       'budget', 'production_method', 'released_ww', 'year_ww', 'source',\n",
       "       'distributor', 'title', 'month_ww', 'day_ww', 'int_percent_profit',\n",
       "       'int_cumulative_mean_creative_type', 'int_exp_mean_creative_type',\n",
       "       'int_cumulative_mean_genre', 'int_exp_mean_genre',\n",
       "       'int_cumulative_mean_production_method',\n",
       "       'int_exp_mean_production_method', 'int_cumulative_mean_source',\n",
       "       'int_exp_mean_source', 'int_cumulative_mean_distributor',\n",
       "       'int_exp_mean_distributor', 'int_cumulative_mean_month',\n",
       "       'int_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Removing columns that might unduly influence our prediction method for movies_int \n",
    "columns_to_remove = [\"domestic_box_office\", \"inflated_adj_dom_box_office\", \"int_box_office\", \"max_theaters\", \"world_wide_box_office\", \n",
    "                    \"engagements\", \"dom_profit\", \"int_profit\", \"ww_profit\", \"dom_percent_profit\", \"ww_percent_profit\", \n",
    "                    \"released\", \"year\", \"month\", \"day\"]\n",
    "movies_int.drop(columns_to_remove, axis = 1, inplace = True)\n",
    "movies_int.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aggregating a new column for open_wken_rev_by_theater; we think that it might show if a movie is more in demand or not. \n",
    "#If a movie made $1 million, but was only shown in 100 theaters and another movie made $1 million but was shown, in 300 \n",
    "#theaters, it might show that movie 1 was more in demand than movie 2... \n",
    "movies_int[\"open_wkend_rev/open_wkend_theaters\"] = movies_int[\"open_wkend_rev\"]/movies_int[\"open_wkend_theaters\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are removing any rows that have 0s for the newly calculated columns \n",
    "#Looking to see what happens if we remove all the movies with a 0 for exp_mean_director and exp_mean_star\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_creative_type\"] != 0]\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_genre\"] != 0]\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_production_method\"] != 0]\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_source\"] != 0]\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_distributor\"] != 0]\n",
    "movies_int = movies_int[movies_int[\"int_cumulative_mean_month\"] != 0]\n",
    "\n",
    "movies_int.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "968"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We still have 1859 movies after removing any of the aggregated columns with a 0 in them \n",
    "len(movies_int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing creative_type, genre, production_method, source, distributor to category \n",
    "#We are using our cat_fun which takes the following inputs: df, column to change\n",
    "movies_int[\"creative_type\"] = cat_fun(movies_int, \"creative_type\")\n",
    "movies_int[\"genre\"] = cat_fun(movies_int, \"genre\")\n",
    "movies_int[\"production_method\"] = cat_fun(movies_int, \"production_method\")\n",
    "movies_int[\"source\"] = cat_fun(movies_int, \"source\")\n",
    "movies_int[\"distributor\"] = cat_fun(movies_int, \"distributor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'domestic_box_office', 'genre',\n",
       "       'inflated_adj_dom_box_office', 'int_box_office', 'max_theaters',\n",
       "       'open_wkend_rev', 'open_wkend_theaters', 'budget', 'production_method',\n",
       "       'released', 'released_ww', 'year', 'year_ww', 'source', 'distributor',\n",
       "       'engagements', 'title', 'world_wide_box_office', 'month', 'day',\n",
       "       'month_ww', 'day_ww', 'dom_profit', 'int_profit', 'ww_profit',\n",
       "       'dom_percent_profit', 'int_percent_profit', 'ww_percent_profit',\n",
       "       'ww_cumulative_mean_creative_type', 'ww_exp_mean_creative_type',\n",
       "       'ww_cumulative_mean_genre', 'ww_exp_mean_genre',\n",
       "       'ww_cumulative_mean_production_method', 'ww_exp_mean_production_method',\n",
       "       'ww_cumulative_mean_source', 'ww_exp_mean_source',\n",
       "       'ww_cumulative_mean_distributor', 'ww_exp_mean_distributor',\n",
       "       'ww_cumulative_mean_month', 'ww_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#repeating the process for ww \n",
    "movies_ww.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['creative_type', 'genre', 'open_wkend_rev', 'open_wkend_theaters',\n",
       "       'budget', 'production_method', 'released', 'released_ww', 'year',\n",
       "       'year_ww', 'source', 'distributor', 'title', 'month', 'day', 'month_ww',\n",
       "       'day_ww', 'ww_percent_profit', 'ww_cumulative_mean_creative_type',\n",
       "       'ww_exp_mean_creative_type', 'ww_cumulative_mean_genre',\n",
       "       'ww_exp_mean_genre', 'ww_cumulative_mean_production_method',\n",
       "       'ww_exp_mean_production_method', 'ww_cumulative_mean_source',\n",
       "       'ww_exp_mean_source', 'ww_cumulative_mean_distributor',\n",
       "       'ww_exp_mean_distributor', 'ww_cumulative_mean_month',\n",
       "       'ww_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Removing columns that would be unfair in our prediction methods \n",
    "columns_to_remove = [\"domestic_box_office\", \"inflated_adj_dom_box_office\", \"int_box_office\", \"max_theaters\", \n",
    "                    \"engagements\", \"world_wide_box_office\", \"dom_profit\", \"int_profit\", \"ww_profit\", \"dom_percent_profit\", \n",
    "                    \"int_percent_profit\"]\n",
    "movies_ww.drop(columns_to_remove, axis = 1, inplace = True)\n",
    "movies_ww.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aggregating a new column for open_wken_rev_by_theater; we think that it might show if a movie is more in demand or not. \n",
    "#If a movie made $1 million, but was only shown in 100 theaters and another movie made $1 million but was shown, in 300 \n",
    "#theaters, it might show that movie 1 was more in demand than movie 2... \n",
    "movies_ww[\"open_wkend_rev/open_wkend_theaters\"] = movies_ww[\"open_wkend_rev\"]/movies_ww[\"open_wkend_theaters\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We are removing any rows that have 0s for the newly calculated columns \n",
    "#Looking to see what happens if we remove all the movies with a 0 for exp_mean_director and exp_mean_star\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_creative_type\"] != 0]\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_genre\"] != 0]\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_production_method\"] != 0]\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_source\"] != 0]\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_distributor\"] != 0]\n",
    "movies_ww = movies_ww[movies_ww[\"ww_cumulative_mean_month\"] != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "977"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies_ww) #We still have 1859 movies in our df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing creative_type, genre, production_method, source, distributor to category \n",
    "#We are using our cat_fun which takes the following inputs: df, column to change\n",
    "movies_ww[\"creative_type\"] = cat_fun(movies_ww, \"creative_type\")\n",
    "movies_ww[\"genre\"] = cat_fun(movies_ww, \"genre\")\n",
    "movies_ww[\"production_method\"] = cat_fun(movies_ww, \"production_method\")\n",
    "movies_ww[\"source\"] = cat_fun(movies_ww, \"source\")\n",
    "movies_ww[\"distributor\"] = cat_fun(movies_ww, \"distributor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "# movies_dom.to_csv(\"movies_dom.csv\")\n",
    "# movies_int.to_csv(\"movies_int.csv\")\n",
    "# movies_ww.to_csv(\"movies_ww.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We have the same movies with the same discrete columns in our 3 dfs... Therefore, we are only going to perform \n",
    "#exploratory data analysis on one, but it will mimic the other 2 dfs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>192</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>273</td>\n",
       "      <td>Adventure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>Black Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>165</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>Concert/Performance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>Documentary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>132</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>47</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>15</td>\n",
       "      <td>Musical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>42</td>\n",
       "      <td>Romantic Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>88</td>\n",
       "      <td>Thriller/Suspense</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>7</td>\n",
       "      <td>Western</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count                genre\n",
       "0     192               Action\n",
       "1     273            Adventure\n",
       "2       5         Black Comedy\n",
       "3     165               Comedy\n",
       "4       1  Concert/Performance\n",
       "5       1          Documentary\n",
       "6     132                Drama\n",
       "7      47               Horror\n",
       "8      15              Musical\n",
       "9      42      Romantic Comedy\n",
       "10     88    Thriller/Suspense\n",
       "11      7              Western"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#What is the breakdown of genre in our df?\n",
    "\n",
    "#Getting the count of movies for each genre in our df and saving it as a pandas df. \n",
    "#We are grouping by genre and then getting the count of the genre column in each group by \n",
    "#we could have used any column to get the count of... \n",
    "#We are using the groupby_count function that takes the following arguments (df, groupby_column, count_column)\n",
    "movies_dom_genre = groupby_count(movies_dom, \"genre\", \"genre\")\n",
    "movies_dom_genre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'genre')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using our bar_graph_count function to visualize the movies_genre group \n",
    "#It takes the following inputs: df, x_column, y_column, title\n",
    "movies_dom_genre.sort_values(['count'], ascending=[False], inplace = True)\n",
    "bar_graph_count(movies_dom_genre, \"genre\", \"count\", \"Visualization of the Number of Movies per Genre\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    Contemporary Fiction\n",
       "1           Dramatization\n",
       "2                 Factual\n",
       "3                 Fantasy\n",
       "4      Historical Fiction\n",
       "5            Kids Fiction\n",
       "6         Science Fiction\n",
       "7              Super Hero\n",
       "Name: creative_type, dtype: category\n",
       "Categories (8, object): [Contemporary Fiction, Dramatization, Factual, Fantasy, Historical Fiction, Kids Fiction, Science Fiction, Super Hero]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating a data frame of the movies creative_type count \n",
    "movies_ct = groupby_count(movies_dom, \"creative_type\", \"creative_type\") \n",
    "movies_ct[\"creative_type\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'creative_type')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Sorting the df, so the bar graph will be in descending order\n",
    "movies_ct.sort_values(['count'], ascending=[False], inplace = True)\n",
    "bar_graph_count(movies_ct, \"creative_type\", \"count\", \"Visualization of the Number of Movies per Creative Type\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>2001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>53</td>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>42</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>55</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>44</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>53</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>47</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>50</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>48</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>51</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>51</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>48</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>53</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>50</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>68</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>45</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count  year\n",
       "0      17  2000\n",
       "1      45  2001\n",
       "2      47  2002\n",
       "3      52  2003\n",
       "4      53  2004\n",
       "5      42  2005\n",
       "6      55  2006\n",
       "7      44  2007\n",
       "8      53  2008\n",
       "9      49  2009\n",
       "10     47  2010\n",
       "11     50  2011\n",
       "12     48  2012\n",
       "13     51  2013\n",
       "14     51  2014\n",
       "15     48  2015\n",
       "16     53  2016\n",
       "17     50  2017\n",
       "18     68  2018\n",
       "19     45  2019"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_year = groupby_count(movies_dom, \"year\", \"genre\")\n",
    "movies_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'year')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_graph_count(movies_year, \"year\", \"count\", \"Visualization of the Number of Movies per Year\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>82</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>116</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>108</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>71</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>47</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>55</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>110</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>126</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count  month\n",
       "0      38      1\n",
       "1      64      2\n",
       "2      82      3\n",
       "3      50      4\n",
       "4     101      5\n",
       "5     116      6\n",
       "6     108      7\n",
       "7      71      8\n",
       "8      47      9\n",
       "9      55     10\n",
       "10    110     11\n",
       "11    126     12"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_month = groupby_count(movies_dom, \"month\", \"genre\")\n",
    "movies_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'month')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_graph_count(movies_month, \"month\", \"count\", \"Visualization of the Number of Movies per Month\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>88</td>\n",
       "      <td>Based on Comic/Graphic Novel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>Based on Factual Book/Article</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>201</td>\n",
       "      <td>Based on Fiction Book/Short Story</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>Based on Folk Tale/Legend/Fairytale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>Based on Game</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "      <td>Based on Movie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>Based on Musical or Opera</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "      <td>Based on Play</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>39</td>\n",
       "      <td>Based on Real Life Events</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>Based on Religious Text</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>Based on Short Film</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>55</td>\n",
       "      <td>Based on TV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>Based on Theme Park Ride</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>8</td>\n",
       "      <td>Based on Toy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>421</td>\n",
       "      <td>Original Screenplay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>63</td>\n",
       "      <td>Remake</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>15</td>\n",
       "      <td>Spin-Off</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count                               source\n",
       "0      88         Based on Comic/Graphic Novel\n",
       "1      39        Based on Factual Book/Article\n",
       "2     201    Based on Fiction Book/Short Story\n",
       "3      12  Based on Folk Tale/Legend/Fairytale\n",
       "4       8                        Based on Game\n",
       "5       2                       Based on Movie\n",
       "6       2            Based on Musical or Opera\n",
       "7       5                        Based on Play\n",
       "8      39            Based on Real Life Events\n",
       "9       2              Based on Religious Text\n",
       "10      3                  Based on Short Film\n",
       "11     55                          Based on TV\n",
       "12      5             Based on Theme Park Ride\n",
       "13      8                         Based on Toy\n",
       "14    421                  Original Screenplay\n",
       "15     63                               Remake\n",
       "16     15                             Spin-Off"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_source = groupby_count(movies_dom, \"source\", \"genre\")\n",
    "movies_source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'source')"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "movies_source.sort_values(['count'], ascending=[False], inplace = True)\n",
    "bar_graph_count(movies_source, \"source\", \"count\", \"Visualization of the Number of Movies per Source\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>131</td>\n",
       "      <td>20th Century Fox</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19</td>\n",
       "      <td>Dreamworks SKG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>FilmDistrict</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>Focus Features</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>Fox Searchlight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>40</td>\n",
       "      <td>Lionsgate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9</td>\n",
       "      <td>MGM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>11</td>\n",
       "      <td>Miramax</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7</td>\n",
       "      <td>Miramax/Dimension</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21</td>\n",
       "      <td>New Line</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>126</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "      <td>Relativity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6</td>\n",
       "      <td>STX Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>151</td>\n",
       "      <td>Sony Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5</td>\n",
       "      <td>Summit Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>United Artists</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>135</td>\n",
       "      <td>Universal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>131</td>\n",
       "      <td>Walt Disney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>152</td>\n",
       "      <td>Warner Bros.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>6</td>\n",
       "      <td>Weinstein Co.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count           distributor\n",
       "0     131      20th Century Fox\n",
       "1      19        Dreamworks SKG\n",
       "2       1          FilmDistrict\n",
       "3       7        Focus Features\n",
       "4       6       Fox Searchlight\n",
       "5      40             Lionsgate\n",
       "6       9                   MGM\n",
       "7      11               Miramax\n",
       "8       7     Miramax/Dimension\n",
       "9      21              New Line\n",
       "10    126    Paramount Pictures\n",
       "11      3            Relativity\n",
       "12      6     STX Entertainment\n",
       "13    151         Sony Pictures\n",
       "14      5  Summit Entertainment\n",
       "15      1        United Artists\n",
       "16    135             Universal\n",
       "17    131           Walt Disney\n",
       "18    152          Warner Bros.\n",
       "19      6         Weinstein Co."
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_distributor = groupby_count(movies_dom, \"distributor\", \"genre\")\n",
    "movies_distributor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>131</td>\n",
       "      <td>20th Century Fox</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19</td>\n",
       "      <td>Dreamworks SKG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>FilmDistrict</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>Focus Features</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>Fox Searchlight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>40</td>\n",
       "      <td>Lionsgate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9</td>\n",
       "      <td>MGM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>11</td>\n",
       "      <td>Miramax</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7</td>\n",
       "      <td>Miramax/Dimension</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21</td>\n",
       "      <td>New Line</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>126</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "      <td>Relativity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6</td>\n",
       "      <td>STX Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>151</td>\n",
       "      <td>Sony Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5</td>\n",
       "      <td>Summit Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>United Artists</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>135</td>\n",
       "      <td>Universal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>131</td>\n",
       "      <td>Walt Disney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>152</td>\n",
       "      <td>Warner Bros.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>6</td>\n",
       "      <td>Weinstein Co.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count           distributor\n",
       "0     131      20th Century Fox\n",
       "1      19        Dreamworks SKG\n",
       "2       1          FilmDistrict\n",
       "3       7        Focus Features\n",
       "4       6       Fox Searchlight\n",
       "5      40             Lionsgate\n",
       "6       9                   MGM\n",
       "7      11               Miramax\n",
       "8       7     Miramax/Dimension\n",
       "9      21              New Line\n",
       "10    126    Paramount Pictures\n",
       "11      3            Relativity\n",
       "12      6     STX Entertainment\n",
       "13    151         Sony Pictures\n",
       "14      5  Summit Entertainment\n",
       "15      1        United Artists\n",
       "16    135             Universal\n",
       "17    131           Walt Disney\n",
       "18    152          Warner Bros.\n",
       "19      6         Weinstein Co."
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_distributor = movies_distributor[movies_distributor[\"count\"] > 0]\n",
    "movies_distributor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'distributor')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "movies_distributor.sort_values(['count'], ascending=[False], inplace = True)\n",
    "bar_graph_count(movies_distributor, \"distributor\", \"count\", \"Visualization of the Number of Movies per Distributor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>production_method</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>87</td>\n",
       "      <td>Animation/Live Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>110</td>\n",
       "      <td>Digital Animation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Hand Animation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>762</td>\n",
       "      <td>Live Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>Stop-Motion Animation</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   count      production_method\n",
       "0     87  Animation/Live Action\n",
       "1    110      Digital Animation\n",
       "2      8         Hand Animation\n",
       "3    762            Live Action\n",
       "4      1  Stop-Motion Animation"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_production_method = groupby_count(movies_dom, \"production_method\", \"genre\")\n",
    "movies_production_method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'production_method')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "movies_production_method.sort_values(['count'], ascending=[False], inplace = True)\n",
    "bar_graph_count(movies_production_method, \"production_method\", \"count\", \"Visualization of the Number of Movies per Production Method\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "######################################################################################################################\n",
    "#\n",
    "# We are ready to create our testing and training dfs, we are going to see if we can predict percent_profit \n",
    "# For the domestic movies we have a company called \"Flops are Us\" and we want to see if we can predict if a \n",
    "# movie will be a flop or not after the first weekend. \n",
    "#\n",
    "# We will also try to predict percent profit without the open_wkend_rev and open_wken_rev/open_wkend_theaters\n",
    "#\n",
    "######################################################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "#################################################################\n",
    "#Naive Bayes \n",
    "#**All Numerica Data *** \n",
    "#################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a test_train df for each of our 3 dfs \n",
    "test_train_movies_dom = movies_dom.copy() \n",
    "test_train_movies_int = movies_int.copy() \n",
    "test_train_movies_ww  = movies_ww.copy() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_train_movies_dom.columns\n",
    "#Need to remove \"creative_type\", \"genre\", \"production_method\", \"released\", \"source\", \"distributor\", \"title\"\n",
    "columns_to_remove = [\"creative_type\", \"genre\", \"production_method\", \"released\", \"source\", \"distributor\", \"title\", \"open_wkend_rev/open_wkend_theaters\", \"open_wkend_rev\", \"budget\", \"year\", \"month\", \"day\", \"open_wkend_theaters\"]\n",
    "columns_to_remove_ex = [\"dom_cumulative_mean_creative_type\", \"dom_cumulative_mean_genre\", \"dom_cumulative_mean_production_method\", \n",
    "                       \"dom_cumulative_mean_source\", \"dom_cumulative_mean_distributor\", \"dom_cumulative_mean_month\"]\n",
    "columns_to_remove_cumulative = [\"dom_exp_mean_creative_type\", \"dom_exp_mean_genre\", \"dom_exp_mean_production_method\", \n",
    "                       \"dom_exp_mean_source\", \"dom_exp_mean_distributor\", \"dom_exp_mean_month\"]\n",
    "test_train_movies_dom.drop(columns_to_remove, axis = 1, inplace = True)\n",
    "test_train_movies_dom_ex = test_train_movies_dom.copy() \n",
    "test_train_movies_dom_cumulative = test_train_movies_dom.copy() \n",
    "test_train_movies_dom_ex.drop(columns_to_remove_ex, axis = 1, inplace = True)\n",
    "test_train_movies_dom_cumulative.drop(columns_to_remove_cumulative, axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['dom_percent_profit', 'dom_cumulative_mean_creative_type',\n",
       "       'dom_exp_mean_creative_type', 'dom_cumulative_mean_genre',\n",
       "       'dom_exp_mean_genre', 'dom_cumulative_mean_production_method',\n",
       "       'dom_exp_mean_production_method', 'dom_cumulative_mean_source',\n",
       "       'dom_exp_mean_source', 'dom_cumulative_mean_distributor',\n",
       "       'dom_exp_mean_distributor', 'dom_cumulative_mean_month',\n",
       "       'dom_exp_mean_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_train_movies_dom.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_train_movies_int.columns\n",
    "#Need to remove \"creative_type\", \"genre\", \"production_method\", \"released_ww\", \"source\", \"distributor\", \"title\"\n",
    "columns_to_remove = [\"creative_type\", \"genre\", \"production_method\", \"released_ww\", \"source\", \"distributor\", \"title\"]\n",
    "test_train_movies_int.drop(columns_to_remove, axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_train_movies_ww.columns \n",
    "#Need to remove \"creative_type\", \"genre\", \"production_method\", \"released_ww\", \"released\", \"source\", \"distributor\", \"title\"\n",
    "columns_to_remove = [\"creative_type\", \"genre\", \"production_method\", \"released_ww\", \"released\", \"source\", \"distributor\", \"title\"]\n",
    "test_train_movies_ww.drop(columns_to_remove, axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We have to descritze percent profit... We are interested if we will have a negative percent profit or a positive percent profit \n",
    "categories = [\"negative\", \"positive\"]\n",
    "#Negative anything less than or equal to .0001 \n",
    "#positive anything greater than .0001 \n",
    "test_train_movies_dom[\"percent_profit\"] = pd.cut(test_train_movies_dom[\"dom_percent_profit\"], [-101, 0.0001, 999999], labels = categories)\n",
    "test_train_movies_dom_ex[\"percent_profit\"] = pd.cut(test_train_movies_dom[\"dom_percent_profit\"], [-101, 0.0001, 999999], labels = categories)\n",
    "test_train_movies_dom_cumulative[\"percent_profit\"] = pd.cut(test_train_movies_dom[\"dom_percent_profit\"], [-101, 0.0001, 999999], labels = categories)\n",
    "\n",
    "# test_train_movies_int[\"percent_profit\"] = pd.cut(test_train_movies_int[\"int_percent_profit\"], [-101, 0.0001, 999999], labels = categories)\n",
    "# test_train_movies_ww[\"percent_profit\"] = pd.cut(test_train_movies_ww[\"ww_percent_profit\"], [-101, 0.0001, 999999], labels = categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "percent_profit\n",
       "negative    204\n",
       "positive    764\n",
       "Name: percent_profit, dtype: int64"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the count of each category in our test_train_movies_dom df \n",
    "test_train_movies_dom_count = test_train_movies_dom.groupby(\"percent_profit\")[\"percent_profit\"].count()\n",
    "test_train_movies_dom_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "764\n",
      "204\n"
     ]
    }
   ],
   "source": [
    "# We are going to create a testing and training df that contains 386 negative, 386 positive percent_profits  \n",
    "#First we are going to subset the positive percent profits and the negative per+cent_profits \n",
    "positive = test_train_movies_dom[test_train_movies_dom[\"percent_profit\"] == \"positive\"]\n",
    "test_train_movies_dom = test_train_movies_dom[test_train_movies_dom[\"percent_profit\"] == \"negative\"]\n",
    "\n",
    "positive_ex = test_train_movies_dom_ex[test_train_movies_dom_ex[\"percent_profit\"] == \"positive\"]\n",
    "test_train_movies_dom_ex = test_train_movies_dom_ex[test_train_movies_dom_ex[\"percent_profit\"] == \"negative\"]\n",
    "\n",
    "positive_cumulative = test_train_movies_dom_cumulative[test_train_movies_dom_cumulative[\"percent_profit\"] == \"positive\"]\n",
    "test_train_movies_dom_cumulative = test_train_movies_dom_cumulative[test_train_movies_dom_cumulative[\"percent_profit\"] == \"negative\"]\n",
    "#Getting the length to make sure that we have 204 negative, 771 postive in our df \n",
    "print(len(positive))\n",
    "print(len(test_train_movies_dom))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "204\n"
     ]
    }
   ],
   "source": [
    "#Now getting a random sample of 198 entries in the positive df and setting the seed to 123\n",
    "#to reproduce the results \n",
    "positive = positive.sample(n = 204, random_state = 1201)\n",
    "positive_ex = positive_ex.sample(n = 204, random_state = 1201)\n",
    "positive_cumulative = positive_cumulative.sample(n = 204, random_state = 1201)\n",
    "#Getting the length to make sure that it worked \n",
    "print(len(positive))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "408"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Adding the positive movies back to the test_train_movies_pp df \n",
    "test_train_movies_dom = pd.concat([test_train_movies_dom, positive])\n",
    "test_train_movies_dom_ex = pd.concat([test_train_movies_dom_ex, positive_ex])\n",
    "test_train_movies_dom_cumulative = pd.concat([test_train_movies_dom_cumulative, positive_cumulative])\n",
    "#Getting the length to make sure that the 2 df were combined correctly and if it did we would have 408 movies in our df\n",
    "len(test_train_movies_dom)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Repeating the process for test_train_movies_int\n",
    "# #Getting the count of each category in our test_train_movies_int df \n",
    "# test_train_movies_int_count = test_train_movies_int.groupby(\"percent_profit\")[\"percent_profit\"].count()\n",
    "# test_train_movies_int_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # We are going to create a testing and training df that contains 420 negative, 420 positive percent_profits  \n",
    "# #First we are going to subset the positive percent profits and the negative per+cent_profits \n",
    "# positive = test_train_movies_int[test_train_movies_int[\"percent_profit\"] == \"positive\"]\n",
    "# test_train_movies_int = test_train_movies_int[test_train_movies_int[\"percent_profit\"] == \"negative\"]\n",
    "# #Getting the length to make sure that we have 229 negative, 739 postive in our df \n",
    "# print(len(positive))\n",
    "# print(len(test_train_movies_int))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Now getting a random sample of 420 entries in the positive df and setting the seed to 123\n",
    "# #to reproduce the results \n",
    "# positive = positive.sample(n = 229, random_state = 1201)\n",
    "# #Getting the length to make sure that it worked \n",
    "# print(len(positive))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Adding the positive movies back to the test_train_movies_pp df \n",
    "# test_train_movies_int = pd.concat([test_train_movies_int, positive])\n",
    "# #Getting the length to make sure that the 2 df were combined correctly and if it did we would have 458 movies in our df\n",
    "# len(test_train_movies_int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Repeating the process for test_train_movies_ww \n",
    "# #Getting the count of each category in our test_train_movies_ww df \n",
    "# test_train_movies_ww_count = test_train_movies_ww.groupby(\"percent_profit\")[\"percent_profit\"].count()\n",
    "# test_train_movies_ww_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We do not have sufficient information to predict a negative or positive percent profit for world wide movies \n",
    "# We need more movies with a negative world wide percent profit... Although this is extremely interesting and \n",
    "# suggests that movies that have a negative domestic profit should release the movie internationally to recover "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Changing the data type of month day and year to numeric\n",
    "# columns = [\"month\", \"day\"]\n",
    "# columns_ww = [\"month_ww\", \"day_ww\"]\n",
    "# test_train_movies_dom[columns] = test_train_movies_dom[columns].apply(pd.to_numeric)\n",
    "# test_train_movies_dom_ex[columns] = test_train_movies_dom_ex[columns].apply(pd.to_numeric)\n",
    "# test_train_movies_dom_cumulative[columns] = test_train_movies_dom_cumulative[columns].apply(pd.to_numeric)\n",
    "\n",
    "# # test_train_movies_ww[columns_ww] = test_train_movies_ww[columns_ww].apply(pd.to_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test_train_movies_dom.reset_index(inplace = True)\n",
    "# test_train_movies_int.reset_index(inplace = True)\n",
    "\n",
    "# test_train_movies_dom.drop(\"level_0\", axis = 1, inplace = True)\n",
    "# test_train_movies_int.drop(\"level_0\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #removing the label from the test_train_movies_dom and int df and saving it in a label df\n",
    "test_train_movies_dom_label = test_train_movies_dom[\"percent_profit\"]\n",
    "test_train_movies_dom.drop(\"percent_profit\", axis = 1, inplace = True)\n",
    "test_train_movies_dom_ex_label = test_train_movies_dom_ex[\"percent_profit\"]\n",
    "test_train_movies_dom_ex.drop(\"percent_profit\", axis = 1, inplace = True)\n",
    "test_train_movies_dom_cumulative_label = test_train_movies_dom_cumulative[\"percent_profit\"]\n",
    "test_train_movies_dom_cumulative.drop(\"percent_profit\", axis = 1, inplace = True)\n",
    "#repeating the process for int\n",
    "# test_train_movies_int_label = test_train_movies_int[\"percent_profit\"]\n",
    "# test_train_movies_int.drop(\"percent_profit\", axis = 1, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating 4 df: 1: the training df with label removed, 2: the testing df with label removed, 3: the training label, 4: testing label\n",
    "from sklearn.model_selection import train_test_split \n",
    "dom_train, dom_test, dom_train_label, dom_test_label = train_test_split(test_train_movies_dom, test_train_movies_dom_label, test_size = .3, random_state = 116)\n",
    "dom_ex_train, dom_ex_test, dom_ex_train_label, dom_ex_test_label = train_test_split(test_train_movies_dom_ex, test_train_movies_dom_ex_label, test_size = .3, random_state = 116)\n",
    "dom_cum_train, dom_cum_test, dom_cum_train_label, dom_cum_test_label = train_test_split(test_train_movies_dom_cumulative, test_train_movies_dom_cumulative_label, test_size = .3, random_state = 116)\n",
    "# int_train, int_test, int_train_label, int_test_label = train_test_split(test_train_movies_int, test_train_movies_int_label, test_size = .3, random_state = 123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'negative': 62, 'positive': 61})\n"
     ]
    }
   ],
   "source": [
    "#Getting a count of percent_profit in our test label  scores in out test label\n",
    "#We want to have roughly the same number of positive and negative movies in our test df\n",
    "print(Counter(dom_test_label)) \n",
    "# print(Counter(int_test_label))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using the standard scale to help preprocess and normalize the data \n",
    "# performing preprocessing part \n",
    "sc = StandardScaler()\n",
    "dom_train = sc.fit_transform(dom_train)\n",
    "dom_test = sc.transform(dom_test)\n",
    "\n",
    "dom_ex_train = sc.fit_transform(dom_ex_train)\n",
    "dom_ex_test = sc.transform(dom_ex_test)\n",
    "\n",
    "dom_cum_train = sc.fit_transform(dom_cum_train)\n",
    "dom_cum_test = sc.transform(dom_cum_test)\n",
    "# int_train = sc.fit_transform(int_train)\n",
    "# int_test = sc.transform(int_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Attempt 1: all variables\n",
    "clf = GaussianNB()\n",
    "clf.fit(dom_train, dom_train_label)\n",
    "test_predicted_dom_nb = clf.predict(dom_test)\n",
    "\n",
    "clf.fit(dom_ex_train, dom_ex_train_label)\n",
    "test_predicted_dom_ex_nb = clf.predict(dom_ex_test)\n",
    "\n",
    "clf.fit(dom_cum_train, dom_cum_train_label)\n",
    "test_predicted_dom_cum_nb = clf.predict(dom_cum_test)\n",
    "\n",
    "# clf.fit(int_train, int_train_label)\n",
    "# test_predicted_int_nb = clf.predict(int_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1, 'Dom Accuracy Score: 0.9024')"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 144x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Accuracy for dom \n",
    "dom_accuracy_nb = accuracy_score(dom_test_label, test_predicted_dom_nb, normalize = True)\n",
    "cm = confusion_matrix(dom_test_label, test_predicted_dom_nb)\n",
    "confusion_matrix_graph(cm, dom_accuracy_nb, \"Dom\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1, 'Dom Accuracy Score: 0.935')"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 144x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dom_ex_accuracy_nb = accuracy_score(dom_ex_test_label, test_predicted_dom_ex_nb, normalize = True)\n",
    "cm = confusion_matrix(dom_ex_test_label, test_predicted_dom_ex_nb)\n",
    "confusion_matrix_graph(cm, dom_ex_accuracy_nb, \"Dom\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1, 'Dom Accuracy Score: 0.9024')"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 144x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dom_cum_accuracy_nb = accuracy_score(dom_cum_test_label, test_predicted_dom_cum_nb, normalize = True)\n",
    "cm = confusion_matrix(dom_cum_test_label, test_predicted_dom_cum_nb)\n",
    "confusion_matrix_graph(cm, dom_cum_accuracy_nb, \"Dom\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
