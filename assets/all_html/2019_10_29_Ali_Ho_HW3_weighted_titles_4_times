{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Harry Potter Movie Review Analysis Weighted Title\n",
    "## By Ali Ho "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Packages and functions to be used\n",
    "import os \n",
    "\n",
    "#For regex \n",
    "import re\n",
    "\n",
    "#importing pandas \n",
    "import pandas as pd \n",
    "\n",
    "#To create a wordcloud/graphs\n",
    "import numpy as np \n",
    "from wordcloud import WordCloud, ImageColorGenerator\n",
    "from PIL import Image\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib import cm \n",
    "from colorspacious import cspace_converter\n",
    "import seaborn as sns\n",
    "#Allows for randomization, you can set a seed to have reproducable results\n",
    "import random\n",
    "\n",
    "#from PIL import Image\n",
    "from PIL import ImageFilter\n",
    "import numpy as np\n",
    "#Allows for several values for the same dictionary key \n",
    "import multidict\n",
    "\n",
    "#To get a count of words (used in the term_frequency)\n",
    "from collections import Counter \n",
    "\n",
    "#NLTK Packages \n",
    "#To process text using nltk (remove stopwords, lemmatize, tokenize...)\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer \n",
    "#Porter stemmer \n",
    "from nltk.stem.porter import PorterStemmer \n",
    "\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA\n",
    "\n",
    "#To perform machine learning in Naive Bayes I need to import the following packages \n",
    "from sklearn.model_selection import train_test_split \n",
    "# To model the Gaussian Navie Bayes classifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "#Multinomrial classifier for naive bayes\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "#SVMs \n",
    "from sklearn.svm import SVC\n",
    "# To calculate the accuracy score of the model\n",
    "from sklearn.metrics import accuracy_score\n",
    "#confusion matrix \n",
    "from sklearn.metrics import confusion_matrix, classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Functions I created that will be used in the document: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function 1: Creating a function to read in my files. This function will read in all the files in a specific directory. \n",
    "    #inputs: list of all of the file names to read \n",
    "    #        the path where the files are located \n",
    "    #outputs: a list, each element in the list is the content for each file that was read in. \n",
    "def reading_in_files(list_of_file_names, path):\n",
    "    empty_list = []\n",
    "    for file in list_of_file_names: \n",
    "        file = open(path+ \"\\\\\" + file)\n",
    "        data = file.read() \n",
    "        empty_list.append(data)\n",
    "        file.close()\n",
    "    return(empty_list)\n",
    "\n",
    "#Function 2: Creating a function to split the output from the just_compound_and_doc function. \n",
    "    #inputs: the list that is to be split,\n",
    "            #the item that we want to split on \n",
    "    #outputs: a list of split lists that when put into a df, will create columns based on where the list was split\n",
    "def list_split(list_to_be_split, item_to_split_on):\n",
    "    empty_list = []\n",
    "    for element in list_to_be_split: \n",
    "        empty_list.append(element.split(item_to_split_on))\n",
    "    return(empty_list)\n",
    "\n",
    "#Function 2: Vader (from NLTK) sentiment intensity score calculator. This function will calculate the polarity score \n",
    "#for each file. It will return a list of dictionaries. Each dictionary will contain the following: a compound score, \n",
    "#positive score, negative score, neutral score, and the opinion. \n",
    "    #inputs: a list of the content to be analyzed (this is what is returned in the reading_in_files function)\n",
    "    #Output: a list of dictionaries. Each dictionary will contain the following: a compound score, postive score, \n",
    "    #        negative score, neutral score, and the opinion \n",
    "def sentiment_intensity_score(sentiment_files): \n",
    "    sent_analyze = SIA()\n",
    "    results = []\n",
    "    for word in sentiment_files: \n",
    "        score = sent_analyze.polarity_scores(word)\n",
    "        score[\"sentiment_file\"] = word \n",
    "        results.append(score)\n",
    "    return(results)\n",
    "\n",
    "\n",
    "#Function 3: \n",
    "    #What the function does: to be creating a list of reviews, then joining the reviews together to a string and \n",
    "                             #getting a count for each word in the string\n",
    "    #Input: df and column \n",
    "    #Output: a dictionary with each word and the count of the word\n",
    "def creating_freq_list_from_df_to_dict(df, column):\n",
    "    reviews = df[column].tolist() \n",
    "    review_string = \" \".join(reviews)\n",
    "    review_string = review_string.split()\n",
    "    review_dict = Counter(review_string)\n",
    "    return review_dict\n",
    "\n",
    "#Function 3: \n",
    "    #What the function does: creates a word cloud that is in the shape of the mask passed in\n",
    "    #Input: the location where the mask image is saved, the frequency word dictionary, and the max # of words to include\n",
    "            #and the title of the plot \n",
    "def create_word_cloud_with_mask(path_of_mask_image, dictionary, \n",
    "                                max_num_words, title):\n",
    "        mask = np.array(Image.open(path_of_mask_image))\n",
    "        #creating the word cloud \n",
    "        word_cloud = WordCloud(background_color = \"white\", \n",
    "                               max_words = max_num_words, \n",
    "                              mask = mask, max_font_size = 125, \n",
    "                              random_state = 1006)\n",
    "        word_cloud.generate_from_frequencies(dictionary)\n",
    "        #creating the coloring for the word cloud \n",
    "        image_colors = ImageColorGenerator(mask)\n",
    "        plt.figure(figsize = [8,8])\n",
    "        plt.imshow(word_cloud.recolor(color_func = image_colors), \n",
    "                  interpolation = \"bilinear\")\n",
    "        plt.title(title)\n",
    "        sns.set_context(\"poster\")\n",
    "        plt.axis(\"off\")\n",
    "        return plt\n",
    "\n",
    "#Function 4: \n",
    "    #What the function does: creates a df with two columns: word and count of the top 12 words\n",
    "    #Input: the word frequency dictionary \n",
    "    #Output: a df with the top 12 words \n",
    "def word_freq_dict_to_df_top_words(dictionary, number_of_words_wanted): \n",
    "    df = pd.DataFrame.from_dict(dictionary,orient='index')\n",
    "    df.columns = [\"count\"]\n",
    "    df[\"word\"] = df.index\n",
    "    df.reset_index(drop = True, inplace = True)\n",
    "    df.sort_values(by=[\"count\"], ascending = False, inplace = True)\n",
    "    df = df[:number_of_words_wanted]\n",
    "    return(df)\n",
    "\n",
    "#Function 5: \n",
    "    #What the function does: creates a bar graph\n",
    "    #Input: the df and title of the graph \n",
    "    #Output: the bar graph\n",
    "def top_words_bar_plot(df, title): \n",
    "    with sns.plotting_context(\"talk\"):\n",
    "        graph = sns.barplot(y = \"count\", x = \"word\", data = df, \n",
    "                           palette = \"GnBu_d\")\n",
    "        plt.title(title)\n",
    "        plt.xlabel(\"Word\")\n",
    "        plt.ylabel(\"Count\")\n",
    "        plt.xticks(rotation = 90)\n",
    "        return plt\n",
    "\n",
    "#Function 6: \n",
    "    #What the function does: creates a df with two columns: word and count \n",
    "    #Input: the word frequency dictionary \n",
    "    #Output: a df\n",
    "def word_freq_dict_to_df_all_words(dictionary): \n",
    "    df = pd.DataFrame.from_dict(dictionary,orient='index')\n",
    "    df.columns = [\"count\"]\n",
    "    df[\"word\"] = df.index\n",
    "    df.reset_index(drop = True, inplace = True)\n",
    "    df.sort_values(by=[\"count\"], ascending = False, inplace = True)\n",
    "    return(df)\n",
    "    \n",
    "#Function 7: \n",
    "    #What the function does: Returns 2 statements: One with the total number of words and the other with the number \n",
    "                            #of unique words \n",
    "        #Input: the frequency count dictionary \n",
    "        #output: 2 statements \n",
    "def total_words_unique_words(dictionary): \n",
    "    eda_reviews_all_words = word_freq_dict_to_df_all_words(dictionary)\n",
    "    print(\"The total number of words is\", sum(eda_reviews_all_words[\"count\"]))\n",
    "    print(\"The total number of unique words is\", len(dictionary)) \n",
    "    \n",
    "#Function 8: \n",
    "    #What the function does: It duplicates the words in each review that are in all caps. \n",
    "    #Input: the review to be analyzed\n",
    "    #Output: a new review where the first words of the review are the duplicated words from all caps and \n",
    "            #then the original review follows\n",
    "def duplicate_all_cap_words(review): \n",
    "    capitalized_word = \"\"\n",
    "    for word in re.findall('([A-Z][A-Z]+\\w)', review):\n",
    "        if word in review: \n",
    "            capitalized_word = capitalized_word + \" \" + word\n",
    "    new_review = capitalized_word +\" \" + review\n",
    "    return new_review\n",
    "#Function 9: Weighted Title \n",
    "def duplicate_title(review): \n",
    "    new_review = review + \" \" + review +\" \" + review + \" \" + review\n",
    "    return(new_review)\n",
    "\n",
    "#Function 8: \n",
    "def get_count_of_all_cap_words(review): \n",
    "    count = 0 \n",
    "    for word in re.findall('([A-Z][A-Z]+\\w)', review):\n",
    "        if word in review: \n",
    "            count += 1\n",
    "    return count\n",
    "\n",
    "#Function 8: \n",
    "def get_count_of_all_words(review): \n",
    "    count = 0 \n",
    "    for word in re.findall('([A-z]+\\w)', review):\n",
    "        if word in review: \n",
    "            count += 1\n",
    "    return count\n",
    "\n",
    "#Function 9: \n",
    "    #What the function does: It removes all words that have less than 3 characters in it. \n",
    "    #Input: The string to have stopwords removed \n",
    "    #Ouptut: The string with the words with 2 or less characters removed \n",
    "def remove_words_less_than_3_characters(string):\n",
    "    new_string = \"\"\n",
    "    for word in re.findall('[A-z][A-z]+\\w', string): \n",
    "        new_string = new_string + \" \" + word\n",
    "    return new_string\n",
    "\n",
    "#Function 10: \n",
    "    #What the function does: Removes stopwords \n",
    "    #Input: a list of stopwords to be removed, the tokenized item that you want to remove stopwords in \n",
    "    #Output: the same item type back with the stopwords removed. \n",
    "def stop_word_removal(stopwords, item_that_you_want_to_remove_stopwords_in): \n",
    "    removed_stopwords = [] \n",
    "    for word in item_that_you_want_to_remove_stopwords_in: \n",
    "        if word in stopwords: \n",
    "            continue\n",
    "        if word not in stopwords: \n",
    "            removed_stopwords.append(word)\n",
    "    return(removed_stopwords)\n",
    "\n",
    "#Function11: \n",
    "    #What the function does: It takes the tokens from the df and joins it into a string, then replaces the \",\" with a space\n",
    "    #Input: the df and column to be changed \n",
    "    #Output: the data untokenized \n",
    "def getting_data_ready_for_freq(df, column): \n",
    "    df[column] = df[column].apply(\",\".join)\n",
    "    df[column] = df[column].str.replace(\",\", \" \")\n",
    "    return(df[column])\n",
    "\n",
    "#Function 12: \n",
    "    #What the function does: Takes the words in a column and uses the SentimentInstensityAnalyzer from nltk and \n",
    "                             #gets the sentiment score for every word in the column. If the word has a sentiment \n",
    "                             #score greater than or equal to .3 (max is 1) or less than or equal to -.3 (-1 is min)\n",
    "                             #the word is added to the keep_words list if not the word will be removed. \n",
    "def pos_neg_words(column):\n",
    "    sia = SIA()\n",
    "    keep_words = []\n",
    "\n",
    "    for word in column:\n",
    "        if (sia.polarity_scores(word)['compound']) >= 0.005:\n",
    "            keep_words.append(word)\n",
    "        elif (sia.polarity_scores(word)['compound']) <= -0.005:\n",
    "            keep_words.append(word)\n",
    "        elif word == \"not\": \n",
    "            keep_words.append(word)\n",
    "        else:\n",
    "            continue               \n",
    "    return keep_words\n",
    "\n",
    "#Function 13: \n",
    "    #What the function does: It uses the Porter stemmer to stem each word in the column \n",
    "    #Input: the item that you want to be stemmed \n",
    "    #Output: the same item type back with the words stemmed \n",
    "def stem_fun(item_that_you_want_to_be_stemmed):     \n",
    "    stemmer = PorterStemmer() \n",
    "    stemmed = [stemmer.stem(token) for token in item_that_you_want_to_be_stemmed]\n",
    "    return(stemmed)\n",
    "\n",
    "#Function 14: \n",
    "    #What the function does: It lemmatizes the data without using pos, meaning that it will not be as efficient\n",
    "    #Input: item to be lemmatized (the column)\n",
    "    #Output: the column lemmatized \n",
    "def lemma_func(item_to_lemmatize):\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    lemmatized_review = []\n",
    "    for token in item_to_lemmatize: \n",
    "        word = lemmatizer.lemmatize(token)\n",
    "        lemmatized_review.append(word)\n",
    "    return lemmatized_review\n",
    "\n",
    "#Function 15: \n",
    "    #What the function does: Creates bigrams from a tokenized column in a dataframe\n",
    "    #Input: the column that you want to create a ngram with \n",
    "    #Output: a list of ngrams\n",
    "def creating_ngrams(item_to_be_ngrammed, number_of_ngram):\n",
    "    # zip function helps generate ngrams\n",
    "    ngrams = zip(*[item_to_be_ngrammed[i:] for i in range(number_of_ngram)])\n",
    "    # Concatentate the tokens into ngrams and return\n",
    "    return [\"_\".join(ngram) for ngram in ngrams]\n",
    "\n",
    "#Function 16: \n",
    "    #What the function does: Create a bag of words from a column in a df... \n",
    "    #Input: df and column to be transformed \n",
    "    #Output: A list of dictionaries for each row in the df that contains the word as a key and the count as the value \n",
    "def bag_of_words(df, column_to_be_bagged):\n",
    "    bag_of_words = [] \n",
    "    from collections import Counter \n",
    "    for word in df[column_to_be_bagged]: \n",
    "        bag_of_words.append(Counter(word))\n",
    "    return bag_of_words\n",
    "\n",
    "#Function 17: \n",
    "    #What the function does: Takes the bag of words and makes it into a giant sparse matrix df, with 0s where nas are\n",
    "    #Input: bag of words \n",
    "    #Output: Giant df with the words as column names and counts as row entries \n",
    "def bow_to_df(bag_of_words): \n",
    "    df = pd.DataFrame.from_records(bag_of_words)\n",
    "    df = df.fillna(0).astype(int)\n",
    "    return(df)\n",
    "\n",
    "#Function 18: \n",
    "    #What the function does: It normalizing the df by getting the sum of each row and then dividing every entry by \n",
    "                             #the sum, resulting in the percentage make-up of each word\n",
    "    #Input: dataframe to be normalized \n",
    "    #Output: normalized dataframe \n",
    "def normalize_df(df):\n",
    "    names = df.columns \n",
    "    df[\"total\"] = df.sum(axis = 1)\n",
    "    for name in names: \n",
    "        df[name] = df[name]/df[\"total\"]\n",
    "    return(df)\n",
    "\n",
    "#Function 19: \n",
    "    #What the function does: Creates a confusion matrix graph \n",
    "    #Input: the confusion matrix, accuracy_label, and type of df \n",
    "    #Output: Confusion matrix graph\n",
    "def confusion_matrix_graph (cm, accuracy_label, type_of_df): \n",
    "    g = plt.figure(figsize=(8, 8))\n",
    "    g = sns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r', cbar = False);\n",
    "    g = plt.ylabel('Actual');\n",
    "    g = plt.xlabel('Predicted');\n",
    "    g = all_sample_title = type_of_df +' Accuracy Score: {0}'.format(round(accuracy_label, 4))\n",
    "    g = plt.title(all_sample_title, size = 12);\n",
    "    return(g)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "#First step is importing the documents\n",
    "#Getting a list of all the file names in my pos file \n",
    "positive = os.listdir(\"C:\\\\Users\\\\ho511\\\\Desktop\\\\IST_736\\\\homeworks\\\\week_3\\\\harry_potter_corpus\\\\pos\")\n",
    "positive_path = \"C:\\\\Users\\\\ho511\\\\Desktop\\\\IST_736\\\\homeworks\\\\week_3\\\\harry_potter_corpus\\\\pos\"\n",
    "\n",
    "#Getting a list of all the file names in my neg file \n",
    "negative = os.listdir(\"C:\\\\Users\\\\ho511\\\\Desktop\\\\IST_736\\\\homeworks\\\\week_3\\\\harry_potter_corpus\\\\neg\")\n",
    "negative_path = \"C:\\\\Users\\\\ho511\\\\Desktop\\\\IST_736\\\\homeworks\\\\week_3\\\\harry_potter_corpus\\\\neg\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### looking to see if I successfully got the file names "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['10_hp1_0.txt', '10_hp1_1.txt', '10_hp1_10.txt', '10_hp1_11.txt', '10_hp1_12.txt', '10_hp1_13.txt', '10_hp1_14.txt', '10_hp1_15.txt', '10_hp1_16.txt', '10_hp1_18.txt']\n"
     ]
    }
   ],
   "source": [
    "print(positive[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### looking at the first 10 items in the negative list to ensure I successfully extracted the file names "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1_hp1_1.txt', '1_hp1_10.txt', '1_hp1_11.txt', '1_hp1_12.txt', '1_hp1_13.txt', '1_hp1_14.txt', '1_hp1_15.txt', '1_hp1_16.txt', '1_hp1_17.txt', '1_hp1_18.txt']\n"
     ]
    }
   ],
   "source": [
    "print(negative[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using my reading_in_file function to read in all of the positive files "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_reviews = reading_in_files(positive, positive_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Confirming that the function worked by looking at the first review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"10** Harry Potter and the Sorcerer's Stone\\n== 10/10 - an unforgettable start to a fantastic film series and the career of the impeccable Emma Watson (and the other kids)\""
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_reviews[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The score is separated from the review by **, the title is separated from the review on ==. It is important to note, that if I split on the **, it is possible that the review will also be split. There is a high likelihood that the \"**\" characters are included in some of the review text as well. This will have to be addressed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_reviews = list_split(positive_reviews, \"**\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking to make sure that it worked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10',\n",
       " \" Harry Potter and the Sorcerer's Stone\\n== 10/10 - an unforgettable start to a fantastic film series and the career of the impeccable Emma Watson (and the other kids)\"]"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_reviews[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Changing the positive_review list to a data frame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df = pd.DataFrame(positive_reviews)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Looking at the first 5 rows "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>The Magic Comes To Life!\\n== Once upon a time...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>Pure Magic\\n== This movie is a delight for th...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n==...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n== 10/...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>Great Journey to the Magic World\\n== I watch ...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>9</td>\n",
       "      <td>I'm Sorry, Hermoine and Ron Who?\\n== The one ...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>488</td>\n",
       "      <td>9</td>\n",
       "      <td>A fantastic ending\\n== This movie was the per...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>489</td>\n",
       "      <td>9</td>\n",
       "      <td>LEGENDARY!\\n== Best cinematic universe out th...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>9</td>\n",
       "      <td>Good but ending changed for worse\\n== I was r...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>491</td>\n",
       "      <td>9</td>\n",
       "      <td>Great conclusion, of fantastic story\\n== i wa...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>492 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0                                                  1     2     3     4   \\\n",
       "0    10   The Magic Comes To Life!\\n== Once upon a time...  None  None  None   \n",
       "1    10   Pure Magic\\n== This movie is a delight for th...  None  None  None   \n",
       "2    10   Enchantment, Trapdoor to Imaginary World.\\n==...  None  None  None   \n",
       "3    10   Harry Potter and the Sorcerer's Stone\\n== 10/...  None  None  None   \n",
       "4    10   Great Journey to the Magic World\\n== I watch ...  None  None  None   \n",
       "..   ..                                                ...   ...   ...   ...   \n",
       "487   9   I'm Sorry, Hermoine and Ron Who?\\n== The one ...  None  None  None   \n",
       "488   9   A fantastic ending\\n== This movie was the per...  None  None  None   \n",
       "489   9   LEGENDARY!\\n== Best cinematic universe out th...  None  None  None   \n",
       "490   9   Good but ending changed for worse\\n== I was r...  None  None  None   \n",
       "491   9   Great conclusion, of fantastic story\\n== i wa...  None  None  None   \n",
       "\n",
       "       5     6     7     8     9   ...    18    19    20    21    22    23  \\\n",
       "0    None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "1    None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "2    None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "3    None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "4    None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "..    ...   ...   ...   ...   ...  ...   ...   ...   ...   ...   ...   ...   \n",
       "487  None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "488  None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "489  None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "490  None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "491  None  None  None  None  None  ...  None  None  None  None  None  None   \n",
       "\n",
       "       24    25    26    27  \n",
       "0    None  None  None  None  \n",
       "1    None  None  None  None  \n",
       "2    None  None  None  None  \n",
       "3    None  None  None  None  \n",
       "4    None  None  None  None  \n",
       "..    ...   ...   ...   ...  \n",
       "487  None  None  None  None  \n",
       "488  None  None  None  None  \n",
       "489  None  None  None  None  \n",
       "490  None  None  None  None  \n",
       "491  None  None  None  None  \n",
       "\n",
       "[492 rows x 28 columns]"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"review\"] = positive_df[positive_df.columns[1:]].apply(lambda row: \" \".join(row.dropna().astype(str)), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_title = positive_df[\"review\"].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\" Harry Potter and the Sorcerer's Stone\\n== 10/10 - an unforgettable start to a fantastic film series and the career of the impeccable Emma Watson (and the other kids)\""
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_title[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_title = list_split(positive_title, \"==\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df = pd.DataFrame(positive_title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n</td>\n",
       "      <td>Once upon a time (and not that long ago), in ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n</td>\n",
       "      <td>This movie is a delight for those of all ages...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n</td>\n",
       "      <td>This is not a film, it is a trap door to a li...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n</td>\n",
       "      <td>10/10 - an unforgettable start to a fantastic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n</td>\n",
       "      <td>I watch this movie again in 2019, because i t...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              0  \\\n",
       "0                    The Magic Comes To Life!\\n   \n",
       "1                                  Pure Magic\\n   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n   \n",
       "3       Harry Potter and the Sorcerer's Stone\\n   \n",
       "4            Great Journey to the Magic World\\n   \n",
       "\n",
       "                                                   1  \n",
       "0   Once upon a time (and not that long ago), in ...  \n",
       "1   This movie is a delight for those of all ages...  \n",
       "2   This is not a film, it is a trap door to a li...  \n",
       "3   10/10 - an unforgettable start to a fantastic...  \n",
       "4   I watch this movie again in 2019, because i t...  "
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df.columns = [\"title\", \"review\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### This shows that my worry about the reviews being split on ** was warranted. I need to joing the review text to one column.  Positive, is the the score was successfully extracted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"title\"] = positive_df[\"title\"].apply(lambda row: duplicate_title(row)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>Once upon a time (and not that long ago), in ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>This movie is a delight for those of all ages...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>This is not a film, it is a trap door to a li...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>10/10 - an unforgettable start to a fantastic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>I watch this movie again in 2019, because i t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...</td>\n",
       "      <td>The one that ends it all, after 8 films (7 bo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>488</td>\n",
       "      <td>A fantastic ending\\n  A fantastic ending\\n  A...</td>\n",
       "      <td>This movie was the perfect ending to the best...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>489</td>\n",
       "      <td>LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...</td>\n",
       "      <td>Best cinematic universe out there! Thank you ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>Good but ending changed for worse\\n  Good but...</td>\n",
       "      <td>I was really looking forward to this movie. T...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>491</td>\n",
       "      <td>Great conclusion, of fantastic story\\n  Great...</td>\n",
       "      <td>i was looking forward to seeing the last part...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>492 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 title  \\\n",
       "0     The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1     Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2     Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3     Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4     Great Journey to the Magic World\\n  Great Jou...   \n",
       "..                                                 ...   \n",
       "487   I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...   \n",
       "488   A fantastic ending\\n  A fantastic ending\\n  A...   \n",
       "489   LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...   \n",
       "490   Good but ending changed for worse\\n  Good but...   \n",
       "491   Great conclusion, of fantastic story\\n  Great...   \n",
       "\n",
       "                                                review  \n",
       "0     Once upon a time (and not that long ago), in ...  \n",
       "1     This movie is a delight for those of all ages...  \n",
       "2     This is not a film, it is a trap door to a li...  \n",
       "3     10/10 - an unforgettable start to a fantastic...  \n",
       "4     I watch this movie again in 2019, because i t...  \n",
       "..                                                 ...  \n",
       "487   The one that ends it all, after 8 films (7 bo...  \n",
       "488   This movie was the perfect ending to the best...  \n",
       "489   Best cinematic universe out there! Thank you ...  \n",
       "490   I was really looking forward to this movie. T...  \n",
       "491   i was looking forward to seeing the last part...  \n",
       "\n",
       "[492 rows x 2 columns]"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"review\"] = positive_df[positive_df.columns[:]].apply(lambda row: \" \".join(row.dropna().astype(str)), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df.drop(\"title\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Changing the column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...\n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...\n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...\n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...\n",
       "4   Great Journey to the Magic World\\n  Great Jou..."
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Repeating the process for the negative reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_reviews = reading_in_files(negative, negative_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1',\n",
       " ' What a Disappointment\\n== This movie is a disgrace to the series. The consistency issues in regards to the book and the first two films are readily apparent. Even to fans who have not read the books, the change in the geography of Hogwarts and how the characters dress are easily recognized as a break in continuity.The screenplay is chunked and leaves many important pieces to the overall storyline unexplained. Needless to say, the scenes do not flow very well and it leaves the non-reader confused in many places.This movie will unfortunately stick out like a sore thumb if the following films stick to the wonderfully developed world of Harry Potter.']"
      ]
     },
     "execution_count": 366,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_reviews[40]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_reviews = list_split(negative_reviews, \"**\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1',\n",
       " ' For Kids Only, Unfortunately\\n== ',\n",
       " '*SLIGHT SPOILERS',\n",
       " '* As an adult, it didn\\'t appeal to me in the least. The effects were poorly done, the giant plot leap in the middle (\"lots of strange things are happening-- hey, I know! it\\'s definitely because the creepy teacher guy wants the thing under the trap door under the three-headed dog\") threw me completely out of the story. It\\'s really a kids only movie, which disappointed me, because I\\'d been hearing such good things about it. And then at the end, Harry is sent back to his abusive adoptive parents. So much for changing one\\'s situation.And I know that they had to cut tremendous amounts of story in order to make it only 2 1/2 hours long (which was still way too long for this movie). After waiting in line outside the theater with tickets bought a week ahead of time, I must say I was truly disappointed. I\\'m even more saddened by the commercial success and the lunacy of die hard Harry Potter fans which will keep this sad and poorly-written movie in theaters much longer than it needs to be.Some books should remain books.']"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_reviews[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>For Kids Only, Unfortunately\\n==</td>\n",
       "      <td>*SLIGHT SPOILERS</td>\n",
       "      <td>* As an adult, it didn't appeal to me in the l...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n== ...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Hollywood's greatest shame.\\n== At first I li...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Great storytelling, no story\\n==</td>\n",
       "      <td>SPOILERS</td>\n",
       "      <td>Before I briefly state my views, I must confes...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  0                                                  1                 2   \\\n",
       "0  1                  For Kids Only, Unfortunately\\n==   *SLIGHT SPOILERS   \n",
       "1  1   An effects-laden excuse of an adaptation\\n== ...              None   \n",
       "2  1   Hollywood's greatest shame.\\n== At first I li...              None   \n",
       "3  1   Dismal, Contrived, Ripoff and just plain dumb...              None   \n",
       "4  1                  Great storytelling, no story\\n==           SPOILERS   \n",
       "\n",
       "                                                  3     4     5     6     7   \\\n",
       "0  * As an adult, it didn't appeal to me in the l...  None  None  None  None   \n",
       "1                                               None  None  None  None  None   \n",
       "2                                               None  None  None  None  None   \n",
       "3                                               None  None  None  None  None   \n",
       "4  Before I briefly state my views, I must confes...              None  None   \n",
       "\n",
       "     8     9   ...    16    17    18    19    20    21    22    23    24    25  \n",
       "0  None  None  ...  None  None  None  None  None  None  None  None  None  None  \n",
       "1  None  None  ...  None  None  None  None  None  None  None  None  None  None  \n",
       "2  None  None  ...  None  None  None  None  None  None  None  None  None  None  \n",
       "3  None  None  ...  None  None  None  None  None  None  None  None  None  None  \n",
       "4  None  None  ...  None  None  None  None  None  None  None  None  None  None  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df = pd.DataFrame(negative_reviews)\n",
    "negative_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(492, 26)"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"review\"] = negative_df[negative_df.columns[1:]].apply(lambda row: \" \".join(row.dropna().astype(str)), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_title = negative_df[\"review\"].tolist()\n",
    "negative_title = list_split(negative_title, \"==\")\n",
    "negative_df = pd.DataFrame(negative_title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n</td>\n",
       "      <td>*SLIGHT SPOILERS * As an adult, it didn't ap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n</td>\n",
       "      <td>Many viewers of this film applaud its faithfu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n</td>\n",
       "      <td>At first I liked the Harry Potter series, it ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb!\\n</td>\n",
       "      <td>terribly contrived and juvenile.  From the ou...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n</td>\n",
       "      <td>SPOILERS Before I briefly state my views, I ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0  \\\n",
       "0                     For Kids Only, Unfortunately\\n   \n",
       "1         An effects-laden excuse of an adaptation\\n   \n",
       "2                      Hollywood's greatest shame.\\n   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb!\\n   \n",
       "4                     Great storytelling, no story\\n   \n",
       "\n",
       "                                                   1  \n",
       "0    *SLIGHT SPOILERS * As an adult, it didn't ap...  \n",
       "1   Many viewers of this film applaud its faithfu...  \n",
       "2   At first I liked the Harry Potter series, it ...  \n",
       "3   terribly contrived and juvenile.  From the ou...  \n",
       "4    SPOILERS Before I briefly state my views, I ...  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df.columns = [\"title\", \"review\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"title\"] = negative_df[\"title\"].apply(lambda row: duplicate_title(row)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"review\"] = negative_df[negative_df.columns[:]].apply(lambda row: \" \".join(row.dropna().astype(str)), axis = 1)\n",
    "negative_df.drop(\"title\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>Deathly Disappointing\\n  Deathly Disappointin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>488</td>\n",
       "      <td>Nothing but disappointing.\\n  Nothing but dis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>489</td>\n",
       "      <td>A middling series ends on a low-point.\\n  A m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>OK but not I'm not Wowed!\\n  OK but not I'm n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>491</td>\n",
       "      <td>Its OK, not great.\\n  Its OK, not great.\\n  I...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>492 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                review\n",
       "0     For Kids Only, Unfortunately\\n  For Kids Only...\n",
       "1     An effects-laden excuse of an adaptation\\n  A...\n",
       "2     Hollywood's greatest shame.\\n  Hollywood's gr...\n",
       "3     Dismal, Contrived, Ripoff and just plain dumb...\n",
       "4     Great storytelling, no story\\n  Great storyte...\n",
       "..                                                 ...\n",
       "487   Deathly Disappointing\\n  Deathly Disappointin...\n",
       "488   Nothing but disappointing.\\n  Nothing but dis...\n",
       "489   A middling series ends on a low-point.\\n  A m...\n",
       "490   OK but not I'm not Wowed!\\n  OK but not I'm n...\n",
       "491   Its OK, not great.\\n  Its OK, not great.\\n  I...\n",
       "\n",
       "[492 rows x 1 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA for positive reviews and negative reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(492, 1)"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(492, 1)"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### *There is an equal number of positive and negative reviews in the data frames. Each data frame has 2 columns.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using my creating_freq_list_from_df_to_dict function "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### As part of the cleansing of the reviews, I am going to turn everything into lowercase, however, I do not want to lose the emphasis of words written in ALL CAPS. Therefore, I created a function, that will duplicate every word in the review that is in all caps. I think that it is fair, to count words in all caps as double."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df.apply(lambda row: duplicate_all_cap_words(row[\"review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>IAN  Enchantment, Trapdoor to Imaginary World...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Har...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>The beginning of a magical journey\\n  The be...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>VERY LOVES  Very Book Accurate and Enjoyable!...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It broug...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>JKR  One of my favorites\\n  One of my favorit...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  \n",
       "0    The Magic Comes To Life!\\n  The Magic Comes ...  \n",
       "1    Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...  \n",
       "2   IAN  Enchantment, Trapdoor to Imaginary World...  \n",
       "3    Harry Potter and the Sorcerer's Stone\\n  Har...  \n",
       "4    Great Journey to the Magic World\\n  Great Jo...  \n",
       "5    The beginning of a magical journey\\n  The be...  \n",
       "6   VERY LOVES  Very Book Accurate and Enjoyable!...  \n",
       "7    Great\\n  Great\\n  Great\\n  Great\\n  It broug...  \n",
       "8   JKR  One of my favorites\\n  One of my favorit...  \n",
       "9    Absolutely amazing\\n  Absolutely amazing\\n  ...  "
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"cap_count\"] = positive_df.apply(lambda row: get_count_of_all_cap_words(row[\"review\"]), axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>cap_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>IAN  Enchantment, Trapdoor to Imaginary World...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Har...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jo...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>The beginning of a magical journey\\n  The be...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>VERY LOVES  Very Book Accurate and Enjoyable!...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It broug...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>JKR  One of my favorites\\n  One of my favorit...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  cap_count  \n",
       "0    The Magic Comes To Life!\\n  The Magic Comes ...          0  \n",
       "1    Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...          0  \n",
       "2   IAN  Enchantment, Trapdoor to Imaginary World...          1  \n",
       "3    Harry Potter and the Sorcerer's Stone\\n  Har...          0  \n",
       "4    Great Journey to the Magic World\\n  Great Jo...          0  \n",
       "5    The beginning of a magical journey\\n  The be...          0  \n",
       "6   VERY LOVES  Very Book Accurate and Enjoyable!...          2  \n",
       "7    Great\\n  Great\\n  Great\\n  Great\\n  It broug...          0  \n",
       "8   JKR  One of my favorites\\n  One of my favorit...          1  \n",
       "9    Absolutely amazing\\n  Absolutely amazing\\n  ...          0  "
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"all_words_count\"] = positive_df.apply(lambda row: get_count_of_all_words(row[\"review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>cap_count</th>\n",
       "      <th>all_words_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes ...</td>\n",
       "      <td>0</td>\n",
       "      <td>969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...</td>\n",
       "      <td>0</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>IAN  Enchantment, Trapdoor to Imaginary World...</td>\n",
       "      <td>1</td>\n",
       "      <td>461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Har...</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jo...</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>The beginning of a magical journey\\n  The be...</td>\n",
       "      <td>0</td>\n",
       "      <td>597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>VERY LOVES  Very Book Accurate and Enjoyable!...</td>\n",
       "      <td>2</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It broug...</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>JKR  One of my favorites\\n  One of my favorit...</td>\n",
       "      <td>1</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  cap_count  \\\n",
       "0    The Magic Comes To Life!\\n  The Magic Comes ...          0   \n",
       "1    Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...          0   \n",
       "2   IAN  Enchantment, Trapdoor to Imaginary World...          1   \n",
       "3    Harry Potter and the Sorcerer's Stone\\n  Har...          0   \n",
       "4    Great Journey to the Magic World\\n  Great Jo...          0   \n",
       "5    The beginning of a magical journey\\n  The be...          0   \n",
       "6   VERY LOVES  Very Book Accurate and Enjoyable!...          2   \n",
       "7    Great\\n  Great\\n  Great\\n  Great\\n  It broug...          0   \n",
       "8   JKR  One of my favorites\\n  One of my favorit...          1   \n",
       "9    Absolutely amazing\\n  Absolutely amazing\\n  ...          0   \n",
       "\n",
       "   all_words_count  \n",
       "0              969  \n",
       "1              104  \n",
       "2              461  \n",
       "3               43  \n",
       "4               94  \n",
       "5              597  \n",
       "6              112  \n",
       "7               17  \n",
       "8               79  \n",
       "9               19  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"percent_cap\"] = positive_df[\"cap_count\"]/positive_df[\"all_words_count\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>cap_count</th>\n",
       "      <th>all_words_count</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes ...</td>\n",
       "      <td>0</td>\n",
       "      <td>969</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...</td>\n",
       "      <td>0</td>\n",
       "      <td>104</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>IAN  Enchantment, Trapdoor to Imaginary World...</td>\n",
       "      <td>1</td>\n",
       "      <td>461</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Har...</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jo...</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>The beginning of a magical journey\\n  The be...</td>\n",
       "      <td>0</td>\n",
       "      <td>597</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>VERY LOVES  Very Book Accurate and Enjoyable!...</td>\n",
       "      <td>2</td>\n",
       "      <td>112</td>\n",
       "      <td>0.017857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It broug...</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>JKR  One of my favorites\\n  One of my favorit...</td>\n",
       "      <td>1</td>\n",
       "      <td>79</td>\n",
       "      <td>0.012658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  cap_count  \\\n",
       "0    The Magic Comes To Life!\\n  The Magic Comes ...          0   \n",
       "1    Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...          0   \n",
       "2   IAN  Enchantment, Trapdoor to Imaginary World...          1   \n",
       "3    Harry Potter and the Sorcerer's Stone\\n  Har...          0   \n",
       "4    Great Journey to the Magic World\\n  Great Jo...          0   \n",
       "5    The beginning of a magical journey\\n  The be...          0   \n",
       "6   VERY LOVES  Very Book Accurate and Enjoyable!...          2   \n",
       "7    Great\\n  Great\\n  Great\\n  Great\\n  It broug...          0   \n",
       "8   JKR  One of my favorites\\n  One of my favorit...          1   \n",
       "9    Absolutely amazing\\n  Absolutely amazing\\n  ...          0   \n",
       "\n",
       "   all_words_count  percent_cap  \n",
       "0              969     0.000000  \n",
       "1              104     0.000000  \n",
       "2              461     0.002169  \n",
       "3               43     0.000000  \n",
       "4               94     0.000000  \n",
       "5              597     0.000000  \n",
       "6              112     0.017857  \n",
       "7               17     0.000000  \n",
       "8               79     0.012658  \n",
       "9               19     0.000000  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df.drop([\"cap_count\", \"all_words_count\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>IAN  Enchantment, Trapdoor to Imaginary World...</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Har...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jo...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0    The Magic Comes To Life!\\n  The Magic Comes ...     0.000000  \n",
       "1    Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pu...     0.000000  \n",
       "2   IAN  Enchantment, Trapdoor to Imaginary World...     0.002169  \n",
       "3    Harry Potter and the Sorcerer's Stone\\n  Har...     0.000000  \n",
       "4    Great Journey to the Magic World\\n  Great Jo...     0.000000  "
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>482</td>\n",
       "      <td>Review - Harry Potter and the Deathly Hallows...</td>\n",
       "      <td>Review - Harry Potter and the Deathly Hallow...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>483</td>\n",
       "      <td>It's Official... Epic Movie, Epic Saga and Ep...</td>\n",
       "      <td>It's Official... Epic Movie, Epic Saga and E...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>484</td>\n",
       "      <td>sadly disappointing\\n  sadly disappointing\\n ...</td>\n",
       "      <td>sadly disappointing\\n  sadly disappointing\\n...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>485</td>\n",
       "      <td>The end is good..\\n  The end is good..\\n  The...</td>\n",
       "      <td>The end is good..\\n  The end is good..\\n  Th...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>486</td>\n",
       "      <td>They finally got it right!\\n  They finally go...</td>\n",
       "      <td>THIS HP7 THE  They finally got it right!\\n  T...</td>\n",
       "      <td>0.007092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...</td>\n",
       "      <td>I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorr...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>488</td>\n",
       "      <td>A fantastic ending\\n  A fantastic ending\\n  A...</td>\n",
       "      <td>A fantastic ending\\n  A fantastic ending\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>489</td>\n",
       "      <td>LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...</td>\n",
       "      <td>LEGENDARY LEGENDARY LEGENDARY LEGENDARY  LEGE...</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>Good but ending changed for worse\\n  Good but...</td>\n",
       "      <td>Good but ending changed for worse\\n  Good bu...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>491</td>\n",
       "      <td>Great conclusion, of fantastic story\\n  Great...</td>\n",
       "      <td>AWESOME  Great conclusion, of fantastic story...</td>\n",
       "      <td>0.005618</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                review  \\\n",
       "482   Review - Harry Potter and the Deathly Hallows...   \n",
       "483   It's Official... Epic Movie, Epic Saga and Ep...   \n",
       "484   sadly disappointing\\n  sadly disappointing\\n ...   \n",
       "485   The end is good..\\n  The end is good..\\n  The...   \n",
       "486   They finally got it right!\\n  They finally go...   \n",
       "487   I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...   \n",
       "488   A fantastic ending\\n  A fantastic ending\\n  A...   \n",
       "489   LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...   \n",
       "490   Good but ending changed for worse\\n  Good but...   \n",
       "491   Great conclusion, of fantastic story\\n  Great...   \n",
       "\n",
       "                                            new_review  percent_cap  \n",
       "482    Review - Harry Potter and the Deathly Hallow...     0.000000  \n",
       "483    It's Official... Epic Movie, Epic Saga and E...     0.000000  \n",
       "484    sadly disappointing\\n  sadly disappointing\\n...     0.000000  \n",
       "485    The end is good..\\n  The end is good..\\n  Th...     0.000000  \n",
       "486   THIS HP7 THE  They finally got it right!\\n  T...     0.007092  \n",
       "487    I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorr...     0.000000  \n",
       "488    A fantastic ending\\n  A fantastic ending\\n  ...     0.000000  \n",
       "489   LEGENDARY LEGENDARY LEGENDARY LEGENDARY  LEGE...     0.333333  \n",
       "490    Good but ending changed for worse\\n  Good bu...     0.000000  \n",
       "491   AWESOME  Great conclusion, of fantastic story...     0.005618  "
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.tail(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### repeating the process for the negative reviews df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df.apply(lambda row: duplicate_all_cap_words(row[\"review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"cap_count\"] = negative_df.apply(lambda row: get_count_of_all_cap_words(row[\"review\"]), axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"all_words_count\"] = negative_df.apply(lambda row: get_count_of_all_words(row[\"review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>cap_count</th>\n",
       "      <th>all_words_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>SLIGHT SPOILERS  For Kids Only, Unfortunately...</td>\n",
       "      <td>2</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...</td>\n",
       "      <td>6</td>\n",
       "      <td>598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>JRR  Dismal, Contrived, Ripoff and just plain...</td>\n",
       "      <td>1</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>SPOILERS LOT  Great storytelling, no story\\n ...</td>\n",
       "      <td>2</td>\n",
       "      <td>612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's ...</td>\n",
       "      <td>0</td>\n",
       "      <td>384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>AOL  My Revenge for the Non Fans!!\\n  My Reve...</td>\n",
       "      <td>1</td>\n",
       "      <td>367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible ...</td>\n",
       "      <td>0</td>\n",
       "      <td>330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  cap_count  \\\n",
       "0   SLIGHT SPOILERS  For Kids Only, Unfortunately...          2   \n",
       "1    An effects-laden excuse of an adaptation\\n  ...          0   \n",
       "2   WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...          6   \n",
       "3   JRR  Dismal, Contrived, Ripoff and just plain...          1   \n",
       "4   SPOILERS LOT  Great storytelling, no story\\n ...          2   \n",
       "5    It's bland like drinking warm water\\n  It's ...          0   \n",
       "6    Harry Potter and the Chamber of Commerce\\n  ...          0   \n",
       "7    its not worth the piece of paper the ticket ...          0   \n",
       "8   AOL  My Revenge for the Non Fans!!\\n  My Reve...          1   \n",
       "9    Terrible Terrible film\\n  Terrible Terrible ...          0   \n",
       "\n",
       "   all_words_count  \n",
       "0              197  \n",
       "1              191  \n",
       "2              598  \n",
       "3              189  \n",
       "4              612  \n",
       "5              384  \n",
       "6              326  \n",
       "7              159  \n",
       "8              367  \n",
       "9              330  "
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"percent_cap\"] = negative_df[\"cap_count\"]/negative_df[\"all_words_count\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>cap_count</th>\n",
       "      <th>all_words_count</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>SLIGHT SPOILERS  For Kids Only, Unfortunately...</td>\n",
       "      <td>2</td>\n",
       "      <td>197</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>191</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...</td>\n",
       "      <td>6</td>\n",
       "      <td>598</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>JRR  Dismal, Contrived, Ripoff and just plain...</td>\n",
       "      <td>1</td>\n",
       "      <td>189</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>SPOILERS LOT  Great storytelling, no story\\n ...</td>\n",
       "      <td>2</td>\n",
       "      <td>612</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's ...</td>\n",
       "      <td>0</td>\n",
       "      <td>384</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  ...</td>\n",
       "      <td>0</td>\n",
       "      <td>326</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0</td>\n",
       "      <td>159</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>AOL  My Revenge for the Non Fans!!\\n  My Reve...</td>\n",
       "      <td>1</td>\n",
       "      <td>367</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible ...</td>\n",
       "      <td>0</td>\n",
       "      <td>330</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  cap_count  \\\n",
       "0   SLIGHT SPOILERS  For Kids Only, Unfortunately...          2   \n",
       "1    An effects-laden excuse of an adaptation\\n  ...          0   \n",
       "2   WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...          6   \n",
       "3   JRR  Dismal, Contrived, Ripoff and just plain...          1   \n",
       "4   SPOILERS LOT  Great storytelling, no story\\n ...          2   \n",
       "5    It's bland like drinking warm water\\n  It's ...          0   \n",
       "6    Harry Potter and the Chamber of Commerce\\n  ...          0   \n",
       "7    its not worth the piece of paper the ticket ...          0   \n",
       "8   AOL  My Revenge for the Non Fans!!\\n  My Reve...          1   \n",
       "9    Terrible Terrible film\\n  Terrible Terrible ...          0   \n",
       "\n",
       "   all_words_count  percent_cap  \n",
       "0              197     0.010152  \n",
       "1              191     0.000000  \n",
       "2              598     0.010033  \n",
       "3              189     0.005291  \n",
       "4              612     0.003268  \n",
       "5              384     0.000000  \n",
       "6              326     0.000000  \n",
       "7              159     0.000000  \n",
       "8              367     0.002725  \n",
       "9              330     0.000000  "
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df.drop([\"cap_count\", \"all_words_count\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>SLIGHT SPOILERS  For Kids Only, Unfortunately...</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>JRR  Dismal, Contrived, Ripoff and just plain...</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>SPOILERS LOT  Great storytelling, no story\\n ...</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>AOL  My Revenge for the Non Fans!!\\n  My Reve...</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   SLIGHT SPOILERS  For Kids Only, Unfortunately...     0.010152  \n",
       "1    An effects-laden excuse of an adaptation\\n  ...     0.000000  \n",
       "2   WOW HAD RINGWRAITHS ENTZ SHELOB YEAH  Hollywo...     0.010033  \n",
       "3   JRR  Dismal, Contrived, Ripoff and just plain...     0.005291  \n",
       "4   SPOILERS LOT  Great storytelling, no story\\n ...     0.003268  \n",
       "5    It's bland like drinking warm water\\n  It's ...     0.000000  \n",
       "6    Harry Potter and the Chamber of Commerce\\n  ...     0.000000  \n",
       "7    its not worth the piece of paper the ticket ...     0.000000  \n",
       "8   AOL  My Revenge for the Non Fans!!\\n  My Reve...     0.002725  \n",
       "9    Terrible Terrible film\\n  Terrible Terrible ...     0.000000  "
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### You can see that some of the reviews contain words in all caps. Unfortunately not all of the words give insight to the sentiment of the review. For example, in review 508 the reviewer capitalized the works THIS HP7 and THE, none of which give added insight into the words. It might be interesting to get a count of the number of words that were in all caps for each review. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Making everything lowercase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes to life!\\n  the magic comes ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic\\n  pure magic\\n  pure magic\\n  pu...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian  enchantment, trapdoor to imaginary world...</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer's stone\\n  har...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey to the magic world\\n  great jo...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>the beginning of a magical journey\\n  the be...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>very loves  very book accurate and enjoyable!...</td>\n",
       "      <td>0.017857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>great\\n  great\\n  great\\n  great\\n  it broug...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>jkr  one of my favorites\\n  one of my favorit...</td>\n",
       "      <td>0.012658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>absolutely amazing\\n  absolutely amazing\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0    the magic comes to life!\\n  the magic comes ...     0.000000  \n",
       "1    pure magic\\n  pure magic\\n  pure magic\\n  pu...     0.000000  \n",
       "2   ian  enchantment, trapdoor to imaginary world...     0.002169  \n",
       "3    harry potter and the sorcerer's stone\\n  har...     0.000000  \n",
       "4    great journey to the magic world\\n  great jo...     0.000000  \n",
       "5    the beginning of a magical journey\\n  the be...     0.000000  \n",
       "6   very loves  very book accurate and enjoyable!...     0.017857  \n",
       "7    great\\n  great\\n  great\\n  great\\n  it broug...     0.000000  \n",
       "8   jkr  one of my favorites\\n  one of my favorit...     0.012658  \n",
       "9    absolutely amazing\\n  absolutely amazing\\n  ...     0.000000  "
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers  for kids only, unfortunately...</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>an effects-laden excuse of an adaptation\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah  hollywo...</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr  dismal, contrived, ripoff and just plain...</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot  great storytelling, no story\\n ...</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>it's bland like drinking warm water\\n  it's ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>harry potter and the chamber of commerce\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>aol  my revenge for the non fans!!\\n  my reve...</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>terrible terrible film\\n  terrible terrible ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   slight spoilers  for kids only, unfortunately...     0.010152  \n",
       "1    an effects-laden excuse of an adaptation\\n  ...     0.000000  \n",
       "2   wow had ringwraiths entz shelob yeah  hollywo...     0.010033  \n",
       "3   jrr  dismal, contrived, ripoff and just plain...     0.005291  \n",
       "4   spoilers lot  great storytelling, no story\\n ...     0.003268  \n",
       "5    it's bland like drinking warm water\\n  it's ...     0.000000  \n",
       "6    harry potter and the chamber of commerce\\n  ...     0.000000  \n",
       "7    its not worth the piece of paper the ticket ...     0.000000  \n",
       "8   aol  my revenge for the non fans!!\\n  my reve...     0.002725  \n",
       "9    terrible terrible film\\n  terrible terrible ...     0.000000  "
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now, I need to clean the reviews and remove any non-alpha characters, and the new line character, and space character. First, I want to change anything that ends in n't to the word and then not "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"(n't)\", \"not\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"('m)\", \" am\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 'd can mean had or would... I am going to change it to would beause I feel that is most likely the the correct use for reviews \n",
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"('d)\", \" would\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"('ll)\", \" will\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I am removing 's, I do not feel like it will be useful for the review as it shows plural or possessive \n",
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"('s)\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I want to keep the word not "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes to life!\\n  the magic comes ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic\\n  pure magic\\n  pure magic\\n  pu...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian  enchantment, trapdoor to imaginary world...</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone\\n  harry...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey to the magic world\\n  great jo...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0    the magic comes to life!\\n  the magic comes ...     0.000000  \n",
       "1    pure magic\\n  pure magic\\n  pure magic\\n  pu...     0.000000  \n",
       "2   ian  enchantment, trapdoor to imaginary world...     0.002169  \n",
       "3    harry potter and the sorcerer stone\\n  harry...     0.000000  \n",
       "4    great journey to the magic world\\n  great jo...     0.000000  "
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"(n't)\", \"not\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"('m)\", \" am\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"('d)\", \" would\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"('ll)\", \" will\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"('s)\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers  for kids only, unfortunately...</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>an effects-laden excuse of an adaptation\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah  hollywo...</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr  dismal, contrived, ripoff and just plain...</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot  great storytelling, no story\\n ...</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>it bland like drinking warm water\\n  it blan...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>harry potter and the chamber of commerce\\n  ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>aol  my revenge for the non fans!!\\n  my reve...</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>terrible terrible film\\n  terrible terrible ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   slight spoilers  for kids only, unfortunately...     0.010152  \n",
       "1    an effects-laden excuse of an adaptation\\n  ...     0.000000  \n",
       "2   wow had ringwraiths entz shelob yeah  hollywo...     0.010033  \n",
       "3   jrr  dismal, contrived, ripoff and just plain...     0.005291  \n",
       "4   spoilers lot  great storytelling, no story\\n ...     0.003268  \n",
       "5    it bland like drinking warm water\\n  it blan...     0.000000  \n",
       "6    harry potter and the chamber of commerce\\n  ...     0.000000  \n",
       "7    its not worth the piece of paper the ticket ...     0.000000  \n",
       "8   aol  my revenge for the non fans!!\\n  my reve...     0.002725  \n",
       "9    terrible terrible film\\n  terrible terrible ...     0.000000  "
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Time to remove any non-alpha characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace(r\"[^\\w^\\s]\", \" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"new_review\"] = positive_df[\"new_review\"].str.replace('\\n',\" \") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes to life    the magic comes t...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic   pure magic   pure magic   pure ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian  enchantment  trapdoor to imaginary world...</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone   harry ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey to the magic world   great jou...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...</td>\n",
       "      <td>i am sorry  hermoine and ron who    i am sor...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>488</td>\n",
       "      <td>A fantastic ending\\n  A fantastic ending\\n  A...</td>\n",
       "      <td>a fantastic ending   a fantastic ending   a ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>489</td>\n",
       "      <td>LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...</td>\n",
       "      <td>legendary legendary legendary legendary  lege...</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>Good but ending changed for worse\\n  Good but...</td>\n",
       "      <td>good but ending changed for worse   good but...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>491</td>\n",
       "      <td>Great conclusion, of fantastic story\\n  Great...</td>\n",
       "      <td>awesome  great conclusion  of fantastic story...</td>\n",
       "      <td>0.005618</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>492 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                review  \\\n",
       "0     The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1     Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2     Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3     Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4     Great Journey to the Magic World\\n  Great Jou...   \n",
       "..                                                 ...   \n",
       "487   I'm Sorry, Hermoine and Ron Who?\\n  I'm Sorry...   \n",
       "488   A fantastic ending\\n  A fantastic ending\\n  A...   \n",
       "489   LEGENDARY!\\n  LEGENDARY!\\n  LEGENDARY!\\n  LEG...   \n",
       "490   Good but ending changed for worse\\n  Good but...   \n",
       "491   Great conclusion, of fantastic story\\n  Great...   \n",
       "\n",
       "                                            new_review  percent_cap  \n",
       "0      the magic comes to life    the magic comes t...     0.000000  \n",
       "1      pure magic   pure magic   pure magic   pure ...     0.000000  \n",
       "2     ian  enchantment  trapdoor to imaginary world...     0.002169  \n",
       "3      harry potter and the sorcerer stone   harry ...     0.000000  \n",
       "4      great journey to the magic world   great jou...     0.000000  \n",
       "..                                                 ...          ...  \n",
       "487    i am sorry  hermoine and ron who    i am sor...     0.000000  \n",
       "488    a fantastic ending   a fantastic ending   a ...     0.000000  \n",
       "489   legendary legendary legendary legendary  lege...     0.333333  \n",
       "490    good but ending changed for worse   good but...     0.000000  \n",
       "491   awesome  great conclusion  of fantastic story...     0.005618  \n",
       "\n",
       "[492 rows x 3 columns]"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace(r\"[^\\w^\\s]\", \" \")\n",
    "negative_df[\"new_review\"] = negative_df[\"new_review\"].str.replace('\\n',\" \") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers  for kids only  unfortunately...</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>an effects laden excuse of an adaptation   a...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah  hollywo...</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr  dismal  contrived  ripoff and just plain...</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot  great storytelling  no story   ...</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>it bland like drinking warm water   it bland...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>harry potter and the chamber of commerce   h...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece of paper the ticket ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>aol  my revenge for the non fans     my reven...</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>terrible terrible film   terrible terrible f...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   slight spoilers  for kids only  unfortunately...     0.010152  \n",
       "1    an effects laden excuse of an adaptation   a...     0.000000  \n",
       "2   wow had ringwraiths entz shelob yeah  hollywo...     0.010033  \n",
       "3   jrr  dismal  contrived  ripoff and just plain...     0.005291  \n",
       "4   spoilers lot  great storytelling  no story   ...     0.003268  \n",
       "5    it bland like drinking warm water   it bland...     0.000000  \n",
       "6    harry potter and the chamber of commerce   h...     0.000000  \n",
       "7    its not worth the piece of paper the ticket ...     0.000000  \n",
       "8   aol  my revenge for the non fans     my reven...     0.002725  \n",
       "9    terrible terrible film   terrible terrible f...     0.000000  "
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Removing any word that contains less than 3 characters \n",
    "positive_df[\"new_review\"] = positive_df.apply(lambda row: remove_words_less_than_3_characters(row[\"new_review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"new_review\"] = negative_df.apply(lambda row: remove_words_less_than_3_characters(row[\"new_review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>The beginning of a magical journey\\n  The beg...</td>\n",
       "      <td>the beginning magical journey the beginning m...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Very Book Accurate and Enjoyable!!\\n  Very Bo...</td>\n",
       "      <td>very loves very book accurate and enjoyable v...</td>\n",
       "      <td>0.017857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Great\\n  Great\\n  Great\\n  Great\\n  It brough...</td>\n",
       "      <td>great great great great brought out almost ev...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>One of my favorites\\n  One of my favorites\\n ...</td>\n",
       "      <td>jkr one favorites one favorites one favorites...</td>\n",
       "      <td>0.012658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Absolutely amazing\\n  Absolutely amazing\\n  A...</td>\n",
       "      <td>absolutely amazing absolutely amazing absolut...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "5   The beginning of a magical journey\\n  The beg...   \n",
       "6   Very Book Accurate and Enjoyable!!\\n  Very Bo...   \n",
       "7   Great\\n  Great\\n  Great\\n  Great\\n  It brough...   \n",
       "8   One of my favorites\\n  One of my favorites\\n ...   \n",
       "9   Absolutely amazing\\n  Absolutely amazing\\n  A...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   the magic comes life the magic comes life the...     0.000000  \n",
       "1   pure magic pure magic pure magic pure magic t...     0.000000  \n",
       "2   ian enchantment trapdoor imaginary world ench...     0.002169  \n",
       "3   harry potter and the sorcerer stone harry pot...     0.000000  \n",
       "4   great journey the magic world great journey t...     0.000000  \n",
       "5   the beginning magical journey the beginning m...     0.000000  \n",
       "6   very loves very book accurate and enjoyable v...     0.017857  \n",
       "7   great great great great brought out almost ev...     0.000000  \n",
       "8   jkr one favorites one favorites one favorites...     0.012658  \n",
       "9   absolutely amazing absolutely amazing absolut...     0.000000  "
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers for kids only unfortunately f...</td>\n",
       "      <td>0.010152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>effects laden excuse adaptation effects laden...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah hollywoo...</td>\n",
       "      <td>0.010033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr dismal contrived ripoff and just plain du...</td>\n",
       "      <td>0.005291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot great storytelling story great s...</td>\n",
       "      <td>0.003268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>It's bland like drinking warm water\\n  It's b...</td>\n",
       "      <td>bland like drinking warm water bland like dri...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Harry Potter and the Chamber of Commerce\\n  H...</td>\n",
       "      <td>harry potter and the chamber commerce harry p...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>its not worth the piece of paper the ticket w...</td>\n",
       "      <td>its not worth the piece paper the ticket was ...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>My Revenge for the Non Fans!!\\n  My Revenge f...</td>\n",
       "      <td>aol revenge for the non fans revenge for the ...</td>\n",
       "      <td>0.002725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Terrible Terrible film\\n  Terrible Terrible f...</td>\n",
       "      <td>terrible terrible film terrible terrible film...</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "5   It's bland like drinking warm water\\n  It's b...   \n",
       "6   Harry Potter and the Chamber of Commerce\\n  H...   \n",
       "7   its not worth the piece of paper the ticket w...   \n",
       "8   My Revenge for the Non Fans!!\\n  My Revenge f...   \n",
       "9   Terrible Terrible film\\n  Terrible Terrible f...   \n",
       "\n",
       "                                          new_review  percent_cap  \n",
       "0   slight spoilers for kids only unfortunately f...     0.010152  \n",
       "1   effects laden excuse adaptation effects laden...     0.000000  \n",
       "2   wow had ringwraiths entz shelob yeah hollywoo...     0.010033  \n",
       "3   jrr dismal contrived ripoff and just plain du...     0.005291  \n",
       "4   spoilers lot great storytelling story great s...     0.003268  \n",
       "5   bland like drinking warm water bland like dri...     0.000000  \n",
       "6   harry potter and the chamber commerce harry p...     0.000000  \n",
       "7   its not worth the piece paper the ticket was ...     0.000000  \n",
       "8   aol revenge for the non fans revenge for the ...     0.002725  \n",
       "9   terrible terrible film terrible terrible film...     0.000000  "
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Need to tokenize the reviews "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "positive_df[\"review_tokenize\"] = positive_df.apply(lambda row: nltk.word_tokenize(row[\"new_review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"review_tokenize\"] = negative_df.apply(lambda row: nltk.word_tokenize(row[\"new_review\"]), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[the, magic, comes, life, the, magic, comes, l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[harry, potter, and, the, sorcerer, stone, har...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[great, journey, the, magic, world, great, jou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   the magic comes life the magic comes life the...     0.000000   \n",
       "1   pure magic pure magic pure magic pure magic t...     0.000000   \n",
       "2   ian enchantment trapdoor imaginary world ench...     0.002169   \n",
       "3   harry potter and the sorcerer stone harry pot...     0.000000   \n",
       "4   great journey the magic world great journey t...     0.000000   \n",
       "\n",
       "                                     review_tokenize  \n",
       "0  [the, magic, comes, life, the, magic, comes, l...  \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...  \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...  \n",
       "3  [harry, potter, and, the, sorcerer, stone, har...  \n",
       "4  [great, journey, the, magic, world, great, jou...  "
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers for kids only unfortunately f...</td>\n",
       "      <td>0.010152</td>\n",
       "      <td>[slight, spoilers, for, kids, only, unfortunat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>effects laden excuse adaptation effects laden...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[effects, laden, excuse, adaptation, effects, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah hollywoo...</td>\n",
       "      <td>0.010033</td>\n",
       "      <td>[wow, had, ringwraiths, entz, shelob, yeah, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr dismal contrived ripoff and just plain du...</td>\n",
       "      <td>0.005291</td>\n",
       "      <td>[jrr, dismal, contrived, ripoff, and, just, pl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot great storytelling story great s...</td>\n",
       "      <td>0.003268</td>\n",
       "      <td>[spoilers, lot, great, storytelling, story, gr...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   slight spoilers for kids only unfortunately f...     0.010152   \n",
       "1   effects laden excuse adaptation effects laden...     0.000000   \n",
       "2   wow had ringwraiths entz shelob yeah hollywoo...     0.010033   \n",
       "3   jrr dismal contrived ripoff and just plain du...     0.005291   \n",
       "4   spoilers lot great storytelling story great s...     0.003268   \n",
       "\n",
       "                                     review_tokenize  \n",
       "0  [slight, spoilers, for, kids, only, unfortunat...  \n",
       "1  [effects, laden, excuse, adaptation, effects, ...  \n",
       "2  [wow, had, ringwraiths, entz, shelob, yeah, ho...  \n",
       "3  [jrr, dismal, contrived, ripoff, and, just, pl...  \n",
       "4  [spoilers, lot, great, storytelling, story, gr...  "
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Writing the pandas df to a csv file to save what I have done. \n",
    "positive_df.to_csv(r'positive_hp_reviews.csv')\n",
    "negative_df.to_csv(r'negative_hp_reviews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, I am going to remove a selected list of stopwords from the tokenized review\n",
    "stopwords = [\"the\", \"and\", \"was\", \"that\", \"this\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Removing stopwords in the tokenized review \n",
    "positive_df[\"stopwords_removed\"] = positive_df[\"review_tokenize\"].apply(lambda row: stop_word_removal(stopwords, row))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[the, magic, comes, life, the, magic, comes, l...</td>\n",
       "      <td>[magic, comes, life, magic, comes, life, magic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[harry, potter, and, the, sorcerer, stone, har...</td>\n",
       "      <td>[harry, potter, sorcerer, stone, harry, potter...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[great, journey, the, magic, world, great, jou...</td>\n",
       "      <td>[great, journey, magic, world, great, journey,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   the magic comes life the magic comes life the...     0.000000   \n",
       "1   pure magic pure magic pure magic pure magic t...     0.000000   \n",
       "2   ian enchantment trapdoor imaginary world ench...     0.002169   \n",
       "3   harry potter and the sorcerer stone harry pot...     0.000000   \n",
       "4   great journey the magic world great journey t...     0.000000   \n",
       "\n",
       "                                     review_tokenize  \\\n",
       "0  [the, magic, comes, life, the, magic, comes, l...   \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...   \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...   \n",
       "3  [harry, potter, and, the, sorcerer, stone, har...   \n",
       "4  [great, journey, the, magic, world, great, jou...   \n",
       "\n",
       "                                   stopwords_removed  \n",
       "0  [magic, comes, life, magic, comes, life, magic...  \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...  \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...  \n",
       "3  [harry, potter, sorcerer, stone, harry, potter...  \n",
       "4  [great, journey, magic, world, great, journey,...  "
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_df[\"stopwords_removed\"] = negative_df[\"review_tokenize\"].apply(lambda row: stop_word_removal(stopwords, row))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers for kids only unfortunately f...</td>\n",
       "      <td>0.010152</td>\n",
       "      <td>[slight, spoilers, for, kids, only, unfortunat...</td>\n",
       "      <td>[slight, spoilers, for, kids, only, unfortunat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>effects laden excuse adaptation effects laden...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[effects, laden, excuse, adaptation, effects, ...</td>\n",
       "      <td>[effects, laden, excuse, adaptation, effects, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah hollywoo...</td>\n",
       "      <td>0.010033</td>\n",
       "      <td>[wow, had, ringwraiths, entz, shelob, yeah, ho...</td>\n",
       "      <td>[wow, had, ringwraiths, entz, shelob, yeah, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr dismal contrived ripoff and just plain du...</td>\n",
       "      <td>0.005291</td>\n",
       "      <td>[jrr, dismal, contrived, ripoff, and, just, pl...</td>\n",
       "      <td>[jrr, dismal, contrived, ripoff, just, plain, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot great storytelling story great s...</td>\n",
       "      <td>0.003268</td>\n",
       "      <td>[spoilers, lot, great, storytelling, story, gr...</td>\n",
       "      <td>[spoilers, lot, great, storytelling, story, gr...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   slight spoilers for kids only unfortunately f...     0.010152   \n",
       "1   effects laden excuse adaptation effects laden...     0.000000   \n",
       "2   wow had ringwraiths entz shelob yeah hollywoo...     0.010033   \n",
       "3   jrr dismal contrived ripoff and just plain du...     0.005291   \n",
       "4   spoilers lot great storytelling story great s...     0.003268   \n",
       "\n",
       "                                     review_tokenize  \\\n",
       "0  [slight, spoilers, for, kids, only, unfortunat...   \n",
       "1  [effects, laden, excuse, adaptation, effects, ...   \n",
       "2  [wow, had, ringwraiths, entz, shelob, yeah, ho...   \n",
       "3  [jrr, dismal, contrived, ripoff, and, just, pl...   \n",
       "4  [spoilers, lot, great, storytelling, story, gr...   \n",
       "\n",
       "                                   stopwords_removed  \n",
       "0  [slight, spoilers, for, kids, only, unfortunat...  \n",
       "1  [effects, laden, excuse, adaptation, effects, ...  \n",
       "2  [wow, had, ringwraiths, entz, shelob, yeah, ho...  \n",
       "3  [jrr, dismal, contrived, ripoff, just, plain, ...  \n",
       "4  [spoilers, lot, great, storytelling, story, gr...  "
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Writing the pandas df to a csv file to save what I have done. \n",
    "positive_df.to_csv(r'positive_hp_reviews.csv')\n",
    "negative_df.to_csv(r'negative_hp_reviews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, I am going to visualize the stopwords_removed reviews and decide on what the next processing steps are. \n",
    "#Visualizing the data without the stopwords \n",
    "pos_viz = pd.DataFrame()\n",
    "pos_viz[\"stopwords_removed\"] = positive_df[\"stopwords_removed\"].copy()\n",
    "pos_viz[\"stopwords_removed\"] = getting_data_ready_for_freq(pos_viz, \"stopwords_removed\")\n",
    "stopwords_removed_dict_pos = creating_freq_list_from_df_to_dict(pos_viz, \"stopwords_removed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_viz = pd.DataFrame()\n",
    "neg_viz[\"stopwords_removed\"] = negative_df[\"stopwords_removed\"].copy()\n",
    "neg_viz[\"stopwords_removed\"] = getting_data_ready_for_freq(neg_viz, \"stopwords_removed\")\n",
    "stopwords_removed_dict_neg = creating_freq_list_from_df_to_dict(neg_viz, \"stopwords_removed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Going to remove one more set of stopwords\n",
    "stopwords = [\"movie\", \"for\", \"they\", \"with\", \"have\", \"film\", \"all\", \"you\", \"are\", \"just\", \"there\", \"one\", \"what\", \"has\", \n",
    "            \"his\", \"her\", \"your\", \"mine\", \"from\", \"not\", \"but\", \"like\", \"harry\", \"will\", \"good\", \"time\", \"will\", \"really\", \"story\", \"who\"]\n",
    "negative_df[\"stopwords_removed\"] = negative_df[\"stopwords_removed\"].apply(lambda row: stop_word_removal(stopwords, row))\n",
    "positive_df[\"stopwords_removed\"] = positive_df[\"stopwords_removed\"].apply(lambda row: stop_word_removal(stopwords, row))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[the, magic, comes, life, the, magic, comes, l...</td>\n",
       "      <td>[magic, comes, life, magic, comes, life, magic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[harry, potter, and, the, sorcerer, stone, har...</td>\n",
       "      <td>[potter, sorcerer, stone, potter, sorcerer, st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[great, journey, the, magic, world, great, jou...</td>\n",
       "      <td>[great, journey, magic, world, great, journey,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   the magic comes life the magic comes life the...     0.000000   \n",
       "1   pure magic pure magic pure magic pure magic t...     0.000000   \n",
       "2   ian enchantment trapdoor imaginary world ench...     0.002169   \n",
       "3   harry potter and the sorcerer stone harry pot...     0.000000   \n",
       "4   great journey the magic world great journey t...     0.000000   \n",
       "\n",
       "                                     review_tokenize  \\\n",
       "0  [the, magic, comes, life, the, magic, comes, l...   \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...   \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...   \n",
       "3  [harry, potter, and, the, sorcerer, stone, har...   \n",
       "4  [great, journey, the, magic, world, great, jou...   \n",
       "\n",
       "                                   stopwords_removed  \n",
       "0  [magic, comes, life, magic, comes, life, magic...  \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...  \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...  \n",
       "3  [potter, sorcerer, stone, potter, sorcerer, st...  \n",
       "4  [great, journey, magic, world, great, journey,...  "
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>For Kids Only, Unfortunately\\n  For Kids Only...</td>\n",
       "      <td>slight spoilers for kids only unfortunately f...</td>\n",
       "      <td>0.010152</td>\n",
       "      <td>[slight, spoilers, for, kids, only, unfortunat...</td>\n",
       "      <td>[slight, spoilers, kids, only, unfortunately, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>An effects-laden excuse of an adaptation\\n  A...</td>\n",
       "      <td>effects laden excuse adaptation effects laden...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[effects, laden, excuse, adaptation, effects, ...</td>\n",
       "      <td>[effects, laden, excuse, adaptation, effects, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Hollywood's greatest shame.\\n  Hollywood's gr...</td>\n",
       "      <td>wow had ringwraiths entz shelob yeah hollywoo...</td>\n",
       "      <td>0.010033</td>\n",
       "      <td>[wow, had, ringwraiths, entz, shelob, yeah, ho...</td>\n",
       "      <td>[wow, had, ringwraiths, entz, shelob, yeah, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Dismal, Contrived, Ripoff and just plain dumb...</td>\n",
       "      <td>jrr dismal contrived ripoff and just plain du...</td>\n",
       "      <td>0.005291</td>\n",
       "      <td>[jrr, dismal, contrived, ripoff, and, just, pl...</td>\n",
       "      <td>[jrr, dismal, contrived, ripoff, plain, dumb, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great storytelling, no story\\n  Great storyte...</td>\n",
       "      <td>spoilers lot great storytelling story great s...</td>\n",
       "      <td>0.003268</td>\n",
       "      <td>[spoilers, lot, great, storytelling, story, gr...</td>\n",
       "      <td>[spoilers, lot, great, storytelling, great, st...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   For Kids Only, Unfortunately\\n  For Kids Only...   \n",
       "1   An effects-laden excuse of an adaptation\\n  A...   \n",
       "2   Hollywood's greatest shame.\\n  Hollywood's gr...   \n",
       "3   Dismal, Contrived, Ripoff and just plain dumb...   \n",
       "4   Great storytelling, no story\\n  Great storyte...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   slight spoilers for kids only unfortunately f...     0.010152   \n",
       "1   effects laden excuse adaptation effects laden...     0.000000   \n",
       "2   wow had ringwraiths entz shelob yeah hollywoo...     0.010033   \n",
       "3   jrr dismal contrived ripoff and just plain du...     0.005291   \n",
       "4   spoilers lot great storytelling story great s...     0.003268   \n",
       "\n",
       "                                     review_tokenize  \\\n",
       "0  [slight, spoilers, for, kids, only, unfortunat...   \n",
       "1  [effects, laden, excuse, adaptation, effects, ...   \n",
       "2  [wow, had, ringwraiths, entz, shelob, yeah, ho...   \n",
       "3  [jrr, dismal, contrived, ripoff, and, just, pl...   \n",
       "4  [spoilers, lot, great, storytelling, story, gr...   \n",
       "\n",
       "                                   stopwords_removed  \n",
       "0  [slight, spoilers, kids, only, unfortunately, ...  \n",
       "1  [effects, laden, excuse, adaptation, effects, ...  \n",
       "2  [wow, had, ringwraiths, entz, shelob, yeah, ho...  \n",
       "3  [jrr, dismal, contrived, ripoff, plain, dumb, ...  \n",
       "4  [spoilers, lot, great, storytelling, great, st...  "
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, I am going to visualize the stopwords_removed reviews and decide on what the next processing steps are. \n",
    "#Visualizing the data without the stopwords \n",
    "pos_viz = pd.DataFrame()\n",
    "pos_viz[\"stopwords_removed\"] = positive_df[\"stopwords_removed\"].copy()\n",
    "pos_viz[\"stopwords_removed\"] = getting_data_ready_for_freq(pos_viz, \"stopwords_removed\")\n",
    "stopwords_removed_dict_pos = creating_freq_list_from_df_to_dict(pos_viz, \"stopwords_removed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_viz = pd.DataFrame()\n",
    "neg_viz[\"stopwords_removed\"] = negative_df[\"stopwords_removed\"].copy()\n",
    "neg_viz[\"stopwords_removed\"] = getting_data_ready_for_freq(neg_viz, \"stopwords_removed\")\n",
    "stopwords_removed_dict_neg = creating_freq_list_from_df_to_dict(neg_viz, \"stopwords_removed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#mask from: https://www.seekpng.com/ipng/u2r5w7e6r5q8e6t4_harry-potter-silhouette-clipart-harry-potter-and-the/\n",
    "#creating an array of arrays for the mask \n",
    "positive_word_cloud = create_word_cloud_with_mask(\"snape.PNG\", stopwords_removed_dict_pos, 750, \"Positive Review Word Cloud\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#mask from https://www.seekpng.com/ipng/u2r5w7e6r5q8e6t4_harry-potter-silhouette-clipart-harry-potter-and-the/\n",
    "#creating an array of arrays for the mask \n",
    "negative_word_cloud = create_word_cloud_with_mask(\"snape.PNG\", stopwords_removed_dict_neg, 750, \"Negative Review Word Cloud\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>1211</td>\n",
       "      <td>potter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>147</td>\n",
       "      <td>760</td>\n",
       "      <td>book</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>210</td>\n",
       "      <td>659</td>\n",
       "      <td>best</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>144</td>\n",
       "      <td>599</td>\n",
       "      <td>more</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>156</td>\n",
       "      <td>531</td>\n",
       "      <td>great</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>175</td>\n",
       "      <td>495</td>\n",
       "      <td>very</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>413</td>\n",
       "      <td>488</td>\n",
       "      <td>first</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>511</td>\n",
       "      <td>471</td>\n",
       "      <td>series</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>437</td>\n",
       "      <td>out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>417</td>\n",
       "      <td>some</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>143</td>\n",
       "      <td>394</td>\n",
       "      <td>much</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>387</td>\n",
       "      <td>well</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>145</td>\n",
       "      <td>385</td>\n",
       "      <td>than</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>119</td>\n",
       "      <td>380</td>\n",
       "      <td>were</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>218</td>\n",
       "      <td>364</td>\n",
       "      <td>part</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>774</td>\n",
       "      <td>357</td>\n",
       "      <td>films</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>499</td>\n",
       "      <td>351</td>\n",
       "      <td>see</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>206</td>\n",
       "      <td>343</td>\n",
       "      <td>about</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>89</td>\n",
       "      <td>341</td>\n",
       "      <td>when</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>236</td>\n",
       "      <td>340</td>\n",
       "      <td>also</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     count    word\n",
       "44    1211  potter\n",
       "147    760    book\n",
       "210    659    best\n",
       "144    599    more\n",
       "156    531   great\n",
       "175    495    very\n",
       "413    488   first\n",
       "511    471  series\n",
       "94     437     out\n",
       "97     417    some\n",
       "143    394    much\n",
       "77     387    well\n",
       "145    385    than\n",
       "119    380    were\n",
       "218    364    part\n",
       "774    357   films\n",
       "499    351     see\n",
       "206    343   about\n",
       "89     341    when\n",
       "236    340    also"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Visualizing the top 12 words/characters\n",
    "eda_reviews_top_words_pos = word_freq_dict_to_df_top_words(stopwords_removed_dict_pos, 20)\n",
    "eda_reviews_top_words_pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "positive_bar_plot = top_words_bar_plot(eda_reviews_top_words_pos, \"Top 20 Positive Words\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>1208</td>\n",
       "      <td>book</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>87</td>\n",
       "      <td>908</td>\n",
       "      <td>potter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>645</td>\n",
       "      <td>out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>555</td>\n",
       "      <td>were</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>514</td>\n",
       "      <td>books</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>499</td>\n",
       "      <td>would</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>486</td>\n",
       "      <td>about</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>200</td>\n",
       "      <td>480</td>\n",
       "      <td>read</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53</td>\n",
       "      <td>460</td>\n",
       "      <td>much</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>444</td>\n",
       "      <td>more</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>164</td>\n",
       "      <td>441</td>\n",
       "      <td>how</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>79</td>\n",
       "      <td>431</td>\n",
       "      <td>even</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>204</td>\n",
       "      <td>419</td>\n",
       "      <td>movies</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>167</td>\n",
       "      <td>392</td>\n",
       "      <td>when</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42</td>\n",
       "      <td>391</td>\n",
       "      <td>been</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56</td>\n",
       "      <td>386</td>\n",
       "      <td>had</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180</td>\n",
       "      <td>386</td>\n",
       "      <td>first</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>372</td>\n",
       "      <td>only</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>327</td>\n",
       "      <td>357</td>\n",
       "      <td>see</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>213</td>\n",
       "      <td>355</td>\n",
       "      <td>did</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     count    word\n",
       "108   1208    book\n",
       "87     908  potter\n",
       "38     645     out\n",
       "10     555    were\n",
       "97     514   books\n",
       "41     499   would\n",
       "45     486   about\n",
       "200    480    read\n",
       "53     460    much\n",
       "80     444    more\n",
       "164    441     how\n",
       "79     431    even\n",
       "204    419  movies\n",
       "167    392    when\n",
       "42     391    been\n",
       "56     386     had\n",
       "180    386   first\n",
       "3      372    only\n",
       "327    357     see\n",
       "213    355     did"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Visualizing the top 12 words/characters\n",
    "eda_reviews_top_words_neg = word_freq_dict_to_df_top_words(stopwords_removed_dict_neg, 20)\n",
    "eda_reviews_top_words_neg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "negative_bar_plot = top_words_bar_plot(eda_reviews_top_words_neg, \"Top 20 Negative Words\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** Positive *****\n",
      "The total number of words is 88956\n",
      "The total number of unique words is 9050\n",
      "***** Negative *****\n",
      "The total number of words is 89101\n",
      "The total number of unique words is 9175\n"
     ]
    }
   ],
   "source": [
    "print(\"***** Positive *****\")\n",
    "total_words_unique_words(stopwords_removed_dict_pos)\n",
    "print(\"***** Negative *****\")\n",
    "total_words_unique_words(stopwords_removed_dict_neg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adding a label to the positive reviews and negative reviews \n",
    "positive_df[\"label\"] = \"pos\"\n",
    "negative_df[\"label\"] = \"neg\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Combining the positive and negative df together \n",
    "combined_df = pd.concat([positive_df, negative_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[the, magic, comes, life, the, magic, comes, l...</td>\n",
       "      <td>[magic, comes, life, magic, comes, life, magic...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[harry, potter, and, the, sorcerer, stone, har...</td>\n",
       "      <td>[potter, sorcerer, stone, potter, sorcerer, st...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[great, journey, the, magic, world, great, jou...</td>\n",
       "      <td>[great, journey, magic, world, great, journey,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  \\\n",
       "0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "\n",
       "                                          new_review  percent_cap  \\\n",
       "0   the magic comes life the magic comes life the...     0.000000   \n",
       "1   pure magic pure magic pure magic pure magic t...     0.000000   \n",
       "2   ian enchantment trapdoor imaginary world ench...     0.002169   \n",
       "3   harry potter and the sorcerer stone harry pot...     0.000000   \n",
       "4   great journey the magic world great journey t...     0.000000   \n",
       "\n",
       "                                     review_tokenize  \\\n",
       "0  [the, magic, comes, life, the, magic, comes, l...   \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...   \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...   \n",
       "3  [harry, potter, and, the, sorcerer, stone, har...   \n",
       "4  [great, journey, the, magic, world, great, jou...   \n",
       "\n",
       "                                   stopwords_removed label  \n",
       "0  [magic, comes, life, magic, comes, life, magic...   pos  \n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...   pos  \n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...   pos  \n",
       "3  [potter, sorcerer, stone, potter, sorcerer, st...   pos  \n",
       "4  [great, journey, magic, world, great, journey,...   pos  "
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>review</th>\n",
       "      <th>new_review</th>\n",
       "      <th>percent_cap</th>\n",
       "      <th>review_tokenize</th>\n",
       "      <th>stopwords_removed</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>The Magic Comes To Life!\\n  The Magic Comes T...</td>\n",
       "      <td>the magic comes life the magic comes life the...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[the, magic, comes, life, the, magic, comes, l...</td>\n",
       "      <td>[magic, comes, life, magic, comes, life, magic...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...</td>\n",
       "      <td>pure magic pure magic pure magic pure magic t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Enchantment, Trapdoor to Imaginary World.\\n  ...</td>\n",
       "      <td>ian enchantment trapdoor imaginary world ench...</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Harry Potter and the Sorcerer's Stone\\n  Harr...</td>\n",
       "      <td>harry potter and the sorcerer stone harry pot...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[harry, potter, and, the, sorcerer, stone, har...</td>\n",
       "      <td>[potter, sorcerer, stone, potter, sorcerer, st...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>Great Journey to the Magic World\\n  Great Jou...</td>\n",
       "      <td>great journey the magic world great journey t...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[great, journey, the, magic, world, great, jou...</td>\n",
       "      <td>[great, journey, magic, world, great, journey,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>979</td>\n",
       "      <td>487</td>\n",
       "      <td>Deathly Disappointing\\n  Deathly Disappointin...</td>\n",
       "      <td>owl rofle omg deathly disappointing deathly d...</td>\n",
       "      <td>0.005376</td>\n",
       "      <td>[owl, rofle, omg, deathly, disappointing, deat...</td>\n",
       "      <td>[owl, rofle, omg, deathly, disappointing, deat...</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>980</td>\n",
       "      <td>488</td>\n",
       "      <td>Nothing but disappointing.\\n  Nothing but dis...</td>\n",
       "      <td>nothing but disappointing nothing but disappo...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[nothing, but, disappointing, nothing, but, di...</td>\n",
       "      <td>[nothing, disappointing, nothing, disappointin...</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>981</td>\n",
       "      <td>489</td>\n",
       "      <td>A middling series ends on a low-point.\\n  A m...</td>\n",
       "      <td>middling series ends low point middling serie...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[middling, series, ends, low, point, middling,...</td>\n",
       "      <td>[middling, series, ends, low, point, middling,...</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>982</td>\n",
       "      <td>490</td>\n",
       "      <td>OK but not I'm not Wowed!\\n  OK but not I'm n...</td>\n",
       "      <td>but not not wowed but not not wowed but not n...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>[but, not, not, wowed, but, not, not, wowed, b...</td>\n",
       "      <td>[wowed, wowed, wowed, wowed, potter, deathly, ...</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>983</td>\n",
       "      <td>491</td>\n",
       "      <td>Its OK, not great.\\n  Its OK, not great.\\n  I...</td>\n",
       "      <td>dvd its not great its not great its not great...</td>\n",
       "      <td>0.006410</td>\n",
       "      <td>[dvd, its, not, great, its, not, great, its, n...</td>\n",
       "      <td>[dvd, its, great, its, great, its, great, its,...</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>984 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index                                             review  \\\n",
       "0        0   The Magic Comes To Life!\\n  The Magic Comes T...   \n",
       "1        1   Pure Magic\\n  Pure Magic\\n  Pure Magic\\n  Pur...   \n",
       "2        2   Enchantment, Trapdoor to Imaginary World.\\n  ...   \n",
       "3        3   Harry Potter and the Sorcerer's Stone\\n  Harr...   \n",
       "4        4   Great Journey to the Magic World\\n  Great Jou...   \n",
       "..     ...                                                ...   \n",
       "979    487   Deathly Disappointing\\n  Deathly Disappointin...   \n",
       "980    488   Nothing but disappointing.\\n  Nothing but dis...   \n",
       "981    489   A middling series ends on a low-point.\\n  A m...   \n",
       "982    490   OK but not I'm not Wowed!\\n  OK but not I'm n...   \n",
       "983    491   Its OK, not great.\\n  Its OK, not great.\\n  I...   \n",
       "\n",
       "                                            new_review  percent_cap  \\\n",
       "0     the magic comes life the magic comes life the...     0.000000   \n",
       "1     pure magic pure magic pure magic pure magic t...     0.000000   \n",
       "2     ian enchantment trapdoor imaginary world ench...     0.002169   \n",
       "3     harry potter and the sorcerer stone harry pot...     0.000000   \n",
       "4     great journey the magic world great journey t...     0.000000   \n",
       "..                                                 ...          ...   \n",
       "979   owl rofle omg deathly disappointing deathly d...     0.005376   \n",
       "980   nothing but disappointing nothing but disappo...     0.000000   \n",
       "981   middling series ends low point middling serie...     0.000000   \n",
       "982   but not not wowed but not not wowed but not n...     0.000000   \n",
       "983   dvd its not great its not great its not great...     0.006410   \n",
       "\n",
       "                                       review_tokenize  \\\n",
       "0    [the, magic, comes, life, the, magic, comes, l...   \n",
       "1    [pure, magic, pure, magic, pure, magic, pure, ...   \n",
       "2    [ian, enchantment, trapdoor, imaginary, world,...   \n",
       "3    [harry, potter, and, the, sorcerer, stone, har...   \n",
       "4    [great, journey, the, magic, world, great, jou...   \n",
       "..                                                 ...   \n",
       "979  [owl, rofle, omg, deathly, disappointing, deat...   \n",
       "980  [nothing, but, disappointing, nothing, but, di...   \n",
       "981  [middling, series, ends, low, point, middling,...   \n",
       "982  [but, not, not, wowed, but, not, not, wowed, b...   \n",
       "983  [dvd, its, not, great, its, not, great, its, n...   \n",
       "\n",
       "                                     stopwords_removed label  \n",
       "0    [magic, comes, life, magic, comes, life, magic...   pos  \n",
       "1    [pure, magic, pure, magic, pure, magic, pure, ...   pos  \n",
       "2    [ian, enchantment, trapdoor, imaginary, world,...   pos  \n",
       "3    [potter, sorcerer, stone, potter, sorcerer, st...   pos  \n",
       "4    [great, journey, magic, world, great, journey,...   pos  \n",
       "..                                                 ...   ...  \n",
       "979  [owl, rofle, omg, deathly, disappointing, deat...   neg  \n",
       "980  [nothing, disappointing, nothing, disappointin...   neg  \n",
       "981  [middling, series, ends, low, point, middling,...   neg  \n",
       "982  [wowed, wowed, wowed, wowed, potter, deathly, ...   neg  \n",
       "983  [dvd, its, great, its, great, its, great, its,...   neg  \n",
       "\n",
       "[984 rows x 7 columns]"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I need to reset the index \n",
    "combined_df.reset_index(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ready to see if I can predict the review sentiment \n",
    "no_stopwords_df = pd.DataFrame() \n",
    "no_stopwords_df[\"review\"] = combined_df[\"stopwords_removed\"].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_stopwords_df[\"label\"] = combined_df[\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[magic, comes, life, magic, comes, life, magic...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[pure, magic, pure, magic, pure, magic, pure, ...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[ian, enchantment, trapdoor, imaginary, world,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[potter, sorcerer, stone, potter, sorcerer, st...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[great, journey, magic, world, great, journey,...</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review label\n",
       "0  [magic, comes, life, magic, comes, life, magic...   pos\n",
       "1  [pure, magic, pure, magic, pure, magic, pure, ...   pos\n",
       "2  [ian, enchantment, trapdoor, imaginary, world,...   pos\n",
       "3  [potter, sorcerer, stone, potter, sorcerer, st...   pos\n",
       "4  [great, journey, magic, world, great, journey,...   pos"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_stopwords_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now I am going to create my bag of words for the tokenized reviews \n",
    "#First, I must remove the labels that I just added... \n",
    "no_stopwords_label = no_stopwords_df[\"label\"]\n",
    "no_stopwords_df.drop(\"label\", axis = 1, inplace = True)\n",
    "no_stopwords_bow = bag_of_words(no_stopwords_df, \"review\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({'potter': 4,\n",
       "         'sorcerer': 4,\n",
       "         'stone': 4,\n",
       "         'unforgettable': 1,\n",
       "         'start': 1,\n",
       "         'fantastic': 1,\n",
       "         'series': 1,\n",
       "         'career': 1,\n",
       "         'impeccable': 1,\n",
       "         'emma': 1,\n",
       "         'watson': 1,\n",
       "         'other': 1,\n",
       "         'kids': 1})"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_stopwords_bow[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_stopwords_df = bow_to_df(no_stopwords_bow)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>magic</th>\n",
       "      <th>comes</th>\n",
       "      <th>life</th>\n",
       "      <th>once</th>\n",
       "      <th>upon</th>\n",
       "      <th>long</th>\n",
       "      <th>ago</th>\n",
       "      <th>vivid</th>\n",
       "      <th>fertile</th>\n",
       "      <th>imagination</th>\n",
       "      <th>...</th>\n",
       "      <th>peaks</th>\n",
       "      <th>payoffs</th>\n",
       "      <th>footnotes</th>\n",
       "      <th>wowed</th>\n",
       "      <th>lashed</th>\n",
       "      <th>sellout</th>\n",
       "      <th>wash</th>\n",
       "      <th>hairs</th>\n",
       "      <th>tingling</th>\n",
       "      <th>lump</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 12948 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   magic  comes  life  once  upon  long  ago  vivid  fertile  imagination  \\\n",
       "0     11      4     8     1     2     4    1      1        1            3   \n",
       "1      5      0     0     0     0     0    0      0        0            0   \n",
       "2      0      0     5     0     0     0    0      0        0            0   \n",
       "3      0      0     0     0     0     0    0      0        0            0   \n",
       "4      5      0     0     0     0     0    0      0        0            0   \n",
       "\n",
       "   ...  peaks  payoffs  footnotes  wowed  lashed  sellout  wash  hairs  \\\n",
       "0  ...      0        0          0      0       0        0     0      0   \n",
       "1  ...      0        0          0      0       0        0     0      0   \n",
       "2  ...      0        0          0      0       0        0     0      0   \n",
       "3  ...      0        0          0      0       0        0     0      0   \n",
       "4  ...      0        0          0      0       0        0     0      0   \n",
       "\n",
       "   tingling  lump  \n",
       "0         0     0  \n",
       "1         0     0  \n",
       "2         0     0  \n",
       "3         0     0  \n",
       "4         0     0  \n",
       "\n",
       "[5 rows x 12948 columns]"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_stopwords_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_stopwords_df = normalize_df(no_stopwords_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>magic</th>\n",
       "      <th>comes</th>\n",
       "      <th>life</th>\n",
       "      <th>once</th>\n",
       "      <th>upon</th>\n",
       "      <th>long</th>\n",
       "      <th>ago</th>\n",
       "      <th>vivid</th>\n",
       "      <th>fertile</th>\n",
       "      <th>imagination</th>\n",
       "      <th>...</th>\n",
       "      <th>peaks</th>\n",
       "      <th>payoffs</th>\n",
       "      <th>footnotes</th>\n",
       "      <th>wowed</th>\n",
       "      <th>lashed</th>\n",
       "      <th>sellout</th>\n",
       "      <th>wash</th>\n",
       "      <th>hairs</th>\n",
       "      <th>tingling</th>\n",
       "      <th>lump</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.020147</td>\n",
       "      <td>0.007326</td>\n",
       "      <td>0.014652</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.003663</td>\n",
       "      <td>0.007326</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.005495</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.018727</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.092593</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 12948 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      magic     comes      life      once      upon      long       ago  \\\n",
       "0  0.020147  0.007326  0.014652  0.001832  0.003663  0.007326  0.001832   \n",
       "1  0.083333  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2  0.000000  0.000000  0.018727  0.000000  0.000000  0.000000  0.000000   \n",
       "3  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "4  0.092593  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "      vivid   fertile  imagination  ...  peaks  payoffs  footnotes  wowed  \\\n",
       "0  0.001832  0.001832     0.005495  ...    0.0      0.0        0.0    0.0   \n",
       "1  0.000000  0.000000     0.000000  ...    0.0      0.0        0.0    0.0   \n",
       "2  0.000000  0.000000     0.000000  ...    0.0      0.0        0.0    0.0   \n",
       "3  0.000000  0.000000     0.000000  ...    0.0      0.0        0.0    0.0   \n",
       "4  0.000000  0.000000     0.000000  ...    0.0      0.0        0.0    0.0   \n",
       "\n",
       "   lashed  sellout  wash  hairs  tingling  lump  \n",
       "0     0.0      0.0   0.0    0.0       0.0   0.0  \n",
       "1     0.0      0.0   0.0    0.0       0.0   0.0  \n",
       "2     0.0      0.0   0.0    0.0       0.0   0.0  \n",
       "3     0.0      0.0   0.0    0.0       0.0   0.0  \n",
       "4     0.0      0.0   0.0    0.0       0.0   0.0  \n",
       "\n",
       "[5 rows x 12948 columns]"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_stopwords_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now I need to remove the total column for each df \n",
    "no_stopwords_df.drop(\"total\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a testing and training df for the normalized dfs \n",
    "no_stopwords_test_train = no_stopwords_df.copy()\n",
    "test_train_label = combined_df[\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating 4 df: 1: the training df with label removed, 2: the testing df with label removed, 3: the training label, 4: testing label\n",
    "no_stopwords_train, no_stopwords_test, no_stopwords_train_label, no_stopwords_test_label = train_test_split(no_stopwords_test_train, test_train_label, test_size = .3, random_state = 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'pos': 148, 'neg': 148})\n"
     ]
    }
   ],
   "source": [
    "#Getting a count of positive and negative opinions in the test label \n",
    "print(Counter(no_stopwords_test_label))\n",
    "#There are roughly the same number of positive and negative reviews in the test and train set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy is 0.902027027027027\n",
      "[[136  12]\n",
      " [ 17 131]]\n",
      "The number of true negatives is:  136\n",
      "The number of false positives is:  12\n",
      "The number of false negatives is:  17\n",
      "The number of true positives is:  131\n"
     ]
    }
   ],
   "source": [
    "#Naive Bayes attempt Multinomial \n",
    "clf = MultinomialNB()\n",
    "clf.fit(no_stopwords_train, no_stopwords_train_label)\n",
    "test_predicted = clf.predict(no_stopwords_test)\n",
    "#Getting the accuracy for naive bayes \n",
    "accuracy = accuracy_score(no_stopwords_test_label, test_predicted, normalize = True)\n",
    "print(\"The accuracy is\", accuracy)\n",
    "cm = confusion_matrix(no_stopwords_test_label, test_predicted)\n",
    "# confusion_matrix_graph(cm, accuracy, \"NB Multinomial No Stopwords\")\n",
    "tn, fp, fn, tp = cm.ravel()\n",
    "print(cm)\n",
    "print(\"The number of true negatives is: \", tn)\n",
    "print(\"The number of false positives is: \", fp)\n",
    "print(\"The number of false negatives is: \", fn)\n",
    "print(\"The number of true positives is: \", tp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
