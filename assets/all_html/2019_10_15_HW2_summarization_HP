{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# file = open('HP1.txt').readlines()\n",
    "\n",
    "# all_text = \"\"\n",
    "# for line in file:\n",
    "#     all_text += line\n",
    "\n",
    "# all_text = all_text.replace(\"\\n\", \" \")\n",
    "# all_text = all_text.replace(\"\\'\", \"\")\n",
    "\n",
    "# import re\n",
    "# all_text = re.sub(r'[0-9]', '', all_text)\n",
    "# chapters = all_text.split('CHAPTER ')\n",
    "# ch1 = chapters[1]\n",
    "\n",
    "file = open('../WK5/wk5_pdf.txt').readlines()\n",
    "\n",
    "all_text = \"\"\n",
    "for line in file:\n",
    "    all_text += line\n",
    "\n",
    "all_text = all_text.replace(\"\\n\", \" \")\n",
    "all_text = all_text.replace(\"\\'\", \"\")\n",
    "\n",
    "import re\n",
    "# all_text = re.sub(r'[0-9]', '', all_text)\n",
    "# chapters = all_text.split('CHAPTER ')\n",
    "ch1 = all_text\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Abstract Human linguistic annotation is crucial for many natural language processing tasks but can be expensive and time-consuming.',\n",
       " 'We explore the use of Amazon’s Mechanical Turk system, a significantly cheaper and faster method for collecting annotations from a broad base of paid non-expert contributors over the Web.',\n",
       " 'We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.',\n",
       " 'For all five, we show high agreement between Mechanical Turk non-expert annotations and existing gold standard labels provided by expert labelers.',\n",
       " 'For the task of affect recognition, we also show that using non-expert labels for training machine learning algorithms can be as effective as using gold standard annotations from experts.',\n",
       " 'We propose a technique for bias correction that significantly improves annotation quality on two tasks.',\n",
       " 'We conclude that many large labeling tasks can be effectively designed and carried out in this method at a fraction of the usual expense.',\n",
       " '1 Introduction Large scale annotation projects such as TreeBank (Marcus et al., 1993), PropBank (Palmer et al., 2005), TimeBank (Pustejovsky et al., 2003), FrameNet (Baker et al., 1998), SemCor (Miller et al., 1993), and others play an important role in natural language processing research, encouraging the development of novel ideas, tasks, and algorithms.',\n",
       " 'The construction of these datasets, however, is extremely expensive in both annotator-hours and financial cost.',\n",
       " 'Since the performance of many natural language processing tasks is limited by the amount and quality of data available to them (Banko and Brill, 2001), one promising alternative for some tasks is the collection of non-expert annotations.']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "sentence_list = nltk.sent_tokenize(ch1)\n",
    "sentence_list[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "stopwords = nltk.corpus.stopwords.words('english')\n",
    "word_frequencies = {}\n",
    "for word in nltk.word_tokenize(ch1):\n",
    "    if word not in stopwords:\n",
    "        if word not in word_frequencies.keys():\n",
    "            word_frequencies[word] = 1\n",
    "        else:\n",
    "            word_frequencies[word] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_frequency = max(word_frequencies.values())\n",
    "for word in word_frequencies.keys():\n",
    "    word_frequencies[word] = (word_frequencies[word]/max_frequency)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abstract\n",
      "human\n",
      "linguistic\n",
      "annotation\n",
      "is\n",
      "crucial\n",
      "for\n",
      "many\n",
      "natural\n",
      "language\n",
      "processing\n",
      "tasks\n",
      "but\n",
      "can\n",
      "be\n",
      "expensive\n",
      "and\n",
      "time-consuming\n",
      ".\n"
     ]
    }
   ],
   "source": [
    "for sent in sentence_list[:1]:\n",
    "    for word in nltk.word_tokenize(sent.lower()):\n",
    "        print(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linguistic\n",
      "annotation\n",
      "crucial\n",
      "many\n",
      "natural\n",
      "language\n",
      "processing\n",
      "tasks\n",
      "expensive\n",
      "time-consuming\n",
      ".\n"
     ]
    }
   ],
   "source": [
    "for sent in sentence_list[:1]:\n",
    "    for word in nltk.word_tokenize(sent.lower()):\n",
    "        if word in word_frequencies.keys():\n",
    "            print(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sentence_scores = {}\n",
    "for sent in sentence_list:\n",
    "    for word in nltk.word_tokenize(sent.lower()):\n",
    "        if word in word_frequencies.keys():\n",
    "            if len(sent.split(' ')) < 30:\n",
    "                if sent not in sentence_scores.keys():\n",
    "                    sentence_scores[sent] = word_frequencies[word]\n",
    "                else:\n",
    "                    sentence_scores[sent] += word_frequencies[word]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Dolores Labs Blog, “AMT is fast, cheap, and good for machine learning data,” Brendan O’Connor, Sept. 9, 2008.',\n",
       "  7.409090909090909),\n",
       " ('4 Annotation Tasks We analyze the quality of non-expert annotations on five tasks: affect recognition, word similarity, recognizing textual entailment, temporal event recognition, and word sense disambiguation.',\n",
       "  6.7272727272727275),\n",
       " ('We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.',\n",
       "  5.827272727272727),\n",
       " ('We did this by averaging the labels of each possible subset of n non-expert annotations, for value of n in {1, 2,... , 10}.',\n",
       "  5.745454545454545),\n",
       " ('The tasks are: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.',\n",
       "  5.736363636363635),\n",
       " ('For each task, we used AMT to annotate data and measured the quality of the annotations by comparing them with the gold standard (expert) labels on the same data.',\n",
       "  3.9),\n",
       " ('We then do the same for individual non-expert annotations, averaging Pearson correlation across all sets of the five expert labelers (“NE vs. E”).',\n",
       "  3.827272727272727),\n",
       " ('In Table 2 we give the minimum k for each emotion, and the averaged ITA for that meta-labeler consisting of k non-experts (marked “k-NE”).',\n",
       "  3.2727272727272725),\n",
       " ('For the task of affect recognition, we also show that using non-expert labels for training machine learning algorithms can be as effective as using gold standard annotations from experts.',\n",
       "  3.1545454545454548),\n",
       " ('Finally, after each HIT has been annotated, the Requester has the option of approving the work and optionally giving a bonus to individual workers.',\n",
       "  3.0363636363636375)]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sentences = sorted(sentence_scores.items(), key=lambda kv: kv[1], reverse=True)\n",
    "sorted_sentences[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dolores Labs Blog, “AMT is fast, cheap, and good for machine learning data,” Brendan O’Connor, Sept. 9, 2008.4 Annotation Tasks We analyze the quality of non-expert annotations on five tasks: affect recognition, word similarity, recognizing textual entailment, temporal event recognition, and word sense disambiguation.We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.We did this by averaging the labels of each possible subset of n non-expert annotations, for value of n in {1, 2,... , 10}.The tasks are: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.For each task, we used AMT to annotate data and measured the quality of the annotations by comparing them with the gold standard (expert) labels on the same data.We then do the same for individual non-expert annotations, averaging Pearson correlation across all sets of the five expert labelers (“NE vs. E”).In Table 2 we give the minimum k for each emotion, and the averaged ITA for that meta-labeler consisting of k non-experts (marked “k-NE”).For the task of affect recognition, we also show that using non-expert labels for training machine learning algorithms can be as effective as using gold standard annotations from experts.Finally, after each HIT has been annotated, the Requester has the option of approving the work and optionally giving a bonus to individual workers.'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary = [sent[0] for sent in sorted_sentences[:10]]\n",
    "''.join(summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Abstract Human linguistic annotation is crucial for many natural language processing tasks but can be expensive and time-consuming.',\n",
       "  1.3636363636363638),\n",
       " ('We explore the use of Amazon’s Mechanical Turk system, a significantly cheaper and faster method for collecting annotations from a broad base of paid non-expert contributors over the Web.',\n",
       "  2.563636363636363),\n",
       " ('We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.',\n",
       "  5.827272727272727),\n",
       " ('For all five, we show high agreement between Mechanical Turk non-expert annotations and existing gold standard labels provided by expert labelers.',\n",
       "  3.018181818181818),\n",
       " ('For the task of affect recognition, we also show that using non-expert labels for training machine learning algorithms can be as effective as using gold standard annotations from experts.',\n",
       "  3.1545454545454548),\n",
       " ('We propose a technique for bias correction that significantly improves annotation quality on two tasks.',\n",
       "  1.3454545454545457),\n",
       " ('We conclude that many large labeling tasks can be effectively designed and carried out in this method at a fraction of the usual expense.',\n",
       "  1.2454545454545456),\n",
       " ('The construction of these datasets, however, is extremely expensive in both annotator-hours and financial cost.',\n",
       "  2.9181818181818184),\n",
       " ('In this work we explore the use of Amazon Mechanical Turk1 (AMT) to determine whether nonexpert labelers can provide reliable natural language annotations.',\n",
       "  2.1545454545454543),\n",
       " ('The tasks are: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.',\n",
       "  5.736363636363635)]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(sentence_scores.items())[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "newly_sorted = [sent[0] for sent in sentence_scores.items() if sent[1] > 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.The tasks are: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.Dolores Labs Blog, “AMT is fast, cheap, and good for machine learning data,” Brendan O’Connor, Sept. 9, 2008.4 Annotation Tasks We analyze the quality of non-expert annotations on five tasks: affect recognition, word similarity, recognizing textual entailment, temporal event recognition, and word sense disambiguation.We did this by averaging the labels of each possible subset of n non-expert annotations, for value of n in {1, 2,... , 10}.'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newly_sorted\n",
    "''.join(newly_sorted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We investigate five tasks: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.The tasks are: affect recognition, word similarity, recognizing textual entailment, event temporal ordering, and word sense disambiguation.Dolores Labs Blog, “AMT is fast, cheap, and good for machine learning data,” Brendan O’Connor, Sept. 9, 2008.4 Annotation Tasks We analyze the quality of non-expert annotations on five tasks: affect recognition, word similarity, recognizing textual entailment, temporal event recognition, and word sense disambiguation.We did this by averaging the labels of each possible subset of n non-expert annotations, for value of n in {1, 2,... , 10}.\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "def get_sentence_list(many_sentences):\n",
    "    return nltk.sent_tokenize(many_sentences)\n",
    "    \n",
    "def get_word_frequencies(many_sentences):\n",
    "    stopwords = nltk.corpus.stopwords.words('english')\n",
    "    word_frequencies = {}\n",
    "    for word in nltk.word_tokenize(many_sentences):\n",
    "        if word not in stopwords:\n",
    "            if word not in word_frequencies.keys():\n",
    "                word_frequencies[word] = 1\n",
    "            else:\n",
    "                word_frequencies[word] += 1\n",
    "    return word_frequencies\n",
    "                       \n",
    "def get_weighted_frequencies(word_frequencies):\n",
    "    max_frequency = max(word_frequencies.values())\n",
    "    for word in word_frequencies.keys():\n",
    "        word_frequencies[word] = (word_frequencies[word]/max_frequency)\n",
    "    return word_frequencies\n",
    "\n",
    "def get_sentence_scores(sentence_list, word_frequencies):\n",
    "    sentence_scores = {}\n",
    "    for sent in sentence_list:\n",
    "        for word in nltk.word_tokenize(sent.lower()):\n",
    "            if word in word_frequencies.keys():\n",
    "                if len(sent.split(' ')) < 30:\n",
    "                    if sent not in sentence_scores.keys():\n",
    "                        sentence_scores[sent] = word_frequencies[word]\n",
    "                    else:\n",
    "                        sentence_scores[sent] += word_frequencies[word]\n",
    "    return sentence_scores\n",
    "    \n",
    "\n",
    "def get_summary(many_sentences):\n",
    "    sentence_list = get_sentence_list(many_sentences)\n",
    "    word_frequencies = get_word_frequencies(many_sentences)\n",
    "    weighted_word_frequencies = get_weighted_frequencies(word_frequencies)\n",
    "    sentence_scores = get_sentence_scores(sentence_list, weighted_word_frequencies)\n",
    "\n",
    "    newly_sorted = [sent[0] for sent in sentence_scores.items() if sent[1] > 5]\n",
    "    print(''.join(newly_sorted))\n",
    "    \n",
    "def get_summary_by_chapters(chapters):\n",
    "    for ch,chapter in enumerate(chapters):\n",
    "        print('****** CHAPTER ' + str(ch) + '*******')\n",
    "        get_summary(chapter)\n",
    "\n",
    "# get_summary_by_chapters(chapters)\n",
    "\n",
    "get_summary(all_text)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
