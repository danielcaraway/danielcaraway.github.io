{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HW5 Artificial Artificial Intelligence\n",
    "\n",
    "Kendra Osburn | 11-2-19 | IST 736"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## INTRODUCTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARTIFICIAL INTELLIGENCE\n",
    "\n",
    "At the nexus of machines and humans is the hard-to-grasp, even-harder-to-quantify blanket term “artificial intelligence.” Once a Hollywood blockbuster starring Haley Joel Osment, artificial intelligence is now a Silicon Valley buzzword, like Bitcoin or blockchain, used to excite stakeholders and increase valuations. \n",
    "\n",
    "In reality, artificial intelligence is considerably less glamorous. Artificial intelligence refers to the application of computing power to a wide variety of tasks that are too tedious for humans, susceptible to human error, or both. \n",
    "For example, let’s imagine that we want to know how the country feels about the President of the United States. In the olden days, before innovations like mass communication, computers and the internet, we’d have to walk door to door, ring the doorbell, interview the inhabitants, take notes, and return to our university, where we would manually sift through notes to pull out words that might seem more “positive” or “negative” in nature. While this might be manageable across a city block or housing subdivision, on a larger scale, it’s nearly impossible. \n",
    "\n",
    "Even if we could magically snap our fingers and receive one sentence about the President from each person in the United States, we would have over 300 million sentences to review. Moreover, even we could review and categorize each sentence in under a second, it would take us over 9 years of around-the-clock work to complete this task — and by then, we’d have a different president! \n",
    "\n",
    "Computers, on the other hand, are much better at these kinds of menial tasks — especially those that involve counting. Computers are also very good at performing mathematical equations quickly and efficiently, with numbers too large even for our confusingly expensive Texas Instruments calculators. By leveraging these machine skills in service of a more nuanced or complex objective — for instance, assessing people’s feelings — artificial intelligence can train computers to do even more amazing things. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ARTIFICIAL ARTIFICIAL INTELLIGENCE\n",
    "\n",
    "What happens when we come across a task a human still can perform better than a machine? What happens when this task involves detecting lies or identifying sarcasm, where our reasoning is difficult to articulate or quantify beyond a “gut feeling”? How do we measure “gut feeling,” and how can we train a computer on something so nebulous? \n",
    "\n",
    "Enter Amazon and its Mechanical Turk program. Touted as “artificial” artificial intelligence, Amazon Mechanical Turk (AMT) farms out tasks that involve “gut feeling” to hundreds of thousands of human workers (called “turkers”) a small sum. Amazon’s objective is to collect turkers’ data with the goal of automating them out of existence. Until that day arrives, however, the turkers at AMT are here to help those of us unfortunate enough to conduct a research project with unlabeled data. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ANALYSIS & MODELS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "neg = pd.read_csv('AMT_neg.csv')\n",
    "pos = pd.read_csv('AMT_pos.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ABOUT THE DATA\n",
    "#### Initial EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ========================\n",
      "  ..  WorkerId        Answer.sentiment.label\n",
      "====  ==============  ========================\n",
      "   0  A100DH6ZVHB9EP  Neutral\n",
      "   1  AOMFEAWQHU3D8   Negative\n",
      "   2  A3HAEQW13YPT6A  Positive\n",
      "   3  A3NAHG3TXPNQFN  Negative\n",
      "   4  A1X9BD3KDIA2QB  Negative\n",
      "====  ==============  ========================\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "df = neg.copy()\n",
    "df = df[['WorkerId', 'Answer.sentiment.label']]\n",
    "print(tabulate(df[:5], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many unique turkers worked on each dataframe?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53 Turkers worked on NEG batch\n",
      "38 Turkers worked on POS batch\n"
     ]
    }
   ],
   "source": [
    "def get_unique(df, column):\n",
    "    unique = np.unique(df[column], return_counts=True)\n",
    "    df = pd.DataFrame(zip(unique[0], unique[1]))\n",
    "    return len(unique[0]), unique, df\n",
    "\n",
    "num_neg, unique_neg, u_neg_df = get_unique(neg, 'WorkerId')    \n",
    "num_pos, unique_pos, u_pos_df = get_unique(pos, 'WorkerId')\n",
    "\n",
    "print(num_neg, 'Turkers worked on NEG batch')\n",
    "print(num_pos, 'Turkers worked on POS batch')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many HITS did each unique turker do?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x10f6ef128>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "u_neg_df.plot(kind='bar',x=0,y=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11045c438>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "u_pos_df.plot(kind='bar',x=0,y=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What's the `max` and `min` HIT for unique turkers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For neg, the min was: 1 and the max was: 37\n",
      "For pos, the min was: 1 and the max was: 40\n"
     ]
    }
   ],
   "source": [
    "print('For {}, the min was: {} and the max was: {}'.format('neg', unique_neg[1].min(), unique_neg[1].max())) \n",
    "print('For {}, the min was: {} and the max was: {}'.format('pos', unique_pos[1].min(), unique_pos[1].max())) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Did a specitic Sentiment take longer for turkers to assess? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1, 'Negative')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.catplot(x=\"Answer.sentiment.label\", \n",
    "            y=\"WorkTimeInSeconds\", \n",
    "            kind=\"bar\", \n",
    "            order=['Negative', 'Neutral', 'Positive'], \n",
    "            data=neg);\n",
    "plt.title('Negative')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1, 'Positive')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"Answer.sentiment.label\", \n",
    "            y=\"WorkTimeInSeconds\", \n",
    "            kind=\"bar\", \n",
    "            order=['Negative', 'Neutral', 'Positive'], \n",
    "            data=pos)\n",
    "plt.title('Positive')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many turkers had less than 10 second response time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "response_time = neg[neg['WorkTimeInSeconds'] < 10]\n",
    "response_time_check = neg[neg['WorkTimeInSeconds'] > 10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(response_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "312"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(response_time_check)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking for potential bots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Did anyone have a consistent average low response time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ===================  =======\n",
      "  ..  WorkerId          WorkTimeInSeconds    HITId\n",
      "====  ==============  ===================  =======\n",
      "   0  A13CLN8L5HFT46              7.23077       13\n",
      "   1  A18WFPSLFV4FKY             47              2\n",
      "   2  A1IQV3QUWRA8G1             22              1\n",
      "   3  A1N1ULK71RHVMM             10              3\n",
      "   4  A1S2MN0E9BHPVA            173.444         27\n",
      "====  ==============  ===================  =======\n"
     ]
    }
   ],
   "source": [
    "count = pos.groupby(['WorkerId'])['HITId'].count()\n",
    "work_time = pos.groupby(['WorkerId'])['WorkTimeInSeconds'].mean()\n",
    "new_df = pd.DataFrame([work_time, count]).T\n",
    "new_df.reset_index(inplace=True)\n",
    "\n",
    "df = new_df.copy()\n",
    "df = df[['WorkerId', 'WorkTimeInSeconds', 'HITId']]\n",
    "print(tabulate(df[:5], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Did anyone have a consistent average high response time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ===============  =======\n",
      "  ..  WorkerId          WorkTimeInMin    HITId\n",
      "====  ==============  ===============  =======\n",
      "  36  AO2WNSGOXAX52          150.833         4\n",
      "  15  A2P7LKVCMHI1C5          83.2833        3\n",
      "  24  A3LE1BIVORW3VR          81.975         2\n",
      "  30  A7O82NXM2PI12           18.5883       10\n",
      "  25  A3M0LH8L12FR9N          17.131         7\n",
      "====  ==============  ===============  =======\n"
     ]
    }
   ],
   "source": [
    "new_df['WorkTimeInMin'] = new_df['WorkTimeInSeconds']/60\n",
    "\n",
    "df = new_df.copy()\n",
    "df = df.sort_values(by='WorkTimeInMin', ascending=False)\n",
    "df = df[['WorkerId', 'WorkTimeInMin', 'HITId']]\n",
    "print(tabulate(df[:5], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============================  =======\n",
      "..                                HITId\n",
      "==============================  =======\n",
      "('A13CLN8L5HFT46', 'Neutral')         2\n",
      "('A13CLN8L5HFT46', 'Positive')       11\n",
      "('A18WFPSLFV4FKY', 'Positive')        2\n",
      "('A1IQV3QUWRA8G1', 'Positive')        1\n",
      "('A1N1ULK71RHVMM', 'Negative')        1\n",
      "('A1N1ULK71RHVMM', 'Positive')        2\n",
      "('A1S2MN0E9BHPVA', 'Negative')        4\n",
      "('A1S2MN0E9BHPVA', 'Neutral')         2\n",
      "('A1S2MN0E9BHPVA', 'Positive')       21\n",
      "('A1X9BD3KDIA2QB', 'Neutral')         1\n",
      "==============================  =======\n"
     ]
    }
   ],
   "source": [
    "count = pd.DataFrame(pos.groupby(['WorkerId', 'Answer.sentiment.label'])['HITId'].count())\n",
    "\n",
    "df = count.copy()\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Did anyone answer ONLY pos/neg/neutral?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============  =========  ==========  ==========  =======\n",
      "..                Neutral    Positive    Negative    Total\n",
      "==============  =========  ==========  ==========  =======\n",
      "A13CLN8L5HFT46          2          11           0       13\n",
      "A18WFPSLFV4FKY          0           2           0        2\n",
      "A1IQV3QUWRA8G1          0           1           0        1\n",
      "A1N1ULK71RHVMM          0           2           1        3\n",
      "A1S2MN0E9BHPVA          2          21           4       27\n",
      "A1X9BD3KDIA2QB          1           3           0        4\n",
      "A1Y66T7FKJ8PJA          5          23           7       35\n",
      "A1YK1IKACUJMV4          0          15           0       15\n",
      "A2241A4P7UR7HY          2           2           1        5\n",
      "A22A52DRIIEV6K          3           6           0        9\n",
      "==============  =========  ==========  ==========  =======\n"
     ]
    }
   ],
   "source": [
    "pnn = pd.DataFrame()\n",
    "pnn['Neutral'] = pos.groupby('WorkerId')['Answer.sentiment.label'].apply(lambda x: (x=='Neutral').sum())\n",
    "pnn['Positive'] = pos.groupby('WorkerId')['Answer.sentiment.label'].apply(lambda x: (x=='Positive').sum())\n",
    "pnn['Negative'] = pos.groupby('WorkerId')['Answer.sentiment.label'].apply(lambda x: (x=='Negative').sum())\n",
    "pnn['Total'] = pos.groupby('WorkerId')['Answer.sentiment.label'].apply(lambda x: x.count())\n",
    "\n",
    "df = pnn.copy()\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### This is getting a little confusing, let's just look at our top performers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "top = pnn.sort_values(by=['Total'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============  =========  ==========  ==========  =======\n",
      "..                Neutral    Positive    Negative    Total\n",
      "==============  =========  ==========  ==========  =======\n",
      "A681XM15AN28F          13          20           7       40\n",
      "A1Y66T7FKJ8PJA          5          23           7       35\n",
      "A33ENZVC1XB4BA          0          34           0       34\n",
      "A1S2MN0E9BHPVA          2          21           4       27\n",
      "A37L5E8MHHQGZM          6          13           3       22\n",
      "AE03LUY7RH400           4          10           7       21\n",
      "A2G44A4ZPWRPXU          4          12           2       18\n",
      "A1YK1IKACUJMV4          0          15           0       15\n",
      "A3AW887GI0NLKF          3          10           2       15\n",
      "A3HAEQW13YPT6A          0          14           0       14\n",
      "==============  =========  ==========  ==========  =======\n"
     ]
    }
   ],
   "source": [
    "df = top.copy()\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interesting!! Looking from here, we have three workers who ONLY chose positive. \n",
    "\n",
    "Let's look at their response time to see if we can determine if they are a bot!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "top['Avg_WorkTimeInSeconds'] = pos.groupby('WorkerId')['WorkTimeInSeconds'].apply(lambda x: x.mean())\n",
    "top['Avg_WorkTimeInMin'] = pos.groupby('WorkerId')['WorkTimeInSeconds'].apply(lambda x: x.mean()/60)\n",
    "top['Min_WorkTimeInMin'] = pos.groupby('WorkerId')['WorkTimeInSeconds'].apply(lambda x: x.min()/60)\n",
    "top['Max_WorkTimeInMin'] = pos.groupby('WorkerId')['WorkTimeInSeconds'].apply(lambda x: x.max()/60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  =========  ==========  ==========  ===================\n",
      "  ..  WorkerId          Neutral    Positive    Negative    Avg_WorkTimeInMin\n",
      "====  ==============  =========  ==========  ==========  ===================\n",
      "   0  A681XM15AN28F          13          20           7              0.22625\n",
      "   1  A1Y66T7FKJ8PJA          5          23           7             11.5976\n",
      "   2  A33ENZVC1XB4BA          0          34           0              6.11078\n",
      "   3  A1S2MN0E9BHPVA          2          21           4              2.89074\n",
      "   4  A37L5E8MHHQGZM          6          13           3              5.77121\n",
      "   5  AE03LUY7RH400           4          10           7              1.70397\n",
      "   6  A2G44A4ZPWRPXU          4          12           2              3.68796\n",
      "   7  A1YK1IKACUJMV4          0          15           0              9.89333\n",
      "   8  A3AW887GI0NLKF          3          10           2              4.49\n",
      "   9  A3HAEQW13YPT6A          0          14           0              7.38214\n",
      "====  ==============  =========  ==========  ==========  ===================\n"
     ]
    }
   ],
   "source": [
    "df = top.copy()\n",
    "df.reset_index(inplace=True)\n",
    "df = df[['WorkerId', 'Neutral', 'Positive','Negative','Avg_WorkTimeInMin']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even more interesting! These two don't appear to be bots, based on our current metric which is time variability.\n",
    "\n",
    "HOWEVER, worker `A681XM15AN28F` appears to only work for an average of 13 seconds per review which doesn't seem like enough time to read and judge a review..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PART 2: Second submission to AMT\n",
    "\n",
    "TOO MANY REVIEWERS!\n",
    "\n",
    "Here is when we realized that doing a kappa score with over 30 individual reviewers would be tricky, so we rusubmitted to AMT and required the turkers to be 'Master' in the hopes that this additional barrier-to-entry would help reduce the amount of turkers working on the project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "293"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v2 = pd.read_csv('HW5_amt_v2.csv')\n",
    "v2[:5]\n",
    "len(v2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This time, I didn't separate the df into pos and neg before submitting to AMT, so we have to reimport the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = pd.read_csv('all_JK_extremes_labeled.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oops! That's right, we replicated each review * 3 so three separate people could look at each review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels2 = labels.append([labels] * 2, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "294"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(labels2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Reuploading now -- WITH BETTER CODE AND BETTER VARIABLE NAMES!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ========================\n",
      "  ..  WorkerId        Answer.sentiment.label\n",
      "====  ==============  ========================\n",
      "   0  AH5A86OLRZWCS   Negative\n",
      "   1  A2HGRSPR50ENHL  Negative\n",
      "   2  AKSJ3C5O3V9RB   Negative\n",
      "   3  ARLGZWN6W91WD   Negative\n",
      "   4  AKSJ3C5O3V9RB   Negative\n",
      "   5  A1L8RL58MYU4NC  Negative\n",
      "   6  A3EZ0H07TSDAPW  Positive\n",
      "   7  ASB8T0H7L99RF   Negative\n",
      "   8  A38DC3BG1ZCVZ2  Negative\n",
      "   9  A2XFO0X6RCS98M  Negative\n",
      "====  ==============  ========================\n"
     ]
    }
   ],
   "source": [
    "turker = pd.read_csv('HW5_amt_294.csv')\n",
    "\n",
    "df = turker.copy()\n",
    "df.reset_index(inplace=True)\n",
    "df = df[['WorkerId', 'Answer.sentiment.label']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "294\n",
      "====  =====  ========================================================\n",
      "  ..  PoN    short\n",
      "====  =====  ========================================================\n",
      "   0  N      ['', 'Everyone', 'praised', 'an', 'overrated']\n",
      "   1  N      ['', 'What', 'idiotic', 'FIlm\\nI', 'can']\n",
      "   2  N      ['', 'Terrible\\nThe', 'only', 'thing', 'good']\n",
      "   3  N      ['', 'Watch', 'Taxi', 'Driver', 'instead\\nThis']\n",
      "   4  N      ['', 'I', 'learned', 'one', 'thing.\\nIt']\n",
      "   5  N      ['', 'What', 'the', 'hell\\nI', 'HATE']\n",
      "   6  N      ['', \"Don't\", 'be', 'SHEEP\\nI', \"don't\"]\n",
      "   7  N      ['', 'So', 'dissapointing', 'and', 'boring!!!\\nJoaquin']\n",
      "   8  N      ['', 'Dark,', 'Depressing,', 'Slow,', 'Heavy,']\n",
      "   9  N      ['', 'What', 'happens', 'when', 'a']\n",
      "====  =====  ========================================================\n"
     ]
    }
   ],
   "source": [
    "# Getting labels...\n",
    "labels = pd.read_csv('all_JK_extremes_labeled.csv')\n",
    "# X3\n",
    "labels = labels.append([labels] * 2, ignore_index=True)\n",
    "print(len(labels))\n",
    "df = labels.copy()\n",
    "df['short'] = df.apply(lambda x: x['0'].split(' ')[:5], axis=1)\n",
    "\n",
    "df = df[['PoN', 'short']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### NOW, TO SORT!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_labels = labels.sort_values(by=['0'])\n",
    "sorted_turker = turker.sort_values(by=['Input.text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sorted_turker['Input.text'][:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OMG HOORAY HOORAY HOORAY!!\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOTE: FUN FACT!! I can type here and then hit the `esc` key to turn this cell into markdown!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  =======================================  ========================  =====\n",
      "  ..  short                                    Answer.sentiment.label    PoN\n",
      "====  =======================================  ========================  =====\n",
      " 228  ['#LetRottenTomatoesRotSquad\\nI', 'am']  Positive                  P\n",
      " 229  ['#LetRottenTomatoesRotSquad\\nI', 'am']  Positive                  P\n",
      " 230  ['#LetRottenTomatoesRotSquad\\nI', 'am']  Positive                  P\n",
      "  56  ['A', \"'Triumph\"]                        Negative                  N\n",
      "  55  ['A', \"'Triumph\"]                        Negative                  N\n",
      "  54  ['A', \"'Triumph\"]                        Neutral                   N\n",
      " 223  ['A', 'Breath']                          Positive                  P\n",
      " 222  ['A', 'Breath']                          Positive                  P\n",
      " 224  ['A', 'Breath']                          Positive                  P\n",
      "  46  ['A', 'MASTERPIECE\\nJoaquin']            Positive                  N\n",
      "====  =======================================  ========================  =====\n"
     ]
    }
   ],
   "source": [
    "# YUCK THIS IS SO AGGRIVATING!! This line below doens't work because it still uses indexes.\n",
    "# So the P and N didn't match up \n",
    "# sorted_turker['PoN'] = sorted_labels['PoN']\n",
    "sorted_turker['PoN'] = sorted_labels['PoN'].tolist()\n",
    "df = sorted_turker[sorted_turker.columns[-5:]][:10]\n",
    "\n",
    "df['short'] = df.apply(lambda x: x['Input.text'].split(' ')[1:3], axis=1)\n",
    "\n",
    "\n",
    "df = df[['short', 'Answer.sentiment.label', 'PoN']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PART 3: ANALYZE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's clean ALL the things"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df = sorted_turker[['Input.text', 'WorkerId', 'Answer.sentiment.label', 'PoN']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ========================  =====\n",
      "  ..  WorkerId        Answer.sentiment.label    PoN\n",
      "====  ==============  ========================  =====\n",
      " 228  A681XM15AN28F   Positive                  P\n",
      " 229  A2XFO0X6RCS98M  Positive                  P\n",
      " 230  AURYD2FH3FUOQ   Positive                  P\n",
      "  56  A1T79J0XQXDDGC  Negative                  N\n",
      "  55  A2XFO0X6RCS98M  Negative                  N\n",
      "  54  A681XM15AN28F   Neutral                   N\n",
      " 223  ARLGZWN6W91WD   Positive                  P\n",
      " 222  ASB8T0H7L99RF   Positive                  P\n",
      " 224  A1T79J0XQXDDGC  Positive                  P\n",
      "  46  A1T79J0XQXDDGC  Positive                  N\n",
      "====  ==============  ========================  =====\n"
     ]
    }
   ],
   "source": [
    "df = all_df.copy()\n",
    "df = df[['WorkerId', 'Answer.sentiment.label', 'PoN']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df_all = all_df.copy()\n",
    "all_df_all['APoN'] = all_df_all.apply(lambda x: x['Answer.sentiment.label'][0], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df_all['agree'] = all_df_all.apply(lambda x: x['PoN'] == x['APoN'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  =====  ======  =======\n",
      "  ..  WorkerId        PoN    APoN    agree\n",
      "====  ==============  =====  ======  =======\n",
      "  38  A3EZ0H07TSDAPW  N      N       True\n",
      " 216  A3EZ0H07TSDAPW  N      P       False\n",
      " 217  A2XFO0X6RCS98M  N      P       False\n",
      " 218  AKSJ3C5O3V9RB   N      P       False\n",
      " 264  A3EZ0H07TSDAPW  N      P       False\n",
      " 265  ARLGZWN6W91WD   N      P       False\n",
      " 266  A38DC3BG1ZCVZ2  N      P       False\n",
      "  93  A2XFO0X6RCS98M  N      N       True\n",
      "  94  A3EZ0H07TSDAPW  N      N       True\n",
      "  95  ASB8T0H7L99RF   N      N       True\n",
      "====  ==============  =====  ======  =======\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df = all_df_all[-10:].copy()\n",
    "df = df[['WorkerId', 'PoN', 'APoN', 'agree']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lets see how many agree!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  =====  ========\n",
      "  ..  PoN       agree\n",
      "====  =====  ========\n",
      "   0  P      1\n",
      "   1  N      1\n",
      "   2  P      1\n",
      "   3  N      0.333333\n",
      "   4  P      1\n",
      "   5  P      1\n",
      "   6  P      1\n",
      "   7  P      1\n",
      "   8  N      0\n",
      "   9  P      0.666667\n",
      "====  =====  ========\n"
     ]
    }
   ],
   "source": [
    "agree_df = pd.DataFrame(all_df_all.groupby(['Input.text','PoN'])['agree'].mean())\n",
    "agree_df = agree_df.reset_index()\n",
    "df = agree_df.copy()\n",
    "df = df[['PoN', 'agree']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK so this actually gave us something we want...\n",
    "BUT PLEASE TELL ME THE BETTER WAY!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  =====  ========  ==============\n",
      "  ..  PoN       agree  agree_factor\n",
      "====  =====  ========  ==============\n",
      "   0  P      1         agree\n",
      "   1  N      1         agree\n",
      "   2  P      1         agree\n",
      "   3  N      0.333333  disparity\n",
      "   4  P      1         agree\n",
      "   5  P      1         agree\n",
      "   6  P      1         agree\n",
      "   7  P      1         agree\n",
      "   8  N      0         agree_wrong\n",
      "   9  P      0.666667  disparity\n",
      "====  =====  ========  ==============\n"
     ]
    }
   ],
   "source": [
    "def return_agreement(num):\n",
    "    if num == 0:\n",
    "        return 'agree_wrong'\n",
    "    if num == 1:\n",
    "        return 'agree'\n",
    "    if (num/1) !=0:\n",
    "        return 'disparity'\n",
    "\n",
    "agree_df['agree_factor'] = agree_df.apply(lambda x: return_agreement(x['agree']), axis=1)\n",
    "agree_df\n",
    "\n",
    "df = agree_df.copy()\n",
    "df = df[['PoN', 'agree', 'agree_factor']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ============  =====  =======\n",
      "  ..  agree_factor      Input.text    PoN    agree\n",
      "====  ==============  ============  =====  =======\n",
      "   0  agree                     33     33       33\n",
      "   1  agree_wrong               31     31       31\n",
      "   2  disparity                 34     34       34\n",
      "====  ==============  ============  =====  =======\n"
     ]
    }
   ],
   "source": [
    "df1 = agree_df.groupby(['agree_factor']).count()\n",
    "df1.reset_index(inplace=True)\n",
    "df = df1.copy()\n",
    "df = df[['agree_factor','Input.text','PoN', 'agree']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'How many turkers agreed on sentiment?')"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=['Agreed', 'Disagreed'],\n",
    "           y= [64,34],\n",
    "           data = df1);\n",
    "plt.title('How many turkers agreed on sentiment?')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'How many turkers agreed on sentiment, but were wrong?')"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"agree_factor\", y=\"agree\", data=df1);\n",
    "plt.title('How many turkers agreed on sentiment, but were wrong?')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = agree_df.groupby(['agree_factor', 'PoN']).count()\n",
    "df2.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'What was the pos/neg split for the turkers?')"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"agree_factor\",\n",
    "           y=\"agree\",\n",
    "           hue=\"PoN\",\n",
    "           data=df2);\n",
    "plt.title(\"What was the pos/neg split for the turkers?\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What was the kappa score for the turkers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33333333333333337"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example code\n",
    "from sklearn.metrics import cohen_kappa_score\n",
    "y1 = [0,1,2,3,4,0,1,2,3,4,0,1,2,3,4]\n",
    "y2 = [0,1,2,2,4,1,2,3,0,0,0,2,2,4,4]\n",
    "cohen_kappa_score(y1,y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This was absolutely miserable and had me questioning both my intellect and the meaning of life"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FIRST PASS: Oh boy! This will be super fun. First, I'm going to brainstorm \"out loud\" how I'm going to do this when AMT doesn't require that the same N turkers complete the task, making inter-rater reliability extremely hard to track when one turker has done 46/98 reviews and another has done 2/98"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at our top turkers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "turker_clean = turker[['HITId', 'WorkerId', 'Answer.sentiment.label', 'Input.text']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============================  ==============  ========================\n",
      "  ..  HITId                           WorkerId        Answer.sentiment.label\n",
      "====  ==============================  ==============  ========================\n",
      "   0  338GLSUI43BXEPY2ES6SPI72KKESF7  AH5A86OLRZWCS   Negative\n",
      "   1  338GLSUI43BXEPY2ES6SPI72KKESF7  A2HGRSPR50ENHL  Negative\n",
      "   2  338GLSUI43BXEPY2ES6SPI72KKESF7  AKSJ3C5O3V9RB   Negative\n",
      "   3  37MQ8Z1JQEWA9HYZP3JANL1ES162YC  ARLGZWN6W91WD   Negative\n",
      "   4  37MQ8Z1JQEWA9HYZP3JANL1ES162YC  AKSJ3C5O3V9RB   Negative\n",
      "   5  37MQ8Z1JQEWA9HYZP3JANL1ES162YC  A1L8RL58MYU4NC  Negative\n",
      "   6  38O9DZ0A62N8QXOTJKOI4UHLTRD62G  A3EZ0H07TSDAPW  Positive\n",
      "   7  38O9DZ0A62N8QXOTJKOI4UHLTRD62G  ASB8T0H7L99RF   Negative\n",
      "   8  38O9DZ0A62N8QXOTJKOI4UHLTRD62G  A38DC3BG1ZCVZ2  Negative\n",
      "   9  3I7SHAD35MWH116RCCCUPHVFU7E7M7  A2XFO0X6RCS98M  Negative\n",
      "====  ==============================  ==============  ========================\n"
     ]
    }
   ],
   "source": [
    "turker_clean\n",
    "\n",
    "df = turker_clean.copy()\n",
    "df = df[['HITId','WorkerId', 'Answer.sentiment.label']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And let's see how many turkers turked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==============  ==========\n",
      "..                WorkerId\n",
      "==============  ==========\n",
      "ARLGZWN6W91WD           46\n",
      "A681XM15AN28F           37\n",
      "A1T79J0XQXDDGC          34\n",
      "A2XFO0X6RCS98M          33\n",
      "A3EZ0H07TSDAPW          33\n",
      "A1L8RL58MYU4NC          28\n",
      "A38DC3BG1ZCVZ2          22\n",
      "AKSJ3C5O3V9RB           21\n",
      "ASB8T0H7L99RF           10\n",
      "AE03LUY7RH400            6\n",
      "==============  ==========\n"
     ]
    }
   ],
   "source": [
    "turker_counts = pd.DataFrame(turker_clean.WorkerId.value_counts())\n",
    "\n",
    "df = turker_counts.copy()\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK let's make this easy on ourselves and just use the top 5 turkers for our first test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "turker1 = turker_clean[turker_clean['WorkerId'] == 'ARLGZWN6W91WD']\n",
    "turker2 = turker_clean[turker_clean['WorkerId'] == 'A681XM15AN28F']\n",
    "turker3 = turker_clean[turker_clean['WorkerId'] == 'A1T79J0XQXDDGC']\n",
    "turker4 = turker_clean[turker_clean['WorkerId'] == 'A2XFO0X6RCS98M']\n",
    "turker5 = turker_clean[turker_clean['WorkerId'] == 'A3EZ0H07TSDAPW']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "turker1.reset_index(drop=True, inplace=True)\n",
    "turker2.reset_index(drop=True, inplace=True)\n",
    "turker3.reset_index(drop=True, inplace=True)\n",
    "turker4.reset_index(drop=True, inplace=True)\n",
    "turker5.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = pd.concat([turker1, turker2, turker3, turker4, turker5], axis=0, sort=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==============  ========================\n",
      "  ..  WorkerId        Answer.sentiment.label\n",
      "====  ==============  ========================\n",
      "  91  A1T79J0XQXDDGC  Negative\n",
      " 115  A1T79J0XQXDDGC  Positive\n",
      " 114  A1T79J0XQXDDGC  Positive\n",
      " 113  A1T79J0XQXDDGC  Positive\n",
      " 112  A1T79J0XQXDDGC  Negative\n",
      " 111  A1T79J0XQXDDGC  Positive\n",
      " 110  A1T79J0XQXDDGC  Positive\n",
      " 109  A1T79J0XQXDDGC  Positive\n",
      " 108  A1T79J0XQXDDGC  Positive\n",
      " 107  A1T79J0XQXDDGC  Positive\n",
      " 106  A1T79J0XQXDDGC  Positive\n",
      " 105  A1T79J0XQXDDGC  Positive\n",
      " 104  A1T79J0XQXDDGC  Positive\n",
      " 103  A1T79J0XQXDDGC  Positive\n",
      " 102  A1T79J0XQXDDGC  Positive\n",
      " 116  A1T79J0XQXDDGC  Positive\n",
      " 101  A1T79J0XQXDDGC  Positive\n",
      "  99  A1T79J0XQXDDGC  Positive\n",
      "  83  A1T79J0XQXDDGC  Positive\n",
      "  84  A1T79J0XQXDDGC  Negative\n",
      "====  ==============  ========================\n"
     ]
    }
   ],
   "source": [
    "df = merged_df.sort_values(by='WorkerId')\n",
    "df = df[['WorkerId', 'Answer.sentiment.label']]\n",
    "print(tabulate(df[:20], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===========  ================  ================  ===============\n",
      "..           A2XFO0X6RCS98M    A3EZ0H07TSDAPW    A681XM15AN28F\n",
      "===========  ================  ================  ===============\n",
      "SENTIMENT1   Negative          Positive          Negative\n",
      "SENTIMENT2   Negative          Neutral           Positive\n",
      "SENTIMENT3   Negative          Positive          Positive\n",
      "SENTIMENT4   Negative          Negative          Positive\n",
      "SENTIMENT5   Positive          Negative          Positive\n",
      "SENTIMENT6   Negative          Positive          Negative\n",
      "SENTIMENT7   Negative          Negative          Neutral\n",
      "SENTIMENT8   Negative          Positive          Neutral\n",
      "SENTIMENT9   Negative          Positive          Neutral\n",
      "SENTIMENT10  Negative          Negative          Neutral\n",
      "===========  ================  ================  ===============\n"
     ]
    }
   ],
   "source": [
    "merged_df2 = pd.concat([turker1, turker2], axis=0, sort=False)\n",
    "df = pd.DataFrame({'Turker': merged_df['WorkerId'].tolist(),\n",
    "                   'SENTIMENT': merged_df['Answer.sentiment.label'].tolist(),\n",
    "                   'REVIEW': merged_df['HITId'].tolist() })\n",
    "\n",
    "grouped = df.groupby('Turker')\n",
    "values = grouped['REVIEW'].agg('sum')\n",
    "id_df = grouped['SENTIMENT'].apply(lambda x: pd.Series(x.values)).unstack()\n",
    "id_df = id_df.rename(columns={i: 'SENTIMENT{}'.format(i + 1) for i in range(id_df.shape[1])})\n",
    "result = pd.concat([id_df, values], axis=1)\n",
    "result_df = pd.DataFrame(result)\n",
    "\n",
    "df = result_df.T.copy()\n",
    "df = df[df.columns[1:4]]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Positive', 'Neutral', 'Positive', 'Negative', 'Negative']"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1 = result_df.T['A3EZ0H07TSDAPW'].tolist()\n",
    "t2 = result_df.T['A2XFO0X6RCS98M'].tolist()\n",
    "t3 = result_df.T['A681XM15AN28F'].tolist()\n",
    "t4 = result_df.T['ARLGZWN6W91WD'].tolist()\n",
    "t1[:-1][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Negative', 'Negative', 'Negative', 'Negative', 'Positive']"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t2[:-1][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Negative', 'Positive', 'Positive', 'Positive', 'Positive']"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t3[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK after all that work, we can finally calculate the kappa score between our first and second \"most prolific\" turkers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.43974358974358974"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import cohen_kappa_score\n",
    "y1 = t1[:-1]\n",
    "y2 = t2[:-1]\n",
    "cohen_kappa_score(y1,y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "annnnnd just to make sure, let's calculate the same score between third and fourth \"most prolific\" turkers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.07585335018963324"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y3 = t3[:-1]\n",
    "y4 = t4[:-1]\n",
    "cohen_kappa_score(y3,y4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pretty sure a negative number isn't what we want... oh well. Can't worry about that because that's when the existential dread sinks in... like, why am I doing this right now? Why do I care so much? Why am I trying to calculate inter-rater reliability THIS way when this won't even be a measure I will use if/when I use turkers in the future? In the future, I will use the sample size itself to determine \"reliability\" -- e.g. If all N turkers agree on X, then it goes into the \"good\" pile, if not, then it goes back into the AMT pile until we have N turkers agreeing...Because the way AMT is set up right now, we won't be able to reliable calculate kappa when the number of HITS per turker is so varried. In order to get something truely accurate, I'd have to remove all the data that was only completed by M or fewer turkers and hope that the prolific turkers worked on the same ones and then compare those (which is exactly what I did below but seriously WHY WHY WHY.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Another failed test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Attempt 4:\n",
    "##### Maybe if I convert these huge opressive strings into smaller numbers, this won't feel as awful?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_turker_ids = pd.factorize(turker_clean_test['WorkerId'].tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_ids = ['T_' + str(id) for id in new_turker_ids[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['T_0', 'T_1', 'T_2', 'T_3', 'T_2']"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_ids[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "turker_clean_test['T_ID'] = t_ids\n",
    "# turker_clean_test[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "turker_clean_test['sentiment'] = turker_clean_test.apply(lambda x: x['Answer.sentiment.label'][0], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# turker_clean_test[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Annnnd here we are... small and clean. This DID actually help my brain a bit... Noted for next time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "even_cleaner_df = turker_clean_test[['ReviewID', 'T_ID', 'sentiment']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==========  ======  ===========\n",
      "  ..    ReviewID  T_ID    sentiment\n",
      "====  ==========  ======  ===========\n",
      "   0           0  T_0     N\n",
      "   1           0  T_1     N\n",
      "   2           0  T_2     N\n",
      "   3           1  T_3     N\n",
      "   4           1  T_2     N\n",
      "====  ==========  ======  ===========\n"
     ]
    }
   ],
   "source": [
    "df = even_cleaner_df[:5]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Attempt 5:\n",
    "#### Let's make our very own DIY sparse matrix!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=======  =====  ======  ======  ======  ======  ======  ======\n",
      "..       T_1    T_10    T_11    T_12    T_13    T_14    T_15\n",
      "=======  =====  ======  ======  ======  ======  ======  ======\n",
      "REVIEW1  N      P       N       N       N       N       N\n",
      "REVIEW2  nan    N       N       N       N       P       N\n",
      "REVIEW3  nan    P       P       N       N       nan     nan\n",
      "REVIEW4  nan    P       P       N       P       nan     nan\n",
      "REVIEW5  nan    N       N       P       P       nan     nan\n",
      "=======  =====  ======  ======  ======  ======  ======  ======\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame({'Turker': even_cleaner_df['T_ID'].tolist(),\n",
    "                   'SENTIMENT': even_cleaner_df['sentiment'].tolist(),\n",
    "                   'REVIEW': even_cleaner_df['ReviewID'].tolist() })\n",
    "\n",
    "grouped = df.groupby('Turker')\n",
    "values = grouped['REVIEW'].agg('sum')\n",
    "id_df = grouped['SENTIMENT'].apply(lambda x: pd.Series(x.values)).unstack()\n",
    "id_df = id_df.rename(columns={i: 'REVIEW{}'.format(i + 1) for i in range(id_df.shape[1])})\n",
    "result = pd.concat([id_df, values], axis=1)\n",
    "result_df = pd.DataFrame(result)\n",
    "\n",
    "df = result_df.T[:5]\n",
    "df = df[df.columns[1:8]]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And turn it into a data frame cuz why not?!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## That is obviously wrong because only THREE people commented on Review1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ATTEMPT FUCKING 6:\n",
    "##### I ***clap emoji*** hate ***clap emoji*** everything ***clap emoji***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({'Turker': even_cleaner_df['T_ID'].tolist(),\n",
    "                   'SENTIMENT': even_cleaner_df['ReviewID'].tolist(),\n",
    "                   'REVIEW': even_cleaner_df['sentiment'].tolist() })\n",
    "\n",
    "grouped = df.groupby('Turker')\n",
    "values = grouped['REVIEW'].agg('sum')\n",
    "id_df = grouped['SENTIMENT'].apply(lambda x: pd.Series(x.values)).unstack()\n",
    "id_df = id_df.rename(columns={i: 'REVIEW{}'.format(i + 1) for i in range(id_df.shape[1])})\n",
    "result = pd.concat([id_df, values], axis=1)\n",
    "result_df = pd.DataFrame(result)\n",
    "# print(result_df.T[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(result_df.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I want every review on the left side and I want all 46 turkers on the top"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({ 'review': even_cleaner_df['ReviewID']})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Attempt 7: After eating some food and having a calm down"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_array_of_reviews(turker, df):\n",
    "    a = ['nan']*98\n",
    "    df = even_cleaner_df[even_cleaner_df['T_ID'] == turker] \n",
    "    t_reviews = df['ReviewID'].tolist()\n",
    "    t_sentiment = df['sentiment'].tolist()\n",
    "    for index,review in enumerate(t_reviews):\n",
    "        a[review] = t_sentiment[index]\n",
    "#     print(t_reviews)\n",
    "\n",
    "    return a\n",
    "\n",
    "sparse_df = even_cleaner_df.copy()\n",
    "sparse_df['big_array'] = sparse_df.apply(lambda x: get_array_of_reviews(x['T_ID'], even_cleaner_df), axis=1)\n",
    "t0 = even_cleaner_df[even_cleaner_df['T_ID'] == 'T_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==========  ======  ===========\n",
      "  ..    ReviewID  T_ID    sentiment\n",
      "====  ==========  ======  ===========\n",
      "   0           0  T_0     N\n",
      "  34          11  T_0     N\n",
      " 126          42  T_0     N\n",
      " 140          46  T_0     N\n",
      "====  ==========  ======  ===========\n"
     ]
    }
   ],
   "source": [
    "df = t0\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====  ==========  ======  ===========  =================================\n",
      "  ..    ReviewID  T_ID    sentiment    big_array_sm\n",
      "====  ==========  ======  ===========  =================================\n",
      "   0           0  T_0     N            ['N', 'nan', 'nan', 'nan', 'nan']\n",
      "   1           0  T_1     N            ['N', 'nan', 'nan', 'nan', 'nan']\n",
      "   2           0  T_2     N            ['N', 'N', 'nan', 'nan', 'nan']\n",
      "   3           1  T_3     N            ['nan', 'N', 'nan', 'N', 'N']\n",
      "   4           1  T_2     N            ['N', 'N', 'nan', 'nan', 'nan']\n",
      "   5           1  T_4     N            ['nan', 'N', 'nan', 'nan', 'nan']\n",
      "   6           2  T_5     P            ['nan', 'nan', 'P', 'N', 'P']\n",
      "   7           2  T_6     N            ['nan', 'nan', 'N', 'nan', 'nan']\n",
      "   8           2  T_7     N            ['nan', 'nan', 'N', 'nan', 'nan']\n",
      "   9           3  T_8     N            ['nan', 'nan', 'nan', 'N', 'N']\n",
      "====  ==========  ======  ===========  =================================\n"
     ]
    }
   ],
   "source": [
    "\n",
    "sparse_df['big_array_sm'] = sparse_df.apply(lambda x: x['big_array'][:5], axis=1)\n",
    "df = sparse_df[['ReviewID', 'T_ID','sentiment', 'big_array_sm']]\n",
    "print(tabulate(df[:10], tablefmt=\"rst\", headers=df.columns))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "t0 = sparse_df[sparse_df['T_ID'] == 'T_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['N', 'N', 'nan', 'nan', 'nan']"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sparse_df['big_array'][sparse_df['T_ID'] == 'T_2'].tolist()[0][:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RESULTS\n",
    "### Finally Calculate the Kappa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.39004149377593356"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y1 = sparse_df['big_array'][sparse_df['T_ID'] == 'T_0'].tolist()[0]\n",
    "y2 = sparse_df['big_array'][sparse_df['T_ID'] == 'T_1'].tolist()[0]\n",
    "cohen_kappa_score(y1,y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### And calculate kappas for other combinations (but not all combinations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_kappa(num):\n",
    "    y1 = sparse_df['big_array'][sparse_df['T_ID'] == 'T_'+str(num)].tolist()[0]\n",
    "    y2 = sparse_df['big_array'][sparse_df['T_ID'] == 'T_'+str(num + 1)].tolist()[0]\n",
    "    return cohen_kappa_score(y1,y2)\n",
    "\n",
    "kappas = [calculate_kappa(num) for num in range(16)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.39004149377593356,\n",
       " 0.07634307257304429,\n",
       " 0.023255813953488413,\n",
       " 0.11578947368421055,\n",
       " -0.10975609756097549,\n",
       " -0.04981253347616499,\n",
       " 0.29547088425593093,\n",
       " -0.02821170435999054,\n",
       " -0.01071003570011908,\n",
       " 0.005658536585365748,\n",
       " -0.06968933669185562,\n",
       " -0.04457364341085279,\n",
       " -0.04457364341085279,\n",
       " -0.02235469448584193,\n",
       " -0.015544041450777257,\n",
       " -0.01730103806228378]"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kappas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Wonderful. More negative numbers. I love life. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TL;DR: Calculating kappa and inter-rater reliability when there are multiple reviewers is challenging and deserves more delibrate time and study."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CONCLUSION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While computers have advanced in leaps and bounds over the past several decades, it’s clear that there are tasks that humans still perform better than machines. We know, for instance, that horseradish doesn’t belong in brownie recipes. We can tell if a tweet is sarcastic, or identify whether a photo depicts a chihuahua or a muffin. Some might say that machines can’t perform these tasks reliably because they aren’t “smart enough” yet. If intelligence is defined as the sum total of everything we’ve ever learned, then this assessment is accurate.\n",
    "\n",
    "However, this does not mean that machines will never be able to perform tasks like these. In reality, computers simply haven't been given enough data to determine that the blueberries in that muffin are not, in fact, chihuahua eyeballs. Just as a small child labels every four-legged creature a “doggie” until she has lived long enough to collect more data (“This four-legged creature is always bigger than a dog and makes a totally different noise! I’ve also noticed that the grownups refer to it as a ‘horse’”), the computer is simply at a data disadvantage. \n",
    "\n",
    "The solution, then, is expose the computer to more data, just like the child. This is exactly what Amazon Mechanical Turk is doing. Thanks to the “artificial” artificial intelligence of turkers, computers can process massive amounts of “gut feeling” data that will eventually enable them to distinguish between a chihuahua and a muffin as well as (or better than) humans.\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
