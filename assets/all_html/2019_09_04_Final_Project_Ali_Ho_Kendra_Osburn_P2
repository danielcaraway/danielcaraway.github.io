{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IMDB | IST 652 FINAL PROJECT | ALI HO & KENDRA OSBURN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# =======================================================\n",
    "# PART 2: A - SCRAPING & SCRIPTING \n",
    "# ======================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE LIBRARIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import json\n",
    "import csv\n",
    "import pandas as pd\n",
    "from urllib.parse import quote\n",
    "import requests\n",
    "import time\n",
    "import re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE DATA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kaggle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_Data from kaggle.com_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6820"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kaggle = pd.read_csv(\"movies.csv\", encoding = \"ISO-8859-1\")\n",
    "len(kaggle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3726"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kaggle_cleaned = pd.read_csv(\"working_movies_usa.csv\", encoding = \"ISO-8859-1\" )\n",
    "len(kaggle_cleaned)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IMDB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_Data from scraping imdb.com (see below for details)_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7299"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb_707 = pd.read_csv(\"movies_IST707.csv\", encoding = \"ISO-8859-1\" )\n",
    "len(imdb_707)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9678"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb_ids = pd.read_csv(\"ids_from_imdb.csv\", encoding = \"ISO-8859-1\" )\n",
    "len(imdb_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9684"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdb_scores = pd.read_csv(\"V2_IMDB_score_data.csv\", encoding = \"ISO-8859-1\")\n",
    "len(imdb_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TMDB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_Data from hitting the TMDB api (see below for details)_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79920"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First attempt\n",
    "tmdb_movies = pd.read_csv(\"tmdb_movies_csv.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tmdb_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20000"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Taking every actor in our kaggle dataset and getting their movie credits using TMDB's api\n",
    "tmdb_actors = pd.read_csv(\"tmdb_20k.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tmdb_actors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3532"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing things without budget, revenue, production studio or genre\n",
    "tmdb_actors_cleaned = pd.read_csv(\"tmdb_20k_cleaned.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tmdb_actors_cleaned)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9678"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tmdb_v2 = pd.read_csv(\"tmdb_from_imdb_v2.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tmdb_v2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The-Numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_Data from scraping the-numbers.com (see below for details)_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5825"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tn_1 = pd.read_csv(\"V2_TN_budget_data_and_url.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tn_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1987"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tn_2 = pd.read_csv(\"V2_TN_reports_dates.csv\", encoding = \"ISO-8859-1\")\n",
    "len(tn_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE SCRAPING & API CALLING\n",
    "### IMDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ==============================================================\n",
    "# GETTING THE IMDB ID & SCORE\n",
    "# ==============================================================\n",
    "\n",
    "def get_info_from_movies(movies):\n",
    "    ids_for_movies_in_year = []\n",
    "    for i, movie in enumerate(movies):\n",
    "        link_with_id = movie.find('a', {'href': re.compile('/title/tt')})\n",
    "        imdb_id = link_with_id.attrs['href'].split('/')[2]\n",
    "        clean = \"\".join(line.strip() for line in movie.text.split(\"\\n\"))\n",
    "#         valiant regex attempt \n",
    "#         rating = re.compile('\\)(.*)')\n",
    "#         name = re.compile('\\..*\\ ')\n",
    "#         date = re.compile('(\\d{3}).')\n",
    "        title_rating_string = clean.split('0Rate')[0]\n",
    "        rating = title_rating_string.split(')')[1]\n",
    "        name = title_rating_string.split('.')[1].split('(')[0]\n",
    "        date = title_rating_string.split('(')[1].split(')')[0]\n",
    "        movie_dict = {\n",
    "            'imdb_id': imdb_id,\n",
    "            'name': name,\n",
    "            'imdb_rating': rating,\n",
    "            'date': date\n",
    "        }\n",
    "        ids_for_movies_in_year.append(movie_dict)\n",
    "    return(ids_for_movies_in_year)\n",
    "    \n",
    "def get_imdb_html(year, urlending):\n",
    "    url = ('https://www.imdb.com/search/title/?title_type=feature&boxoffice_gross_us=1,&release_date='+str(year)+'-01-01,'+str(year)+'-12-31&countries=us&view=simple&count=250'+urlending)\n",
    "    headers = {'Accept-Language': 'en-US'}\n",
    "    movies_html = requests.get(url.format(), headers=headers).content\n",
    "    soup = BeautifulSoup(movies_html, 'html.parser')\n",
    "    soup_main = soup.find(\"div\", {\"id\": \"main\"})\n",
    "    movies_list = soup_main.find('div', class_=\"lister list detail sub-list\")\n",
    "    movies = soup_main.find_all('div', class_=\"lister-item mode-simple\")\n",
    "    return movies\n",
    "\n",
    "\n",
    "def get_imdb_scores(year, urlending):\n",
    "    movies = get_imdb_html(year, urlending)\n",
    "    return get_info_from_movies(movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_imdb_scores_script():\n",
    "    all_the_ids = []\n",
    "    for year in range(1970, 2020):\n",
    "        all_the_ids += get_imdb_scores(year, '')\n",
    "        all_the_ids += get_imdb_scores(year, '&start=251')\n",
    "    all_the_ids_df = pd.DataFrame(all_the_ids)\n",
    "    all_the_ids_df.to_csv('imdb_ids.csv')\n",
    "    \n",
    "#     save a small (2018) subset \n",
    "#     all_the_2018_ids_df = pd.DataFrame(all_the_ids[48])\n",
    "#     all_the_2018_ids_df.to_csv\n",
    "\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
    "# # UNCOMMENT TO RUN <3 \n",
    "# run_imdb_scores_script()\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TMDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ==============================================================\n",
    "# GETTING THE SUPPLIMENTAL INFO FROM TMBD API\n",
    "# ==============================================================\n",
    "\n",
    "# NOTE: This is a fun time capsule of how we wrote these files\n",
    "# at the start of this project!! We'd like to think we've \n",
    "# cleaned things up a bit!!\n",
    "\n",
    "def write_csv(data):\n",
    "    df = pd.DataFrame(data)\n",
    "    df.to_csv('2018_movies.csv', index=False)\n",
    "\n",
    "headers = {'Accept-Language': 'en-US'}\n",
    "payload = \"{}\"\n",
    "\n",
    "api_key = open(\"tmdb_api_key.txt\")\n",
    "api_key = api_key.read()\n",
    "\n",
    "\n",
    "def get_tmdb_info(imdb_id_file):\n",
    "    all_movie_data = []\n",
    "    with open(imdb_id_file, encoding='utf-8') as csvfile:\n",
    "        movies = csv.reader(csvfile)\n",
    "        for movie in movies:\n",
    "            try:\n",
    "                url = \"https://api.themoviedb.org/3/movie/\"\n",
    "                thing_looking_for = movie[1]\n",
    "                my_api_key = \"?api_key=\" + api_key\n",
    "                full_url = url + thing_looking_for + my_api_key\n",
    "                res = requests.get(full_url, payload, headers=headers)\n",
    "                data = res.content.decode('UTF-8')\n",
    "                jdata = json.loads(data)\n",
    "                try:\n",
    "                    title = jdata['title']\n",
    "                    budget = jdata['budget']\n",
    "                    genres = jdata['genres']\n",
    "                    production_companies = jdata['production_companies']\n",
    "                    release_date = jdata['release_date']\n",
    "                    revenue = jdata['revenue']\n",
    "                    profit = revenue - budget\n",
    "                    popularity = jdata['popularity']\n",
    "                    vote_average = jdata['vote_average']\n",
    "                    vote_count = jdata['vote_count']\n",
    "                except KeyError:\n",
    "                    title = 'NA'\n",
    "                    budget = 'NA'\n",
    "                    genres = 'NA'\n",
    "                    production_companies = 'NA'\n",
    "                    release_date = 'NA'\n",
    "                    revenue = 'NA'\n",
    "                    profit = 'NA'\n",
    "                    popularity = 'NA'\n",
    "                    vote_average = 'NA'\n",
    "                    vote_count = 'NA'\n",
    "\n",
    "                movie_data = {\n",
    "                    'release_date': release_date,\n",
    "                    'title': title,\n",
    "                    'budget': budget,\n",
    "                    'genres': genres,\n",
    "                    'production_companies': production_companies,\n",
    "                    'revenue': revenue,\n",
    "                    'profit': profit,\n",
    "                    'popularity': popularity,\n",
    "                    'vote_average': vote_average,\n",
    "                    'vote_count': vote_count\n",
    "                }\n",
    "                all_movie_data.append(movie_data)\n",
    "            except UnicodeDecodeError:\n",
    "                director_data = {}\n",
    "    all_movie_data_df = pd.DataFrame(all_movie_data)\n",
    "    print(all_movie_data_df)\n",
    "    write_csv(all_movie_data)\n",
    "    \n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
    "# # UNCOMMENT TO RUN <3 \n",
    "# get_tmdb_info('imdb_ids_2018.csv')\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The-Numbers\n",
    "##### BUDGET CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. get the page (get_tn_data)\n",
    "# 2. get the soup (get_soup)\n",
    "# 3. get the data from the soup (get_data_from_soup)\n",
    "\n",
    "def get_data_from_soup(soup_data):\n",
    "    all_movies = []\n",
    "    for data in soup_data[1:]:\n",
    "        data_array = data.text.split('\\n')\n",
    "        movie_data = {\n",
    "            'num': data_array[0],\n",
    "            'release_date': data_array[1],\n",
    "            'name': data_array[2],\n",
    "            'production_budget': data_array[3],\n",
    "            'domestic_gross': data_array[4],\n",
    "            'worldwide_gross': data_array[5]\n",
    "        }\n",
    "        all_movies.append(movie_data)\n",
    "    return all_movies\n",
    "\n",
    "def get_soup(num):\n",
    "    url = ('https://www.the-numbers.com/movie/budgets/all'+num)\n",
    "    headers = {'Accept-Language': 'en-US'}\n",
    "    movies_html = requests.get(url.format(), headers=headers).content\n",
    "    soup = BeautifulSoup(movies_html, 'html.parser')\n",
    "    soup_data = soup.find_all(\"tr\")\n",
    "    return soup_data\n",
    "\n",
    "def get_tn_data(num):\n",
    "    tn_soup = get_soup(num)\n",
    "    return get_data_from_soup(tn_soup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. create array to house all data\n",
    "# 2. quick workaround for our first page\n",
    "# 3. iterate through the the-numbers url\n",
    "# 4. save to df, save to csv\n",
    "\n",
    "def run_TN_script():\n",
    "    all_pages = []\n",
    "    all_pages += get_tn_data('')\n",
    "    for i in range(1,59):\n",
    "        results = get_tn_data('/'+ str(i) + '01')\n",
    "        all_pages += results\n",
    "    all_pages_df = pd.DataFrame(all_pages)\n",
    "    all_pages_df.to_csv('TN_budget_data.csv')\n",
    "\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
    "# # UNCOMMENT TO RUN <3 \n",
    "# run_TN_script()\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### REPORTS CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_data(data_array):\n",
    "    movie_data = {\n",
    "                'Released': data_array[2],\n",
    "                'ReleasedWorldwide': data_array[3],\n",
    "                'Released_2': data_array[4],\n",
    "                'ReleasedWorldwide_2': data_array[5],\n",
    "                'Title': data_array[6],\n",
    "                'TheatricalDistributor': data_array[7],\n",
    "                'Genre': data_array[8],\n",
    "                'Source': data_array[9],\n",
    "                'ProductionMethod': data_array[10],\n",
    "                'CreativeType': data_array[11],\n",
    "                'ProductionBudget': data_array[12],\n",
    "                'OpeningWeekendTheaters': data_array[13],\n",
    "                'MaximumTheaters': data_array[14],\n",
    "                'TheatricalEngagements': data_array[15],\n",
    "                'OpeningWeekendRevenue': data_array[16],\n",
    "                'DomesticBoxOffice': data_array[17],\n",
    "                'Infl.Adj.Dom.BoxOffice': data_array[18],\n",
    "                'InternationalBoxOffice': data_array[19],\n",
    "                'WorldwideBoxOffice': data_array[20]\n",
    "    }\n",
    "    return movie_data\n",
    "\n",
    "def get_report(year):\n",
    "    url = ('https://www.the-numbers.com/movies/report/All/All/All/All/All/All/All/All/All/.1/None/'+str(year)+'/'+ str(year + 1)+'/None/None/None/None/None/None?show-release-date=On&view-order-by=domestic-box-office&show-release-year=On&view-order-direction=desc&show-production-budget=On&show-opening-weekend-theaters=On&show-domestic-box-office=On&show-maximum-theaters=On&show-inflation-adjusted-domestic-box-office=On&show-theatrical-engagements=On&show-international-box-office=On&show-opening-weekend-revenue=On&show-worldwide-box-office=On&show-worldwide-release-date=On&show-worldwide-release-year=On&show-theatrical-distributor=On&show-genre=On&show-source=On&show-production-method=On&show-creative-type=On')\n",
    "    headers = {'Accept-Language': 'en-US'}\n",
    "    movies_html = requests.get(url.format(), headers=headers).content\n",
    "    soup = BeautifulSoup(movies_html, 'html.parser')\n",
    "    soup_data = soup.find_all(\"tr\")\n",
    "    all_movies = []\n",
    "    for data in soup_data[1:]:\n",
    "        data_array = data.text.split('\\n')\n",
    "        try:\n",
    "            url = data.find_all('a')[0]\n",
    "            cast_data = get_cast(url)\n",
    "#             Saving summary data for V2\n",
    "#             summary_data = get_summary(url)\n",
    "            data_object = format_data(data_array)\n",
    "            data_object.update(cast_data)\n",
    "            all_movies.append(data_object)\n",
    "        except:\n",
    "            print('no report')\n",
    "    return all_movies\n",
    "    \n",
    "def get_summary(url):\n",
    "    url = 'https://www.the-numbers.com' + url.attrs['href']\n",
    "    headers = {'Accept-Language': 'en-US'}\n",
    "    movies_html = requests.get(url.format(), headers=headers).content\n",
    "    soup = BeautifulSoup(movies_html, 'html.parser')\n",
    "    soup_main = soup.find(\"div\", {\"id\": \"summary\"})\n",
    "    return \"coming soon\"\n",
    "\n",
    "def get_cast(url):\n",
    "    url = 'https://www.the-numbers.com' + url.attrs['href'].split(\"#\")[0]+\"#tab=cast-and-crew\"\n",
    "    headers = {'Accept-Language': 'en-US'}\n",
    "    movies_html = requests.get(url.format(), headers=headers).content\n",
    "    soup = BeautifulSoup(movies_html, 'html.parser')\n",
    "    soup_main = soup.find(\"div\", {\"id\": \"cast-and-crew\"})\n",
    "    soup_data = soup_main.find_all(\"div\", class_=\"cast_new\")\n",
    "    cast_data = {}\n",
    "    leads = []\n",
    "    supporting = []\n",
    "    production = []\n",
    "    for data in soup_data:\n",
    "        if 'Lead' in data.h1.text:\n",
    "            cast = data.find_all(\"tr\")\n",
    "            for castmember in cast:\n",
    "                leads.append(castmember.text.strip().split('\\n')[0])\n",
    "        if 'Supporting' in data.h1.text:\n",
    "            cast = data.find_all(\"tr\")\n",
    "            for castmember in cast:\n",
    "                supporting.append(castmember.text.strip().split('\\n')[0])\n",
    "        if 'Production' in data.h1.text:\n",
    "            cast = data.find_all(\"tr\")\n",
    "            for castmember in cast:\n",
    "                production.append({castmember.text.strip().split('\\n')[2]: castmember.text.strip().split('\\n')[0]})\n",
    "    cast_data.update({'star': leads[0]})\n",
    "    cast_data.update({'leads': leads})\n",
    "    cast_data.update({'supporting': supporting})\n",
    "    cast_data.update({'production': production})\n",
    "    return cast_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_TN_reports_script():\n",
    "    all_pages = []\n",
    "    for year in range(2000,2020):\n",
    "        results = get_report(year)\n",
    "        all_pages += results\n",
    "    pd.DataFrame(all_pages).to_csv('TN_reports_data.csv')\n",
    "\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
    "# # UNCOMMENT TO RUN <3 \n",
    "# run_TN_reports_script()\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE CLEANING & PREP\n",
    "##### Baby's First Lambda"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_merged_file(merged_file):\n",
    "    big_movies = pd.read_csv(merged_file, encoding = \"ISO-8859-1\")\n",
    "    big_movies_clean = pd.DataFrame({ \n",
    "        \"id\": big_movies['id'],\n",
    "        \"imdb_id\": big_movies['imdb_id'],\n",
    "        \"name\": big_movies['name'], \n",
    "        \"budget\": big_movies['budget'],\n",
    "        \"revenue\": big_movies['revenue'],\n",
    "        \"runtime\": big_movies['runtime'],\n",
    "        \"score\": big_movies['score'],\n",
    "        \"vote_count\": big_movies['vote_count'],\n",
    "        \"released\": big_movies['released'],\n",
    "        \"tagline\": big_movies['tagline'],\n",
    "        \"production_companies\": big_movies['production_companies'],\n",
    "        \"genres\": big_movies['genres']\n",
    "    })\n",
    "    return big_movies_clean\n",
    "\n",
    "def get_all_from_list(list_of_things, num, key_to_get):\n",
    "    if list_of_things == '[]':\n",
    "        return 'na'\n",
    "    else:\n",
    "        try:\n",
    "            return eval(list_of_things)[num][key_to_get]\n",
    "        except:\n",
    "            return eval(list_of_things)[0][key_to_get]\n",
    "\n",
    "# NOTE: This section only worked for some iterations of our data\n",
    "# A clear sign we must refactor!\n",
    "\n",
    "def widen_df(big_movies_clean):\n",
    "    # the slash at the end of the line is so we can split it into two lines\n",
    "    # PRODUCTION COMPANIES\n",
    "\n",
    "    big_movies_clean['production_company_1'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['production_companies'], 0, 'name'),axis=1)\n",
    "    big_movies_clean['production_company_2'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['production_companies'], 1, 'name'),axis=1)\n",
    "    big_movies_clean['production_company_3'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['production_companies'], 2, 'name'),axis=1)\n",
    "\n",
    "    # # GENRES\n",
    "    big_movies_clean['genre_1'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['genres'], 0, 'name'),axis=1)\n",
    "    big_movies_clean['genre_2'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['genres'], 1, 'name'),axis=1)\n",
    "    big_movies_clean['genre_3'] = big_movies.apply \\\n",
    "        (lambda x: get_all_from_list(x['genres'], 2, 'name'),axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_clean_file_script():\n",
    "    big_movies_clean = clean_merged_file(\"testing_first_merge.csv\")\n",
    "    big_movies_clean_v2 = widen_df(big_movies_clean)\n",
    "    big_movies_clean_v2.to_csv('big_movies_clean_v2.csv')\n",
    "    \n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
    "# # UNCOMMENT TO RUN <3 \n",
    "# run_clean_file_script()\n",
    "# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# =======================================================\n",
    "# PART 2: B - ANALYSIS \n",
    "# ======================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE LIBRARIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatchesphew"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE INITIAL EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>profit</th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.360000e+02</td>\n",
       "      <td>1.360000e+02</td>\n",
       "      <td>1.360000e+02</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>136.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.053109e+07</td>\n",
       "      <td>1.867990e+08</td>\n",
       "      <td>1.362679e+08</td>\n",
       "      <td>18.407463</td>\n",
       "      <td>6.507353</td>\n",
       "      <td>2017.992647</td>\n",
       "      <td>6.691176</td>\n",
       "      <td>15.316176</td>\n",
       "      <td>2017.933824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.611861e+07</td>\n",
       "      <td>3.136210e+08</td>\n",
       "      <td>2.714360e+08</td>\n",
       "      <td>9.142307</td>\n",
       "      <td>0.830317</td>\n",
       "      <td>2434.281047</td>\n",
       "      <td>3.463064</td>\n",
       "      <td>8.583966</td>\n",
       "      <td>0.862402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.581570e+05</td>\n",
       "      <td>4.537000e+03</td>\n",
       "      <td>-6.047735e+07</td>\n",
       "      <td>3.538000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.300000e+07</td>\n",
       "      <td>2.145820e+07</td>\n",
       "      <td>1.378588e+06</td>\n",
       "      <td>12.442000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>440.750000</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>2018.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000e+07</td>\n",
       "      <td>6.295402e+07</td>\n",
       "      <td>2.931490e+07</td>\n",
       "      <td>15.740500</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>1151.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2018.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.219255e+07</td>\n",
       "      <td>1.879769e+08</td>\n",
       "      <td>1.407841e+08</td>\n",
       "      <td>21.230250</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2522.500000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>2018.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000e+08</td>\n",
       "      <td>2.046240e+09</td>\n",
       "      <td>1.746240e+09</td>\n",
       "      <td>71.537000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>14913.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             budget       revenue        profit  popularity  vote_average  \\\n",
       "count  1.360000e+02  1.360000e+02  1.360000e+02  136.000000    136.000000   \n",
       "mean   5.053109e+07  1.867990e+08  1.362679e+08   18.407463      6.507353   \n",
       "std    5.611861e+07  3.136210e+08  2.714360e+08    9.142307      0.830317   \n",
       "min    2.581570e+05  4.537000e+03 -6.047735e+07    3.538000      4.000000   \n",
       "25%    1.300000e+07  2.145820e+07  1.378588e+06   12.442000      6.000000   \n",
       "50%    3.000000e+07  6.295402e+07  2.931490e+07   15.740500      6.500000   \n",
       "75%    6.219255e+07  1.879769e+08  1.407841e+08   21.230250      7.000000   \n",
       "max    3.000000e+08  2.046240e+09  1.746240e+09   71.537000      8.400000   \n",
       "\n",
       "         vote_count       month         day         year  \n",
       "count    136.000000  136.000000  136.000000   136.000000  \n",
       "mean    2017.992647    6.691176   15.316176  2017.933824  \n",
       "std     2434.281047    3.463064    8.583966     0.862402  \n",
       "min       12.000000    1.000000    1.000000  2008.000000  \n",
       "25%      440.750000    3.750000    7.750000  2018.000000  \n",
       "50%     1151.500000    7.000000   15.000000  2018.000000  \n",
       "75%     2522.500000   10.000000   22.000000  2018.000000  \n",
       "max    14913.000000   12.000000   31.000000  2019.000000  "
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ======================================================================\n",
    "# DOING EXPLORATORY DATA ANALYSIS ON A SMALL SUBSET (2018) OF THE DATA\n",
    "# ======================================================================\n",
    "\n",
    "# NOTE: The comments in this section are a nice melding of Ali practicality \n",
    "# and Kendra color. Please do not fault Ali for the bad puns and word play\n",
    "\n",
    "# -------------------------------------\n",
    "# BUT FIRST, WE PREP!!\n",
    "# -------------------------------------\n",
    "# STEP 1: readin' and cleanin'\n",
    "movies = pd.read_csv('2018_movies.csv')\n",
    "movies.head()\n",
    "movies.shape\n",
    "# just say nah to na \n",
    "# droping the first row of NaNs\n",
    "movies = movies.drop([0,])\n",
    "movies.shape\n",
    "# dropping na and NaN in place\n",
    "movies.dropna(inplace = True)\n",
    "\n",
    "# STEP 2: droppin' and removin'\n",
    "# say bye bye to those without budget\n",
    "# (removing movies without the information we need)\n",
    "index_names = movies[movies[\"budget\"] == 0].index\n",
    "# We can see that 325 movies in our df have a budget of 0 dollars... \n",
    "# We have to drop these movies \n",
    "index_names\n",
    "# Repeating above... but with revenue\n",
    "movies.drop(index_names, inplace = True)\n",
    "index_names = movies[movies[\"revenue\"] == 0].index\n",
    "movies.drop(index_names, inplace = True)\n",
    "\n",
    "# STEP 3: formattin' and finessin'\n",
    "# Type-casting isn't just for Hollywood \n",
    "# Checking to see the data type for the release_date column \n",
    "movies.release_date.dtype\n",
    "#It shows that it is saved as an object, we want to convert this to date format\n",
    "#Changing the data type to date by using the pd_to_datetime function, this will allow us to extract each element of the date\n",
    "movies[\"release_date\"] = pd.to_datetime(movies[\"release_date\"])\n",
    "#now we want to extract the month, day, and year and create new columns named month, day and year \n",
    "movies[\"month\"], movies[\"day\"], movies[\"year\"] = movies[\"release_date\"].dt.month, movies[\"release_date\"].dt.day, movies[\"release_date\"].dt.year\n",
    "\n",
    "# STEP 4: surmisin' and summarisin'\n",
    "# Getting summary statistics for our df \n",
    "movies.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's interesting to note that the lowest budget for a movie in our df is only 258,157 and the maximum budget is 300,000,000. The lowest revenue is 4,537. The maximum revenue is 2,046,240,000. This is a massive revenue. We aggregated a profit column and the minimum profit is - 60,477,350 and maximum profit is 1,746,240,000. This is a massive profit. Their is a large range in popularity scores. The maximum popularity score is 71.54 and the minimum is 3.54. The mean popularity is 18.4 and 75% of the movies have a popularity score less than 21.2. This makes us question if the maximum popularity score might be an error, or it might correspond to the movie with the highest profit. We should investigate what movie this score references. The vote_average column has a range of 4 - 8.4, with an average of 6.5. The vote_count has a maximum of 14,913. This might reference the same movie that had the largest popularity. The max value in this column, also appears to be an outlier, as 75% of the movies have less than 2151 votes and the average vote count is 1701"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.360000e+02\n",
       "mean     5.053109e+07\n",
       "std      5.611861e+07\n",
       "min      2.581570e+05\n",
       "25%      1.300000e+07\n",
       "50%      3.000000e+07\n",
       "75%      6.219255e+07\n",
       "max      3.000000e+08\n",
       "Name: budget, dtype: float64"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# STEP 5: column creatin'\n",
    "#We have decided that we want to aggregate a percent profit column as well, in an attempt to normalize the data \n",
    "#To do this we are diving the profit column by the budget column and multiply the result by 100 and saving it in a \n",
    "#new column named percent_profit\n",
    "movies[\"percent_profit\"] = movies[\"profit\"]/movies[\"budget\"]*100\n",
    "# Saving a column as-is for future use\n",
    "movies_original_df = movies\n",
    "movies.budget.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we are going to discretize the budget column. \n",
    "We are discretizing the budget column into four groups: extremely_low, low, high and extremely_high. To do this we first \n",
    "need to create a list of the categories\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "categories = [\"extremely_low\", \"low\", \"high\", \"extremely_high\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to show where we want to insert the breaks. We have decided that extremely low budgets are budgets less \n",
    "than 13,000,000, low have budgets between 13,000,000 and 30,000,000, high have budgets between 30,000,000 and \n",
    "62,192,550, and extremely_high have budgets between 62,192,550 and 300,000,000. We chose the values based on the \n",
    "quartiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the movies df as movies_discretized_df \n",
    "movies_discretized_df = movies\n",
    "#Discretizing the budget columns using the cut function from pandas\n",
    "movies_discretized_df[\"budget\"] = pd.cut(movies_discretized_df[\"budget\"], [0, 13000000, 30000000, 62192550, 300000001], labels = categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.360000e+02\n",
       "mean     1.867990e+08\n",
       "std      3.136210e+08\n",
       "min      4.537000e+03\n",
       "25%      2.145820e+07\n",
       "50%      6.295402e+07\n",
       "75%      1.879769e+08\n",
       "max      2.046240e+09\n",
       "Name: revenue, dtype: float64"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we are going to repeat the steps to discretize the revenue column \n",
    "movies_discretized_df.revenue.describe()\n",
    "#We are using the same categories as above "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`extremely_low` revenue are revenues less than 21,458,200, `low` are revenues between 21,458,200 and \n",
    "62,954,020, `high` revenues are revenues between 62,954,020 and 187,976,900, and `extremely_high` revenues between \n",
    "187,976,900 and 2,046,240,000. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.360000e+02\n",
       "mean     1.362679e+08\n",
       "std      2.714360e+08\n",
       "min     -6.047735e+07\n",
       "25%      1.378588e+06\n",
       "50%      2.931490e+07\n",
       "75%      1.407841e+08\n",
       "max      1.746240e+09\n",
       "Name: profit, dtype: float64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_discretized_df[\"revenue\"] = pd.cut(movies_discretized_df[\"revenue\"], [0, 21458200, 62954020, 187976900, 2046240001], labels = categories)\n",
    "#Now we are going to repeat the steps to discretized the profit column\n",
    "movies_discretized_df.profit.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.360000e+02\n",
       "mean     1.362679e+08\n",
       "std      2.714360e+08\n",
       "min     -6.047735e+07\n",
       "25%      1.378588e+06\n",
       "50%      2.931490e+07\n",
       "75%      1.407841e+08\n",
       "max      1.746240e+09\n",
       "Name: profit, dtype: float64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we are going to repeat the steps to discretized the profit column\n",
    "movies_discretized_df.profit.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CategoricalDtype(categories=['negative', 'low', 'high', 'extremely_high'], ordered=True)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''negative profit  are profits less than $0, low profits are profits between $0 and \n",
    "$29,314,900, high profits are profits between $29,314,900 and $140,784,100, and extremely_high profits between \n",
    "$140,784,100 and $1,746,240,001. \n",
    "'''\n",
    "categories = [\"negative\", \"low\", \"high\", \"extremely_high\"]\n",
    "movies_discretized_df[\"profit\"] = pd.cut(movies_discretized_df[\"profit\"], [-60477351, 0, 29314900, 140784100, 1746240001], labels = categories)\n",
    "movies_discretized_df.profit.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    extremely_high\n",
       "3    extremely_high\n",
       "4    extremely_high\n",
       "6    extremely_high\n",
       "8    extremely_high\n",
       "Name: popularity, dtype: category\n",
       "Categories (4, object): [extremely_low < low < high < extremely_high]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we are going to repeat the steps to discretize the popularity column \n",
    "movies_discretized_df.popularity.describe()\n",
    "categories = [\"extremely_low\", \"low\", \"high\", \"extremely_high\"]\n",
    "'''extremely_low popularity are popularities less than 12.442, low popularities are popularities between 12.442 and \n",
    "15.7405, high popularity are popularities between 15.7405 and 21.23025 and extremely_high popularity between 21.23025\n",
    "and 71.538'''\n",
    "movies_discretized_df[\"popularity\"] = pd.cut(movies_discretized_df[\"popularity\"], [0, 12.442, 15.7405, 21.23025, 71.538], labels = categories)\n",
    "movies_discretized_df[\"popularity\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1              high\n",
       "3    extremely_high\n",
       "4    extremely_high\n",
       "6    extremely_high\n",
       "8              high\n",
       "Name: vote_average, dtype: category\n",
       "Categories (4, object): [extremely_low < low < high < extremely_high]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we are going to repeat the steps to discretize the vote avg \n",
    "movies_discretized_df.vote_average.describe()\n",
    "#We are using the same categories as above \n",
    "'''extremely_low vote_average  are vote averages less than 6, low are between 6 to 6.5, high between 6.5 and 7 and \n",
    "extremely_high 7 and 8.5'''\n",
    "movies_discretized_df[\"vote_average\"] = pd.cut(movies_discretized_df[\"vote_average\"], [0, 6, 6.5, 7, 8.5], labels = categories)\n",
    "movies_discretized_df[\"vote_average\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    extremely_high\n",
       "3    extremely_high\n",
       "4    extremely_high\n",
       "6    extremely_high\n",
       "8    extremely_high\n",
       "Name: vote_count, dtype: category\n",
       "Categories (4, object): [extremely_low < low < high < extremely_high]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We are using the same categories as above \n",
    "'''extremely_low vote counts are vote counts less than 440, low are between 440 and 1151, high are between 1151 and 2522 \n",
    "and extremely_high are between 2522 and 14913'''\n",
    "movies_discretized_df[\"vote_count\"] = pd.cut(movies_discretized_df[\"vote_count\"], [0, 440, 1151, 2522, 14914], labels = categories)\n",
    "movies_discretized_df[\"vote_count\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    136.000000\n",
       "mean      15.316176\n",
       "std        8.583966\n",
       "min        1.000000\n",
       "25%        7.750000\n",
       "50%       15.000000\n",
       "75%       22.000000\n",
       "max       31.000000\n",
       "Name: day, dtype: float64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_discretized_df.percent_profit.describe()\n",
    "'''extremely_low are percent profits between -100 and 0, low between 6.5 and 108, high between 108 and 436 and \n",
    "extremely_high between 436 and 6527'''\n",
    "categories = [\"negative\", \"low\", \"high\", \"extremely_high\"]\n",
    "movies_discretized_df[\"percent_profit\"] = pd.cut(movies_discretized_df[\"percent_profit\"], [-100, 0, 108, 436, 6528], labels = categories )\n",
    "movies_discretized_df[\"percent_profit\"]\n",
    "movies_discretized_df.day.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>budget</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>revenue</th>\n",
       "      <th>profit</th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th>week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aquaman</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Spider-Man: Into the Spider-Verse</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>high</td>\n",
       "      <td>week_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bohemian Rhapsody</td>\n",
       "      <td>high</td>\n",
       "      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...</td>\n",
       "      <td>[{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>10</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 28, '...</td>\n",
       "      <td>[{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>4</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hereditary</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>[{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...</td>\n",
       "      <td>[{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title          budget  \\\n",
       "1                            Aquaman  extremely_high   \n",
       "3  Spider-Man: Into the Spider-Verse  extremely_high   \n",
       "4                  Bohemian Rhapsody            high   \n",
       "6             Avengers: Infinity War  extremely_high   \n",
       "8                         Hereditary   extremely_low   \n",
       "\n",
       "                                              genres  \\\n",
       "1  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "3  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "4  [{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...   \n",
       "6  [{'id': 12, 'name': 'Adventure'}, {'id': 28, '...   \n",
       "8  [{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...   \n",
       "\n",
       "                                production_companies         revenue  \\\n",
       "1  [{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...  extremely_high   \n",
       "3  [{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...  extremely_high   \n",
       "4  [{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...  extremely_high   \n",
       "6  [{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...  extremely_high   \n",
       "8  [{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...            high   \n",
       "\n",
       "           profit      popularity    vote_average      vote_count  month  \\\n",
       "1  extremely_high  extremely_high            high  extremely_high     12   \n",
       "3  extremely_high  extremely_high  extremely_high  extremely_high     12   \n",
       "4  extremely_high  extremely_high  extremely_high  extremely_high     10   \n",
       "6  extremely_high  extremely_high  extremely_high  extremely_high      4   \n",
       "8            high  extremely_high            high  extremely_high      6   \n",
       "\n",
       "   year  percent_profit    week  \n",
       "1  2018  extremely_high  week_1  \n",
       "3  2018            high  week_1  \n",
       "4  2018  extremely_high  week_4  \n",
       "6  2018  extremely_high  week_4  \n",
       "8  2018  extremely_high  week_1  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We are setting new categories for the day column by creating a new column for week \n",
    "'''week_1 is the first 7 days of the month, week_2 is days 8 - 14, week_3 is days 15 - 21, and week_4 are the \n",
    "rest of the days'''\n",
    "categories = [\"week_1\", \"week_2\", \"week_3\", \"week_4\"]\n",
    "\n",
    "movies_discretized_df[\"week\"] = pd.cut(movies_discretized_df[\"day\"], [0, 8, 15, 22, 32], labels = categories)\n",
    "movies_discretized_df.head()\n",
    "#We have successfully discretized the df, now we can remove the day and release_date column \n",
    "movies_discretized_df.drop(columns=['day', 'release_date'], inplace = True)\n",
    "#Checking to make sure that it worked\n",
    "movies_discretized_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">extremely_low</th>\n",
       "      <th>negative</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">low</th>\n",
       "      <th>negative</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">high</th>\n",
       "      <th>negative</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">extremely_high</th>\n",
       "      <th>negative</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               counts\n",
       "budget         percent_profit        \n",
       "extremely_low  negative             7\n",
       "               low                  8\n",
       "               high                 5\n",
       "               extremely_high      15\n",
       "low            negative             9\n",
       "               low                 12\n",
       "               high                 8\n",
       "               extremely_high       6\n",
       "high           negative            11\n",
       "               low                 10\n",
       "               high                 6\n",
       "               extremely_high       5\n",
       "extremely_high negative             2\n",
       "               low                  9\n",
       "               high                15\n",
       "               extremely_high       8"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question 1: \n",
    "    #How are the amounts of percent_profits distributed across budget levels? \n",
    "\n",
    "'''We want to compare the budget category percentage make up for each percent_profit level. To do this we need to \n",
    "get the count for each budget level, the count for each percent_profit level by budget level and then divide \n",
    "the count of the percent_profit/count of budget level and multiply by 100. We have to do this for each \n",
    "budget level and level of percent_profits. We think that we could potentially answer this question by group bys.'''\n",
    "movies_discretized_count = movies_discretized_df.groupby([\"budget\", \"percent_profit\"])[\"budget\"].count()\n",
    "'''Taking the output from the line above and converting it to a data frame. We are using pandas, which we important as pd. \n",
    "First, we call the package we are using then the function from that package and then what we want to run the function on.\n",
    "pd.function(item to use). We are using the DataFrame function from the pandas package on the series created by our group by'''\n",
    "movies_discretized_count_df = pd.DataFrame(movies_discretized_count)\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df\n",
    "#Changing the column name from budget to counts\n",
    "movies_discretized_count_df.columns = [\"counts\"]\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>budget_category</th>\n",
       "      <th>percent_profit_category</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">extremely_low</th>\n",
       "      <th>negative</th>\n",
       "      <td>7</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>5</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">low</th>\n",
       "      <th>negative</th>\n",
       "      <td>9</td>\n",
       "      <td>low</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>12</td>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>8</td>\n",
       "      <td>low</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>6</td>\n",
       "      <td>low</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">high</th>\n",
       "      <th>negative</th>\n",
       "      <td>11</td>\n",
       "      <td>high</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>10</td>\n",
       "      <td>high</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>6</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>5</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">extremely_high</th>\n",
       "      <th>negative</th>\n",
       "      <td>2</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>9</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               counts budget_category percent_profit_category\n",
       "budget         percent_profit                                                \n",
       "extremely_low  negative             7   extremely_low                negative\n",
       "               low                  8   extremely_low                     low\n",
       "               high                 5   extremely_low                    high\n",
       "               extremely_high      15   extremely_low          extremely_high\n",
       "low            negative             9             low                negative\n",
       "               low                 12             low                     low\n",
       "               high                 8             low                    high\n",
       "               extremely_high       6             low          extremely_high\n",
       "high           negative            11            high                negative\n",
       "               low                 10            high                     low\n",
       "               high                 6            high                    high\n",
       "               extremely_high       5            high          extremely_high\n",
       "extremely_high negative             2  extremely_high                negative\n",
       "               low                  9  extremely_high                     low\n",
       "               high                15  extremely_high                    high\n",
       "               extremely_high       8  extremely_high          extremely_high"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We want to get a total count for the number of percent_profit counts for each budget level. We will experiment to see how this is possible \n",
    "'''This shows that we have 2 indexes budget and percent_profit... We want to create columns from each index\n",
    "We are creating a new column named budget by extracting the values from the first index (0) which is the budget\n",
    "index'''\n",
    "movies_discretized_count_df[\"budget_category\"]=movies_discretized_count_df.index.get_level_values(0)\n",
    "#We are creating a new column named total_donations by extracting the values from the second index (1) which is total_donations\n",
    "movies_discretized_count_df[\"percent_profit_category\"] = movies_discretized_count_df.index.get_level_values(1)\n",
    "#Checking to make sure it worked... \n",
    "movies_discretized_count_df\n",
    "#It did! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>budget_category</th>\n",
       "      <th>percent_profit_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>low</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12</td>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>low</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>low</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11</td>\n",
       "      <td>high</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>high</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>6</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    counts budget_category percent_profit_category\n",
       "0        7   extremely_low                negative\n",
       "1        8   extremely_low                     low\n",
       "2        5   extremely_low                    high\n",
       "3       15   extremely_low          extremely_high\n",
       "4        9             low                negative\n",
       "5       12             low                     low\n",
       "6        8             low                    high\n",
       "7        6             low          extremely_high\n",
       "8       11            high                negative\n",
       "9       10            high                     low\n",
       "10       6            high                    high\n",
       "11       5            high          extremely_high\n",
       "12       2  extremely_high                negative\n",
       "13       9  extremely_high                     low\n",
       "14      15  extremely_high                    high\n",
       "15       8  extremely_high          extremely_high"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we want to remove the indexes so, we can create a new group by to get the sum of the counts for each group \n",
    "#To do this we are using the reset_index(drop = True) This will drop our group by indexes and allow us to create a new one. \n",
    "movies_discretized_count_df = movies_discretized_count_df.reset_index(drop = True)\n",
    "movies_discretized_count_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "budget_category\n",
       "extremely_low     35\n",
       "low               35\n",
       "high              32\n",
       "extremely_high    34\n",
       "Name: counts, dtype: int64"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we are getting the sum of each budget category. \n",
    "budget_discretized_count_df = movies_discretized_count_df.groupby([\"budget_category\"])[\"counts\"].sum()\n",
    "#Checking the results\n",
    "budget_discretized_count_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>budget_category</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>budget_category_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>negative</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>low</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>high</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>low</td>\n",
       "      <td>negative</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12</td>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>low</td>\n",
       "      <td>high</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>low</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11</td>\n",
       "      <td>high</td>\n",
       "      <td>negative</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>high</td>\n",
       "      <td>low</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>6</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>negative</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>low</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    counts budget_category percent_profit_category  budget_category_count\n",
       "0        7   extremely_low                negative                     35\n",
       "1        8   extremely_low                     low                     35\n",
       "2        5   extremely_low                    high                     35\n",
       "3       15   extremely_low          extremely_high                     35\n",
       "4        9             low                negative                     35\n",
       "5       12             low                     low                     35\n",
       "6        8             low                    high                     35\n",
       "7        6             low          extremely_high                     35\n",
       "8       11            high                negative                     32\n",
       "9       10            high                     low                     32\n",
       "10       6            high                    high                     32\n",
       "11       5            high          extremely_high                     32\n",
       "12       2  extremely_high                negative                     34\n",
       "13       9  extremely_high                     low                     34\n",
       "14      15  extremely_high                    high                     34\n",
       "15       8  extremely_high          extremely_high                     34"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''We ultimately want a column that contains the total counts for each budget group. We are probably doing this in \n",
    "a roundabout way, but as I am extremely new to python this is the best way I can think of doing it. We are going to create \n",
    "a new column that replicates the income_level called income_level_count and then we will use the replace function to \n",
    "replace the 1s with their total count, the 2s with their total count... '''\n",
    "#First, replicating the income level column in a column named budget_category_count\n",
    "movies_discretized_count_df[\"budget_category_count\"] = movies_discretized_count_df[\"budget_category\"] \n",
    "#Now replacing the income level with the total count for each income level \n",
    "movies_discretized_count_df[\"budget_category_count\"] = movies_discretized_count_df[\"budget_category_count\"].replace([\"extremely_low\"], 35)\n",
    "movies_discretized_count_df[\"budget_category_count\"] = movies_discretized_count_df[\"budget_category_count\"].replace([\"low\"], 35)\n",
    "movies_discretized_count_df[\"budget_category_count\"] = movies_discretized_count_df[\"budget_category_count\"].replace([\"high\"], 32)\n",
    "movies_discretized_count_df[\"budget_category_count\"] = movies_discretized_count_df[\"budget_category_count\"].replace([\"extremely_high\"], 34)\n",
    "#Checking to see if that worked: \n",
    "movies_discretized_count_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>budget_category</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>budget_category_count</th>\n",
       "      <th>percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>negative</td>\n",
       "      <td>35</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>low</td>\n",
       "      <td>35</td>\n",
       "      <td>22.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>high</td>\n",
       "      <td>35</td>\n",
       "      <td>14.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>35</td>\n",
       "      <td>42.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>low</td>\n",
       "      <td>negative</td>\n",
       "      <td>35</td>\n",
       "      <td>25.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12</td>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>35</td>\n",
       "      <td>34.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>low</td>\n",
       "      <td>high</td>\n",
       "      <td>35</td>\n",
       "      <td>22.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>low</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>35</td>\n",
       "      <td>17.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11</td>\n",
       "      <td>high</td>\n",
       "      <td>negative</td>\n",
       "      <td>32</td>\n",
       "      <td>34.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>high</td>\n",
       "      <td>low</td>\n",
       "      <td>32</td>\n",
       "      <td>31.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>6</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>32</td>\n",
       "      <td>18.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>32</td>\n",
       "      <td>15.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>negative</td>\n",
       "      <td>34</td>\n",
       "      <td>5.882353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>low</td>\n",
       "      <td>34</td>\n",
       "      <td>26.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>34</td>\n",
       "      <td>44.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>34</td>\n",
       "      <td>23.529412</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    counts budget_category percent_profit_category  budget_category_count  \\\n",
       "0        7   extremely_low                negative                     35   \n",
       "1        8   extremely_low                     low                     35   \n",
       "2        5   extremely_low                    high                     35   \n",
       "3       15   extremely_low          extremely_high                     35   \n",
       "4        9             low                negative                     35   \n",
       "5       12             low                     low                     35   \n",
       "6        8             low                    high                     35   \n",
       "7        6             low          extremely_high                     35   \n",
       "8       11            high                negative                     32   \n",
       "9       10            high                     low                     32   \n",
       "10       6            high                    high                     32   \n",
       "11       5            high          extremely_high                     32   \n",
       "12       2  extremely_high                negative                     34   \n",
       "13       9  extremely_high                     low                     34   \n",
       "14      15  extremely_high                    high                     34   \n",
       "15       8  extremely_high          extremely_high                     34   \n",
       "\n",
       "      percent  \n",
       "0   20.000000  \n",
       "1   22.857143  \n",
       "2   14.285714  \n",
       "3   42.857143  \n",
       "4   25.714286  \n",
       "5   34.285714  \n",
       "6   22.857143  \n",
       "7   17.142857  \n",
       "8   34.375000  \n",
       "9   31.250000  \n",
       "10  18.750000  \n",
       "11  15.625000  \n",
       "12   5.882353  \n",
       "13  26.470588  \n",
       "14  44.117647  \n",
       "15  23.529412  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Okay, we are one step closer... Now, we need to create a column that takes the counts/budget_category_counts * 100 \n",
    "movies_discretized_count_df[\"percent\"] = movies_discretized_count_df[\"counts\"]/movies_discretized_count_df[\"budget_category_count\"] *100\n",
    "#Looking at our data frame... It worked!!! \n",
    "movies_discretized_count_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11ed42c88>"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We no longer need the count columns\n",
    "movies_discretized_count_df.drop([\"counts\", \"budget_category_count\"], axis = 1, inplace = True ) \n",
    "'''Attempting to graph this data using a grouped bar chart: \n",
    "formula: df.pivot(columns, group, values).plot(kind = \"type of graph\", color = [\"color to use, can be a list of colors\"], \n",
    "title = \"you can set the title of your graph here\")'''\n",
    "graph = movies_discretized_count_df.pivot(\"budget_category\", \"percent_profit_category\", \n",
    "                                                \"percent\").plot(kind=\"bar\", color = [\"crimson\", \"salmon\", \"palegreen\", \"darkgreen\"], \n",
    "                                                               title = \"Percent of Percent Profit to Budget Category\")\n",
    "#Changing the y label of our graph to Percent\n",
    "plt.ylabel(\"Percent\")\n",
    "#Changing the x axis label of our graph to Budget Category \n",
    "plt.xlabel(\"Budget Category\")\n",
    "#Making it so the tick labels are not angled \n",
    "plt.xticks(rotation = 0)\n",
    "#How to change the tick labels (we ended up not needing this, but want to keep for future reference)\n",
    "#plt.Axes.set_xticklabels(graph, labels = ['extremely low', 'low', 'high', 'extremely high'])\n",
    "#moving the legend position to underneath the graph, also setting it to have 4 columns so the legend is in a \n",
    "#straight single line and adding a legend title\n",
    "plt.legend( loc = \"lower center\", bbox_to_anchor = (.5, -.4), ncol = 4, title = \"Percent Profit Category\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This graph proved very interesting. Movies with an extremely low budget have the highest percentage make-up of making an extremely \n",
    "high percent profit. Movies with an extremely high budget are the most likely to be profitable overall, being that they \n",
    "are the least likely to have a negative profit, with only 5.9% of the movies classified as having an extremely high \n",
    "budget in our dataset made a negative profit. Movies with an low or high budget only make an extremely high \n",
    "percent profit less than 17.1% and 15.6% of the time respectively. They also have the highest chance of making a low or \n",
    "negative profit out of all of the budget categories. Based, on this analysis, percent profits are not uniformally \n",
    "distributed across budget levels. Movies with an extremely high budget are the least likely to have a negative percent \n",
    "profit. Movies with an extremely low budget are the most likely to have an extremely high percent profit. Our \n",
    "recommendation to studios, would be to either have a extremely low or extremely high budget and to veer away from \n",
    "productions with an extremely low or high budget. Further analysis for tighter recommendatios is needed.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question: Do big name production companies impact the percent profit? \n",
    "\n",
    "#To answer this question we are first going to create a for loop that will loop through the production_companies column \n",
    "#in order movies_discretized_df and store the production company in a list called production_company. The only issue \n",
    "#with this method, is that if a movie has more than one production company this will not be shown and only the last \n",
    "#company included in the for loop will be given credit. \n",
    "\n",
    "production_company = []\n",
    "for movie in movies_discretized_df['production_companies']:\n",
    "    if \"Universal\" in movie:\n",
    "        production_company.append(\"Universal\")\n",
    "    elif \"Sony\" in movie: \n",
    "        production_company.append(\"Sony\")\n",
    "    elif \"Fox\" in movie: \n",
    "        production_company.append(\"Fox\")\n",
    "    elif \"DreamWorks\" in movie: \n",
    "        production_company.append(\"DW\")\n",
    "    elif \"MGM\" in movie: \n",
    "        production_company.append(\"MGM\")\n",
    "    elif \"Paramount\" in movie: \n",
    "        production_company.append(\"Paramount\")\n",
    "    elif \"Disney\" in movie: \n",
    "        production_company.append(\"Disney\")\n",
    "    elif \"Warner Bros\" in movie:\n",
    "        production_company.append(\"WB\")\n",
    "    else:\n",
    "        production_company.append(\"None\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>budget</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>revenue</th>\n",
       "      <th>profit</th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th>week</th>\n",
       "      <th>main_production_co</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aquaman</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>WB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Spider-Man: Into the Spider-Verse</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>Sony</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bohemian Rhapsody</td>\n",
       "      <td>high</td>\n",
       "      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...</td>\n",
       "      <td>[{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>10</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "      <td>Fox</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 28, '...</td>\n",
       "      <td>[{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>4</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hereditary</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>[{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...</td>\n",
       "      <td>[{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title          budget  \\\n",
       "1                            Aquaman  extremely_high   \n",
       "3  Spider-Man: Into the Spider-Verse  extremely_high   \n",
       "4                  Bohemian Rhapsody            high   \n",
       "6             Avengers: Infinity War  extremely_high   \n",
       "8                         Hereditary   extremely_low   \n",
       "\n",
       "                                              genres  \\\n",
       "1  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "3  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "4  [{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...   \n",
       "6  [{'id': 12, 'name': 'Adventure'}, {'id': 28, '...   \n",
       "8  [{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...   \n",
       "\n",
       "                                production_companies         revenue  \\\n",
       "1  [{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...  extremely_high   \n",
       "3  [{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...  extremely_high   \n",
       "4  [{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...  extremely_high   \n",
       "6  [{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...  extremely_high   \n",
       "8  [{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...            high   \n",
       "\n",
       "           profit      popularity    vote_average      vote_count  month  \\\n",
       "1  extremely_high  extremely_high            high  extremely_high     12   \n",
       "3  extremely_high  extremely_high  extremely_high  extremely_high     12   \n",
       "4  extremely_high  extremely_high  extremely_high  extremely_high     10   \n",
       "6  extremely_high  extremely_high  extremely_high  extremely_high      4   \n",
       "8            high  extremely_high            high  extremely_high      6   \n",
       "\n",
       "   year  percent_profit    week main_production_co  \n",
       "1  2018  extremely_high  week_1                 WB  \n",
       "3  2018            high  week_1               Sony  \n",
       "4  2018  extremely_high  week_4                Fox  \n",
       "6  2018  extremely_high  week_4               None  \n",
       "8  2018  extremely_high  week_1               None  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_discretized_df[\"main_production_co\"] = production_company\n",
    "movies_discretized_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_production_co</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DW</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Disney</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   counts\n",
       "main_production_co percent_profit        \n",
       "DW                 negative             1\n",
       "Disney             negative             1\n",
       "                   low                  3\n",
       "                   high                 2\n",
       "                   extremely_high       2"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we want to group by production company and percent profit \n",
    "'''We want to compare the production company percentage make up for each percent_profit level. To do this we need to \n",
    "get the count for each production company, the count for each percent_profit level by production company and then divide \n",
    "the count of the percent_profit/count of production company and multiply by 100. We have to do this for each \n",
    "production company and level of percent_profits. We think that we could potentially answer this question by group bys.'''\n",
    "movies_discretized_count_q2 = movies_discretized_df.groupby([\"main_production_co\", \"percent_profit\"])[\"main_production_co\"].count()\n",
    "'''Taking the output from the line above and converting it to a data frame. We are using pandas, which we important as pd. \n",
    "First, we call the package we are using then the function from that package and then what we want to run the function on.\n",
    "pd.function(item to use). We are using the DataFrame function from the pandas package on the series created by our group by'''\n",
    "movies_discretized_count_df_q2 = pd.DataFrame(movies_discretized_count_q2)\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df_q2\n",
    "#Changing the column name from budget to counts\n",
    "movies_discretized_count_df_q2.columns = [\"counts\"]\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df_q2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>production_company</th>\n",
       "      <th>percent_profit_category</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_production_co</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DW</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "      <td>DW</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Disney</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "      <td>Disney</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>3</td>\n",
       "      <td>Disney</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Fox</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "      <td>Fox</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>4</td>\n",
       "      <td>Fox</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">None</th>\n",
       "      <th>negative</th>\n",
       "      <td>22</td>\n",
       "      <td>None</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>17</td>\n",
       "      <td>None</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>13</td>\n",
       "      <td>None</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>14</td>\n",
       "      <td>None</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Paramount</th>\n",
       "      <th>negative</th>\n",
       "      <td>2</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>4</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>2</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>1</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Sony</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "      <td>Sony</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>3</td>\n",
       "      <td>Sony</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>2</td>\n",
       "      <td>Sony</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>2</td>\n",
       "      <td>Sony</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Universal</th>\n",
       "      <th>negative</th>\n",
       "      <td>1</td>\n",
       "      <td>Universal</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>6</td>\n",
       "      <td>Universal</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>4</td>\n",
       "      <td>Universal</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>9</td>\n",
       "      <td>Universal</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">WB</th>\n",
       "      <th>low</th>\n",
       "      <td>2</td>\n",
       "      <td>WB</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>8</td>\n",
       "      <td>WB</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>3</td>\n",
       "      <td>WB</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   counts production_company  \\\n",
       "main_production_co percent_profit                              \n",
       "DW                 negative             1                 DW   \n",
       "Disney             negative             1             Disney   \n",
       "                   low                  3             Disney   \n",
       "                   high                 2             Disney   \n",
       "                   extremely_high       2             Disney   \n",
       "Fox                negative             1                Fox   \n",
       "                   low                  4                Fox   \n",
       "                   high                 3                Fox   \n",
       "                   extremely_high       3                Fox   \n",
       "None               negative            22               None   \n",
       "                   low                 17               None   \n",
       "                   high                13               None   \n",
       "                   extremely_high      14               None   \n",
       "Paramount          negative             2          Paramount   \n",
       "                   low                  4          Paramount   \n",
       "                   high                 2          Paramount   \n",
       "                   extremely_high       1          Paramount   \n",
       "Sony               negative             1               Sony   \n",
       "                   low                  3               Sony   \n",
       "                   high                 2               Sony   \n",
       "                   extremely_high       2               Sony   \n",
       "Universal          negative             1          Universal   \n",
       "                   low                  6          Universal   \n",
       "                   high                 4          Universal   \n",
       "                   extremely_high       9          Universal   \n",
       "WB                 low                  2                 WB   \n",
       "                   high                 8                 WB   \n",
       "                   extremely_high       3                 WB   \n",
       "\n",
       "                                  percent_profit_category  \n",
       "main_production_co percent_profit                          \n",
       "DW                 negative                      negative  \n",
       "Disney             negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "Fox                negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "None               negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "Paramount          negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "Sony               negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "Universal          negative                      negative  \n",
       "                   low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  \n",
       "WB                 low                                low  \n",
       "                   high                              high  \n",
       "                   extremely_high          extremely_high  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We want to get a total count for the number of percent_profit counts for each production company.\n",
    "'''This shows that we have 2 indexes budget and percent_profit... We want to create columns from each index\n",
    "We are creating a new column named budget by extracting the values from the first index (0) which is the budget\n",
    "index'''\n",
    "movies_discretized_count_df_q2[\"production_company\"]=movies_discretized_count_df_q2.index.get_level_values(0)\n",
    "#We are creating a new column named total_donations by extracting the values from the second index (1) which is total_donations\n",
    "movies_discretized_count_df_q2[\"percent_profit_category\"] = movies_discretized_count_df_q2.index.get_level_values(1)\n",
    "#Checking to make sure it worked... \n",
    "movies_discretized_count_df_q2\n",
    "#It did! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "production_company\n",
       "DW            1\n",
       "Disney        8\n",
       "Fox          11\n",
       "None         66\n",
       "Paramount     9\n",
       "Sony          8\n",
       "Universal    20\n",
       "WB           13\n",
       "Name: counts, dtype: int64"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we want to remove the indexes so, we can create a new group by to get the sum of the counts for each group \n",
    "#To do this we are using the reset_index(drop = True) This will drop our group by indexes and allow us to create a new one. \n",
    "movies_discretized_count_df_q2 = movies_discretized_count_df_q2.reset_index(drop = True)\n",
    "#Now we are getting the sum of each production company category. \n",
    "production_company_discretized_count_df_q2 = movies_discretized_count_df_q2.groupby([\"production_company\"])[\"counts\"].sum()\n",
    "#Checking the results\n",
    "production_company_discretized_count_df_q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>production_company</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>production_company_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DW</td>\n",
       "      <td>negative</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Disney</td>\n",
       "      <td>negative</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Disney</td>\n",
       "      <td>low</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>high</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>Fox</td>\n",
       "      <td>negative</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>Fox</td>\n",
       "      <td>low</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>high</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>22</td>\n",
       "      <td>None</td>\n",
       "      <td>negative</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>17</td>\n",
       "      <td>None</td>\n",
       "      <td>low</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>13</td>\n",
       "      <td>None</td>\n",
       "      <td>high</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14</td>\n",
       "      <td>None</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>negative</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>low</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>high</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1</td>\n",
       "      <td>Paramount</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>Sony</td>\n",
       "      <td>negative</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>3</td>\n",
       "      <td>Sony</td>\n",
       "      <td>low</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2</td>\n",
       "      <td>Sony</td>\n",
       "      <td>high</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2</td>\n",
       "      <td>Sony</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1</td>\n",
       "      <td>Universal</td>\n",
       "      <td>negative</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>6</td>\n",
       "      <td>Universal</td>\n",
       "      <td>low</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4</td>\n",
       "      <td>Universal</td>\n",
       "      <td>high</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>9</td>\n",
       "      <td>Universal</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2</td>\n",
       "      <td>WB</td>\n",
       "      <td>low</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>8</td>\n",
       "      <td>WB</td>\n",
       "      <td>high</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>3</td>\n",
       "      <td>WB</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    counts production_company percent_profit_category  \\\n",
       "0        1                 DW                negative   \n",
       "1        1             Disney                negative   \n",
       "2        3             Disney                     low   \n",
       "3        2             Disney                    high   \n",
       "4        2             Disney          extremely_high   \n",
       "5        1                Fox                negative   \n",
       "6        4                Fox                     low   \n",
       "7        3                Fox                    high   \n",
       "8        3                Fox          extremely_high   \n",
       "9       22               None                negative   \n",
       "10      17               None                     low   \n",
       "11      13               None                    high   \n",
       "12      14               None          extremely_high   \n",
       "13       2          Paramount                negative   \n",
       "14       4          Paramount                     low   \n",
       "15       2          Paramount                    high   \n",
       "16       1          Paramount          extremely_high   \n",
       "17       1               Sony                negative   \n",
       "18       3               Sony                     low   \n",
       "19       2               Sony                    high   \n",
       "20       2               Sony          extremely_high   \n",
       "21       1          Universal                negative   \n",
       "22       6          Universal                     low   \n",
       "23       4          Universal                    high   \n",
       "24       9          Universal          extremely_high   \n",
       "25       2                 WB                     low   \n",
       "26       8                 WB                    high   \n",
       "27       3                 WB          extremely_high   \n",
       "\n",
       "    production_company_count  \n",
       "0                          1  \n",
       "1                          8  \n",
       "2                          8  \n",
       "3                          8  \n",
       "4                          8  \n",
       "5                         11  \n",
       "6                         11  \n",
       "7                         11  \n",
       "8                         11  \n",
       "9                         66  \n",
       "10                        66  \n",
       "11                        66  \n",
       "12                        66  \n",
       "13                         9  \n",
       "14                         9  \n",
       "15                         9  \n",
       "16                         9  \n",
       "17                         8  \n",
       "18                         8  \n",
       "19                         8  \n",
       "20                         8  \n",
       "21                        20  \n",
       "22                        20  \n",
       "23                        20  \n",
       "24                        20  \n",
       "25                        13  \n",
       "26                        13  \n",
       "27                        13  "
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''We ultimately want a column that contains the total counts for each production company. We are going to create \n",
    "a new column that replicates the production company called production_company_count and then we will use the replace function to \n",
    "replace the 1s with their total count, the 2s with their total count... '''\n",
    "#First, replicating the income level column in a column named budget_category_count\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company\"] \n",
    "#Now replacing the income level with the total count for each income level \n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"DW\"], 1)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"Disney\"], 8)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"Fox\"], 11)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"None\"], 66)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"Paramount\"], 9)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"Sony\"], 8)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"Universal\"], 20)\n",
    "movies_discretized_count_df_q2[\"production_company_count\"] = movies_discretized_count_df_q2[\"production_company_count\"].replace([\"WB\"], 13)\n",
    "movies_discretized_count_df_q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>production_company</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>production_company_count</th>\n",
       "      <th>percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DW</td>\n",
       "      <td>negative</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Disney</td>\n",
       "      <td>negative</td>\n",
       "      <td>8</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Disney</td>\n",
       "      <td>low</td>\n",
       "      <td>8</td>\n",
       "      <td>37.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>high</td>\n",
       "      <td>8</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Disney</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>8</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   counts production_company percent_profit_category  \\\n",
       "0       1                 DW                negative   \n",
       "1       1             Disney                negative   \n",
       "2       3             Disney                     low   \n",
       "3       2             Disney                    high   \n",
       "4       2             Disney          extremely_high   \n",
       "\n",
       "   production_company_count  percent  \n",
       "0                         1    100.0  \n",
       "1                         8     12.5  \n",
       "2                         8     37.5  \n",
       "3                         8     25.0  \n",
       "4                         8     25.0  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Okay, we are one step closer... Now, we need to create a column that takes the counts/budget_category_counts * 100 \n",
    "movies_discretized_count_df_q2[\"percent\"] = movies_discretized_count_df_q2[\"counts\"]/movies_discretized_count_df_q2[\"production_company_count\"] *100\n",
    "#Looking at our data frame... It worked!!! \n",
    "movies_discretized_count_df_q2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1030752b0>"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We no longer need the count columns\n",
    "movies_discretized_count_df_q2.drop([\"counts\", \"production_company_count\"], axis = 1, inplace = True ) \n",
    "'''Attempting to graph this data using a grouped bar chart: \n",
    "formula: df.pivot(columns, group, values).plot(kind = \"type of graph\", color = [\"color to use, can be a list of colors\"], \n",
    "title = \"you can set the title of your graph here\")'''\n",
    "graph = movies_discretized_count_df_q2.pivot(\"production_company\", \"percent_profit_category\", \n",
    "                                                \"percent\").plot(kind=\"bar\", color = [\"crimson\", \"salmon\", \"palegreen\", \"darkgreen\"], \n",
    "                                                               title = \"Percent of Percent Profit to Production Company\")\n",
    "#Changing the y label of our graph to Percent\n",
    "plt.ylabel(\"Percent\")\n",
    "#Changing the x axis label of our graph to Budget Category \n",
    "plt.xlabel(\"Production Company\")\n",
    "#Making it so the tick labels are not angled \n",
    "plt.xticks(rotation = 0)\n",
    "#How to change the tick labels (we ended up not needing this, but want to keep for future reference)\n",
    "#plt.Axes.set_xticklabels(graph, labels = ['extremely low', 'low', 'high', 'extremely high'])\n",
    "#moving the legend position to underneath the graph, also setting it to have 4 columns so the legend is in a \n",
    "#straight single line and adding a legend title\n",
    "plt.legend( loc = \"lower center\", bbox_to_anchor = (.5, -.4), ncol = 4, title = \"Percent Profit Category\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This graph provides some insights, however, most of our movies have more than one main production company and only \n",
    "one production company is being shown. For example, DreamWorks and Universal had a movie named First Man and it was \n",
    "profitable. However, based on the way that we assigned a main production company, only Universal was given credit for \n",
    "that movie."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>week</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">week_1</th>\n",
       "      <th>negative</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>week_2</th>\n",
       "      <th>negative</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       counts\n",
       "week   percent_profit        \n",
       "week_1 negative             5\n",
       "       low                 13\n",
       "       high                 5\n",
       "       extremely_high      14\n",
       "week_2 negative             5"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question: \n",
    "#Does time of the month the movie is released affect percent profit? \n",
    "'''We want to compare the percent_profit level percentage make up for each time of month. To do this we need to \n",
    "get the count for each time of month, the count for each percent_profit level by time of month company and then divide \n",
    "the count of the percent_profit/count of time of month and multiply by 100. We have to do this for each \n",
    "time of month and level of percent_profits.'''\n",
    "movies_discretized_count_q3 = movies_discretized_df.groupby([\"week\", \"percent_profit\"])[\"week\"].count()\n",
    "'''Taking the output from the line above and converting it to a data frame. We are using pandas, which we important as pd. \n",
    "First, we call the package we are using then the function from that package and then what we want to run the function on.\n",
    "pd.function(item to use). We are using the DataFrame function from the pandas package on the series created by our group by'''\n",
    "movies_discretized_count_df_q3 = pd.DataFrame(movies_discretized_count_q3)\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df_q3\n",
    "#Changing the column name from week to counts\n",
    "movies_discretized_count_df_q3.columns = [\"counts\"]\n",
    "#Checking to see what our df looks like. \n",
    "movies_discretized_count_df_q3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>week</th>\n",
       "      <th>percent_profit_category</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>week</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">week_1</th>\n",
       "      <th>negative</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>13</td>\n",
       "      <td>week_1</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>14</td>\n",
       "      <td>week_1</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">week_2</th>\n",
       "      <th>negative</th>\n",
       "      <td>5</td>\n",
       "      <td>week_2</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>9</td>\n",
       "      <td>week_2</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>13</td>\n",
       "      <td>week_2</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>7</td>\n",
       "      <td>week_2</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">week_3</th>\n",
       "      <th>negative</th>\n",
       "      <td>9</td>\n",
       "      <td>week_3</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>10</td>\n",
       "      <td>week_3</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>6</td>\n",
       "      <td>week_3</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>8</td>\n",
       "      <td>week_3</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">week_4</th>\n",
       "      <th>negative</th>\n",
       "      <td>10</td>\n",
       "      <td>week_4</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>7</td>\n",
       "      <td>week_4</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>10</td>\n",
       "      <td>week_4</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extremely_high</th>\n",
       "      <td>5</td>\n",
       "      <td>week_4</td>\n",
       "      <td>extremely_high</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       counts    week percent_profit_category\n",
       "week   percent_profit                                        \n",
       "week_1 negative             5  week_1                negative\n",
       "       low                 13  week_1                     low\n",
       "       high                 5  week_1                    high\n",
       "       extremely_high      14  week_1          extremely_high\n",
       "week_2 negative             5  week_2                negative\n",
       "       low                  9  week_2                     low\n",
       "       high                13  week_2                    high\n",
       "       extremely_high       7  week_2          extremely_high\n",
       "week_3 negative             9  week_3                negative\n",
       "       low                 10  week_3                     low\n",
       "       high                 6  week_3                    high\n",
       "       extremely_high       8  week_3          extremely_high\n",
       "week_4 negative            10  week_4                negative\n",
       "       low                  7  week_4                     low\n",
       "       high                10  week_4                    high\n",
       "       extremely_high       5  week_4          extremely_high"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We want to get a total count for the number of percent_profit counts for each week.\n",
    "'''This shows that we have 2 indexes week and percent_profit... We want to create columns from each index\n",
    "We are creating a new column named week by extracting the values from the first index (0) which is the week\n",
    "index'''\n",
    "movies_discretized_count_df_q3[\"week\"]=movies_discretized_count_df_q3.index.get_level_values(0)\n",
    "#We are creating a new column named total_donations by extracting the values from the second index (1) which is percent_profit\n",
    "movies_discretized_count_df_q3[\"percent_profit_category\"] = movies_discretized_count_df_q3.index.get_level_values(1)\n",
    "#Checking to make sure it worked... \n",
    "movies_discretized_count_df_q3\n",
    "#It did! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "week\n",
       "week_1    37\n",
       "week_2    34\n",
       "week_3    33\n",
       "week_4    32\n",
       "Name: counts, dtype: int64"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we want to remove the indexes so, we can create a new group by to get the sum of the counts for each group \n",
    "#To do this we are using the reset_index(drop = True) This will drop our group by indexes and allow us to create a new one. \n",
    "movies_discretized_count_df_q3 = movies_discretized_count_df_q3.reset_index(drop = True)\n",
    "# Now we are getting the sum of each production company category. \n",
    "week_discretized_count_df_q3 = movies_discretized_count_df_q3.groupby([\"week\"])[\"counts\"].sum()\n",
    "#Checking the results\n",
    "week_discretized_count_df_q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>week</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>week_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>negative</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13</td>\n",
       "      <td>week_1</td>\n",
       "      <td>low</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>high</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14</td>\n",
       "      <td>week_1</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>week_2</td>\n",
       "      <td>negative</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   counts    week percent_profit_category  week_count\n",
       "0       5  week_1                negative          37\n",
       "1      13  week_1                     low          37\n",
       "2       5  week_1                    high          37\n",
       "3      14  week_1          extremely_high          37\n",
       "4       5  week_2                negative          34"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''We ultimately want a column that contains the total counts for each week. We are going to create \n",
    "a new column that replicates the week called week_count and then we will use the replace function to \n",
    "replace the 1s with their total count, the 2s with their total count... '''\n",
    "#First, replicating the income level column in a column named budget_category_count\n",
    "movies_discretized_count_df_q3[\"week_count\"] = movies_discretized_count_df_q3[\"week\"] \n",
    "#Now replacing the income level with the total count for each income level \n",
    "movies_discretized_count_df_q3[\"week_count\"] = movies_discretized_count_df_q3[\"week_count\"].replace([\"week_1\"], 37)\n",
    "movies_discretized_count_df_q3[\"week_count\"] = movies_discretized_count_df_q3[\"week_count\"].replace([\"week_2\"], 34)\n",
    "movies_discretized_count_df_q3[\"week_count\"] = movies_discretized_count_df_q3[\"week_count\"].replace([\"week_3\"], 33)\n",
    "movies_discretized_count_df_q3[\"week_count\"] = movies_discretized_count_df_q3[\"week_count\"].replace([\"week_4\"], 32)\n",
    "movies_discretized_count_df_q3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>counts</th>\n",
       "      <th>week</th>\n",
       "      <th>percent_profit_category</th>\n",
       "      <th>week_count</th>\n",
       "      <th>percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>negative</td>\n",
       "      <td>37</td>\n",
       "      <td>13.513514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13</td>\n",
       "      <td>week_1</td>\n",
       "      <td>low</td>\n",
       "      <td>37</td>\n",
       "      <td>35.135135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>week_1</td>\n",
       "      <td>high</td>\n",
       "      <td>37</td>\n",
       "      <td>13.513514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14</td>\n",
       "      <td>week_1</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>37</td>\n",
       "      <td>37.837838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>week_2</td>\n",
       "      <td>negative</td>\n",
       "      <td>34</td>\n",
       "      <td>14.705882</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   counts    week percent_profit_category  week_count    percent\n",
       "0       5  week_1                negative          37  13.513514\n",
       "1      13  week_1                     low          37  35.135135\n",
       "2       5  week_1                    high          37  13.513514\n",
       "3      14  week_1          extremely_high          37  37.837838\n",
       "4       5  week_2                negative          34  14.705882"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Okay, we are one step closer... Now, we need to create a column that takes the counts/week_count * 100 \n",
    "movies_discretized_count_df_q3[\"percent\"] = movies_discretized_count_df_q3[\"counts\"]/movies_discretized_count_df_q3[\"week_count\"] *100\n",
    "#Looking at our data frame... It worked!!! \n",
    "movies_discretized_count_df_q3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11ee37c50>"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We no longer need the count columns\n",
    "movies_discretized_count_df_q3.drop([\"counts\", \"week_count\"], axis = 1, inplace = True ) \n",
    "'''Attempting to graph this data using a grouped bar chart: \n",
    "formula: df.pivot(columns, group, values).plot(kind = \"type of graph\", color = [\"color to use, can be a list of colors\"], \n",
    "title = \"you can set the title of your graph here\")'''\n",
    "graph = movies_discretized_count_df_q3.pivot(\"week\", \"percent_profit_category\", \n",
    "                                                \"percent\").plot(kind=\"bar\", color = [\"crimson\", \"salmon\", \"palegreen\", \"darkgreen\"], \n",
    "                                                               title = \"Percent of Percent Profit to Week\")\n",
    "#Changing the y label of our graph to Percent\n",
    "plt.ylabel(\"Percent\")\n",
    "#Changing the x axis label of our graph to Budget Category \n",
    "plt.xlabel(\"Week\")\n",
    "#Making it so the tick labels are not angled \n",
    "plt.xticks(rotation = 0)\n",
    "#How to change the tick labels (we ended up not needing this, but want to keep for future reference)\n",
    "#plt.Axes.set_xticklabels(graph, labels = ['extremely low', 'low', 'high', 'extremely high'])\n",
    "#moving the legend position to underneath the graph, also setting it to have 4 columns so the legend is in a \n",
    "#straight single line and adding a legend title\n",
    "plt.legend( loc = \"lower center\", bbox_to_anchor = (.5, -.4), ncol = 4, title = \"Percent Profit Category\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is interesting in that it shows that movies released within the first two weeks of the month tend to be more \n",
    "profitable. We would like to look at a breakdown of month to percent profit for further analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>budget</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>revenue</th>\n",
       "      <th>profit</th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>percent_profit</th>\n",
       "      <th>week</th>\n",
       "      <th>main_production_co</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aquaman</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>WB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Spider-Man: Into the Spider-Verse</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>[{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>12</td>\n",
       "      <td>2018</td>\n",
       "      <td>high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>Sony</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bohemian Rhapsody</td>\n",
       "      <td>high</td>\n",
       "      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...</td>\n",
       "      <td>[{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>10</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "      <td>Fox</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 28, '...</td>\n",
       "      <td>[{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>4</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_4</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hereditary</td>\n",
       "      <td>extremely_low</td>\n",
       "      <td>[{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...</td>\n",
       "      <td>[{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...</td>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>high</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>extremely_high</td>\n",
       "      <td>week_1</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title          budget  \\\n",
       "1                            Aquaman  extremely_high   \n",
       "3  Spider-Man: Into the Spider-Verse  extremely_high   \n",
       "4                  Bohemian Rhapsody            high   \n",
       "6             Avengers: Infinity War  extremely_high   \n",
       "8                         Hereditary   extremely_low   \n",
       "\n",
       "                                              genres  \\\n",
       "1  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "3  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "4  [{'id': 18, 'name': 'Drama'}, {'id': 10402, 'n...   \n",
       "6  [{'id': 12, 'name': 'Adventure'}, {'id': 28, '...   \n",
       "8  [{'id': 27, 'name': 'Horror'}, {'id': 9648, 'n...   \n",
       "\n",
       "                                production_companies         revenue  \\\n",
       "1  [{'id': 429, 'logo_path': '/2Tc1P3Ac8M479naPp1...  extremely_high   \n",
       "3  [{'id': 5, 'logo_path': '/71BqEFAF4V3qjjMPCpLu...  extremely_high   \n",
       "4  [{'id': 3281, 'logo_path': '/8tMybAieh64uzvm8k...  extremely_high   \n",
       "6  [{'id': 420, 'logo_path': '/hUzeosd33nzE5MCNsZ...  extremely_high   \n",
       "8  [{'id': 24277, 'logo_path': '/mRSBVNNL2lZvJKVG...            high   \n",
       "\n",
       "           profit      popularity    vote_average      vote_count  month  \\\n",
       "1  extremely_high  extremely_high            high  extremely_high     12   \n",
       "3  extremely_high  extremely_high  extremely_high  extremely_high     12   \n",
       "4  extremely_high  extremely_high  extremely_high  extremely_high     10   \n",
       "6  extremely_high  extremely_high  extremely_high  extremely_high      4   \n",
       "8            high  extremely_high            high  extremely_high      6   \n",
       "\n",
       "   year  percent_profit    week main_production_co  \n",
       "1  2018  extremely_high  week_1                 WB  \n",
       "3  2018            high  week_1               Sony  \n",
       "4  2018  extremely_high  week_4                Fox  \n",
       "6  2018  extremely_high  week_4               None  \n",
       "8  2018  extremely_high  week_1               None  "
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Taking a brief detour back to our non-discretized df\n",
    "movies_original_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: Do \"Good\" Movies Make Money? -- We're defining \"Good\" as vote average\n",
    "plt.plot(movies_original_df.profit, movies_original_df.vote_average, 'o')\n",
    "plt.title('Do \"Good\" Movies Make Money?')\n",
    "plt.xlabel('Profit')\n",
    "plt.ylabel('Vote Average')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: Does Popularity = Profit?\n",
    "plt.plot(movies_original_df.profit, movies_original_df.popularity, 'o')\n",
    "plt.title('Does Popularity = Profits?')\n",
    "plt.xlabel('Profit')\n",
    "plt.ylabel('Popularity')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: How does budget impact vote average?\n",
    "plt.plot(movies_original_df.budget, movies_original_df.vote_average, 'o')\n",
    "plt.title('How does Budget Impact Vote Average?')\n",
    "plt.xlabel('Budget')\n",
    "plt.ylabel('Vote Average')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: How does budget impact popularity?\n",
    "plt.plot(movies_original_df.budget, movies_original_df.popularity, 'o')\n",
    "plt.title('How does Budget Impact Popularity?')\n",
    "plt.xlabel('Budget')\n",
    "plt.ylabel('Popularity')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: Is there a relationship between \"Above Average Movies\" and Budget/Price?\n",
    "below_avg = movies_original_df[movies_original_df.vote_average < 6.5]\n",
    "above_avg = movies_original_df[movies_original_df.vote_average >= 6.5]\n",
    "plt.plot(below_avg.budget, below_avg.profit, 'o', label=\"below average\")\n",
    "plt.plot(above_avg.budget, above_avg.profit, 'o', label=\"above average\")\n",
    "\n",
    "plt.title('BUDGET vs PROFIT by AVERAGE VOTE!')\n",
    "plt.xlabel('BUDGET')\n",
    "plt.ylabel('PROFIT')\n",
    "plt.legend()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION: Is there a relationship between \"Above Average Movies\" and Budget/Price?\n",
    "below_avg = movies_original_df[movies_original_df.vote_average < 6.5]\n",
    "above_avg = movies_original_df[movies_original_df.vote_average >= 6.5]\n",
    "plt.plot(below_avg.budget, below_avg.percent_profit, 'o', label=\"below average\")\n",
    "plt.plot(above_avg.budget, above_avg.percent_profit, 'o', label=\"above average\")\n",
    "\n",
    "plt.title('BUDGET vs PERCENT PROFIT by AVERAGE VOTE!')\n",
    "plt.xlabel('BUDGET')\n",
    "plt.ylabel('PROFIT')\n",
    "plt.legend()\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BIG QUESTION: What role do production companies play in the entertainment industry? \n",
    "# Is there a relationship between production studio and average vote? \n",
    "# Production studio and budget?\n",
    "# Production studio and percent profit?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding the BIG EIGHT Production Studios to the DF\n",
    "\n",
    "# WARNER BROS\n",
    "wb = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Warner Bros\" in movie:\n",
    "        wb.append(True)\n",
    "    else:\n",
    "        wb.append(False)\n",
    "movies_original_df['wb'] = wb\n",
    "\n",
    "# MGM\n",
    "mgm = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"MGM\" in movie:\n",
    "        mgm.append(True)\n",
    "    else:\n",
    "        mgm.append(False)\n",
    "movies_original_df['mgm'] = mgm\n",
    "\n",
    "# DREAMWORKS\n",
    "dw = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"DreamWorks\" in movie:\n",
    "        dw.append(True)\n",
    "    else:\n",
    "        dw.append(False)\n",
    "movies_original_df['dw'] = dw\n",
    "\n",
    "# SONY\n",
    "sony = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Sony\" in movie:\n",
    "        sony.append(True)\n",
    "    else:\n",
    "        sony.append(False)\n",
    "movies_original_df['sony'] = sony\n",
    "\n",
    "# DISNEY\n",
    "disney = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Disney\" in movie:\n",
    "        disney.append(True)\n",
    "    else:\n",
    "        disney.append(False)\n",
    "movies_original_df['disney'] = disney\n",
    "\n",
    "#FOX\n",
    "fox = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Century Fox\" in movie:\n",
    "        fox.append(True)\n",
    "    else:\n",
    "        fox.append(False)\n",
    "movies_original_df['fox'] = fox\n",
    "\n",
    "# PARAMOUNT\n",
    "paramount = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Paramount\" in movie:\n",
    "        paramount.append(True)\n",
    "    else:\n",
    "        paramount.append(False)\n",
    "movies_original_df['paramount'] = paramount\n",
    "\n",
    "#UNIVERSAL\n",
    "universal = []\n",
    "for movie in movies_original_df['production_companies']:\n",
    "    if \"Universal\" in movie:\n",
    "        universal.append(True)\n",
    "    else:\n",
    "        universal.append(False)\n",
    "movies_original_df['universal'] = universal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sony = movies_original_df[movies_original_df.sony == True]\n",
    "wb = movies_original_df[movies_original_df.wb == True]\n",
    "disney = movies_original_df[movies_original_df.disney == True]\n",
    "fox = movies_original_df[movies_original_df.fox == True]\n",
    "universal = movies_original_df[movies_original_df.universal == True]\n",
    "paramount = movies_original_df[movies_original_df.paramount == True]\n",
    "dw = movies_original_df[movies_original_df.dw == True]\n",
    "mgm = movies_original_df[movies_original_df.mgm == True]\n",
    "\n",
    "plt.plot(sony.budget, sony.revenue, 'o', label=\"Sony\")\n",
    "plt.plot(wb.budget, wb.revenue, 'o', label=\"Warner Bros.\")\n",
    "plt.plot(disney.budget, disney.revenue, 'o', label=\"Disney\")\n",
    "plt.plot(fox.budget, fox.revenue, 'o', label=\"Fox\")\n",
    "plt.plot(universal.budget, universal.revenue, 'o', label=\"Universal\")\n",
    "plt.plot(paramount.budget, paramount.revenue, 'o', label=\"Paramount\")\n",
    "plt.plot(dw.budget, dw.revenue, 'o', label=\"DreamWorks\")\n",
    "plt.plot(mgm.budget, mgm.revenue, 'o', label=\"MGM\")\n",
    "\n",
    "plt.title('BUDGET vs REVENUE by PRODUCTION COMPANY')\n",
    "plt.xlabel('BUDGET')\n",
    "plt.ylabel('REVENUE')\n",
    "plt.legend( loc = \"lower center\", bbox_to_anchor = (.5, -.4), ncol = 4, title = \"Production Company\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sony = movies_original_df[movies_original_df.sony == True]\n",
    "wb = movies_original_df[movies_original_df.wb == True]\n",
    "disney = movies_original_df[movies_original_df.disney == True]\n",
    "fox = movies_original_df[movies_original_df.fox == True]\n",
    "universal = movies_original_df[movies_original_df.universal == True]\n",
    "paramount = movies_original_df[movies_original_df.paramount == True]\n",
    "dw = movies_original_df[movies_original_df.dw == True]\n",
    "mgm = movies_original_df[movies_original_df.mgm == True]\n",
    "\n",
    "plt.plot(sony.budget, sony.percent_profit, 'o', label=\"Sony\")\n",
    "plt.plot(wb.budget, wb.percent_profit, 'o', label=\"Warner Bros.\")\n",
    "plt.plot(disney.budget, disney.percent_profit, 'o', label=\"Disney\")\n",
    "plt.plot(fox.budget, fox.percent_profit, 'o', label=\"Fox\")\n",
    "plt.plot(universal.budget, universal.percent_profit, 'o', label=\"Universal\")\n",
    "plt.plot(paramount.budget, paramount.percent_profit, 'o', label=\"Paramount\")\n",
    "plt.plot(dw.budget, dw.percent_profit, 'o', label=\"DreamWorks\")\n",
    "plt.plot(mgm.budget, mgm.percent_profit, 'o', label=\"MGM\")\n",
    "\n",
    "plt.title('BUDGET vs PERCENT PROFIT by PRODUCTION COMPANY')\n",
    "plt.xlabel('BUDGET')\n",
    "plt.ylabel('PERCENT PROFIT')\n",
    "plt.legend( loc = \"lower center\", bbox_to_anchor = (.5, -.4), ncol = 4, title = \"Production Company\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
