{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HW2: VECTORIZATION (Pandas style!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 1: Import ALL the things\n",
    "### Import libraries  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "##########################################\n",
    "# NOTE: I'm toying with the idea of requiring the library just above \n",
    "# when I use it so it makes more sense in context\n",
    "##########################################\n",
    "# import os\n",
    "# import pandas as pd\n",
    "# from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "# from nltk.sentiment import SentimentAnalyzer\n",
    "# from nltk.sentiment.util import *\n",
    "# from nltk.probability import FreqDist\n",
    "# from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "# sid = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import data from files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "def get_data_from_files(path):\n",
    "    directory = os.listdir(path)\n",
    "    results = []\n",
    "    for file in directory:\n",
    "        f=open(path+file)\n",
    "        results.append(f.read())\n",
    "        f.close()\n",
    "    return results\n",
    "\n",
    "# neg = get_data_from_files('../NEG_JK/')\n",
    "# pos = get_data_from_files('../POS_JK/')\n",
    "\n",
    "\n",
    "neg = get_data_from_files('../NEG_JK_E/')\n",
    "pos = get_data_from_files('../POS_JK_E/')\n",
    "# neg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 2: Prep Data\n",
    "### STEP 2a: Turn that fresh text into a pandas DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Watch Taxi Driver instead\\nThis is a poor att...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>I learned one thing.\\nIt borrows a lot of ele...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>Masterpiece.\\nThe music. The intense. The rea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>46</td>\n",
       "      <td>BELIEVE THE HYPE\\nJoaquin Phoenix gives Heath...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>47</td>\n",
       "      <td>Joaquin 'OSCAR', Joker = best Dark suspense t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48</td>\n",
       "      <td>Oscar for Phoenix\\nI will stop watching movie...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>49</td>\n",
       "      <td>Joker &gt; Endgame\\nNeed I say more? Everything ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>98 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    0\n",
       "0    Everyone praised an overrated movie.\\nOverrat...\n",
       "1    What idiotic FIlm\\nI can say that Phoenix is ...\n",
       "2    Terrible\\nThe only thing good about this movi...\n",
       "3    Watch Taxi Driver instead\\nThis is a poor att...\n",
       "4    I learned one thing.\\nIt borrows a lot of ele...\n",
       "..                                                ...\n",
       "45   Masterpiece.\\nThe music. The intense. The rea...\n",
       "46   BELIEVE THE HYPE\\nJoaquin Phoenix gives Heath...\n",
       "47   Joaquin 'OSCAR', Joker = best Dark suspense t...\n",
       "48   Oscar for Phoenix\\nI will stop watching movie...\n",
       "49   Joker > Endgame\\nNeed I say more? Everything ...\n",
       "\n",
       "[98 rows x 1 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "\n",
    "neg_df = pd.DataFrame(neg)\n",
    "pos_df = pd.DataFrame(pos)\n",
    "# neg_df.to_csv('neg_joker_csv.csv',quoting=csv.QUOTE_ALL, sep='\\t')\n",
    "# neg_df.to_csv('neg_joker_csv.csv', index=False)\n",
    "all_df = neg_df.append(pos_df)\n",
    "all_df\n",
    "# pos_df.to_csv('pos_joker_csv.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 2b: Label it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos_df['PoN'] = 'P'\n",
    "neg_df['PoN'] = 'N'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 2c: Combine the dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df = neg_df.append(pos_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df\n",
    "\n",
    "all_df.to_csv('all_JK_extremes_labeled.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df_no_label = all_df.drop('PoN', axis=1)\n",
    "all_df_no_label\n",
    "# all_df\n",
    "all_df_no_label.to_csv('all_JK_extremes_no_label.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 3: TOKENIZE (and clean)!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from nltk.sentiment import SentimentAnalyzer\n",
    "from nltk.sentiment.util import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Came back and added sentences for tokinization for \"Summary experiment\"\n",
    "def get_sentence_tokens(review):\n",
    "    return sent_tokenize(review)\n",
    "    \n",
    "all_df['sentences'] = all_df.apply(lambda x: get_sentence_tokens(x[0]), axis=1)\n",
    "all_df['num_sentences'] = all_df.apply(lambda x: len(x['sentences']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_tokens(sentence):\n",
    "    tokens = word_tokenize(sentence)\n",
    "    clean_tokens = [word.lower() for word in tokens if word.isalpha()]\n",
    "    return clean_tokens\n",
    "\n",
    "all_df['tokens'] = all_df.apply(lambda x: get_tokens(x[0]), axis=1)\n",
    "all_df['num_tokens'] = all_df.apply(lambda x: len(x['tokens']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>118</td>\n",
       "      <td>Nerve-wracking, but in very uncomfortable way...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Nerve-wracking, but in very uncomfortable wa...</td>\n",
       "      <td>8</td>\n",
       "      <td>[but, in, very, uncomfortable, way, why, every...</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>119</td>\n",
       "      <td>Solid film but there are glaring problems\\nOk...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Solid film but there are glaring problems\\nO...</td>\n",
       "      <td>13</td>\n",
       "      <td>[solid, film, but, there, are, glaring, proble...</td>\n",
       "      <td>628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>120</td>\n",
       "      <td>Joker &gt; Endgame\\nNeed I say more? Everything ...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Joker &gt; Endgame\\nNeed I say more?, Everythin...</td>\n",
       "      <td>5</td>\n",
       "      <td>[joker, endgame, need, i, say, more, everythin...</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>121</td>\n",
       "      <td>Absolutely not a 10\\nStrong fanboy and hype r...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Absolutely not a 10\\nStrong fanboy and hype ...</td>\n",
       "      <td>5</td>\n",
       "      <td>[absolutely, not, a, strong, fanboy, and, hype...</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>122</td>\n",
       "      <td>Overhyped, but it's alright\\nIt's a good film...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Overhyped, but it's alright\\nIt's a good fil...</td>\n",
       "      <td>3</td>\n",
       "      <td>[overhyped, but, it, alright, it, a, good, fil...</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>246 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     0 PoN  \\\n",
       "0     Missed Opportunity\\nI had been very excited t...   N   \n",
       "1     5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2     Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3     What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4     Terrible\\nThe only thing good about this movi...   N   \n",
       "..                                                 ...  ..   \n",
       "118   Nerve-wracking, but in very uncomfortable way...   P   \n",
       "119   Solid film but there are glaring problems\\nOk...   P   \n",
       "120   Joker > Endgame\\nNeed I say more? Everything ...   P   \n",
       "121   Absolutely not a 10\\nStrong fanboy and hype r...   P   \n",
       "122   Overhyped, but it's alright\\nIt's a good film...   P   \n",
       "\n",
       "                                             sentences  num_sentences  \\\n",
       "0    [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1    [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2    [ Everyone praised an overrated movie., Overra...              2   \n",
       "3    [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4    [ Terrible\\nThe only thing good about this mov...              9   \n",
       "..                                                 ...            ...   \n",
       "118  [ Nerve-wracking, but in very uncomfortable wa...              8   \n",
       "119  [ Solid film but there are glaring problems\\nO...             13   \n",
       "120  [ Joker > Endgame\\nNeed I say more?, Everythin...              5   \n",
       "121  [ Absolutely not a 10\\nStrong fanboy and hype ...              5   \n",
       "122  [ Overhyped, but it's alright\\nIt's a good fil...              3   \n",
       "\n",
       "                                                tokens  num_tokens  \n",
       "0    [missed, opportunity, i, had, been, very, exci...         306  \n",
       "1    [for, phoenix, i, do, think, there, was, a, ne...          59  \n",
       "2    [everyone, praised, an, overrated, movie, over...          26  \n",
       "3    [what, idiotic, film, i, can, say, that, phoen...          66  \n",
       "4    [terrible, the, only, thing, good, about, this...         124  \n",
       "..                                                 ...         ...  \n",
       "118  [but, in, very, uncomfortable, way, why, every...          57  \n",
       "119  [solid, film, but, there, are, glaring, proble...         628  \n",
       "120  [joker, endgame, need, i, say, more, everythin...          83  \n",
       "121  [absolutely, not, a, strong, fanboy, and, hype...          81  \n",
       "122  [overhyped, but, it, alright, it, a, good, fil...          60  \n",
       "\n",
       "[246 rows x 6 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 4: Remove Stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "stop_words = set(stopwords.words(\"english\"))\n",
    "def remove_stopwords(sentence):\n",
    "    filtered_text = []\n",
    "    for word in sentence:\n",
    "        if word not in stop_words:\n",
    "            filtered_text.append(word)\n",
    "    return filtered_text\n",
    "all_df['no_sw'] = all_df.apply(lambda x: remove_stopwords(x['tokens']),axis=1)\n",
    "all_df['num_no_sw'] = all_df.apply(lambda x: len(x['no_sw']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>118</td>\n",
       "      <td>Nerve-wracking, but in very uncomfortable way...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Nerve-wracking, but in very uncomfortable wa...</td>\n",
       "      <td>8</td>\n",
       "      <td>[but, in, very, uncomfortable, way, why, every...</td>\n",
       "      <td>57</td>\n",
       "      <td>[uncomfortable, way, everybody, keep, saying, ...</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>119</td>\n",
       "      <td>Solid film but there are glaring problems\\nOk...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Solid film but there are glaring problems\\nO...</td>\n",
       "      <td>13</td>\n",
       "      <td>[solid, film, but, there, are, glaring, proble...</td>\n",
       "      <td>628</td>\n",
       "      <td>[solid, film, glaring, problems, okay, first, ...</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>120</td>\n",
       "      <td>Joker &gt; Endgame\\nNeed I say more? Everything ...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Joker &gt; Endgame\\nNeed I say more?, Everythin...</td>\n",
       "      <td>5</td>\n",
       "      <td>[joker, endgame, need, i, say, more, everythin...</td>\n",
       "      <td>83</td>\n",
       "      <td>[joker, endgame, need, say, everything, movie,...</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>121</td>\n",
       "      <td>Absolutely not a 10\\nStrong fanboy and hype r...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Absolutely not a 10\\nStrong fanboy and hype ...</td>\n",
       "      <td>5</td>\n",
       "      <td>[absolutely, not, a, strong, fanboy, and, hype...</td>\n",
       "      <td>81</td>\n",
       "      <td>[absolutely, strong, fanboy, hype, rush, going...</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>122</td>\n",
       "      <td>Overhyped, but it's alright\\nIt's a good film...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Overhyped, but it's alright\\nIt's a good fil...</td>\n",
       "      <td>3</td>\n",
       "      <td>[overhyped, but, it, alright, it, a, good, fil...</td>\n",
       "      <td>60</td>\n",
       "      <td>[overhyped, alright, good, film, see, like, ma...</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>246 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     0 PoN  \\\n",
       "0     Missed Opportunity\\nI had been very excited t...   N   \n",
       "1     5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2     Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3     What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4     Terrible\\nThe only thing good about this movi...   N   \n",
       "..                                                 ...  ..   \n",
       "118   Nerve-wracking, but in very uncomfortable way...   P   \n",
       "119   Solid film but there are glaring problems\\nOk...   P   \n",
       "120   Joker > Endgame\\nNeed I say more? Everything ...   P   \n",
       "121   Absolutely not a 10\\nStrong fanboy and hype r...   P   \n",
       "122   Overhyped, but it's alright\\nIt's a good film...   P   \n",
       "\n",
       "                                             sentences  num_sentences  \\\n",
       "0    [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1    [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2    [ Everyone praised an overrated movie., Overra...              2   \n",
       "3    [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4    [ Terrible\\nThe only thing good about this mov...              9   \n",
       "..                                                 ...            ...   \n",
       "118  [ Nerve-wracking, but in very uncomfortable wa...              8   \n",
       "119  [ Solid film but there are glaring problems\\nO...             13   \n",
       "120  [ Joker > Endgame\\nNeed I say more?, Everythin...              5   \n",
       "121  [ Absolutely not a 10\\nStrong fanboy and hype ...              5   \n",
       "122  [ Overhyped, but it's alright\\nIt's a good fil...              3   \n",
       "\n",
       "                                                tokens  num_tokens  \\\n",
       "0    [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1    [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2    [everyone, praised, an, overrated, movie, over...          26   \n",
       "3    [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4    [terrible, the, only, thing, good, about, this...         124   \n",
       "..                                                 ...         ...   \n",
       "118  [but, in, very, uncomfortable, way, why, every...          57   \n",
       "119  [solid, film, but, there, are, glaring, proble...         628   \n",
       "120  [joker, endgame, need, i, say, more, everythin...          83   \n",
       "121  [absolutely, not, a, strong, fanboy, and, hype...          81   \n",
       "122  [overhyped, but, it, alright, it, a, good, fil...          60   \n",
       "\n",
       "                                                 no_sw  num_no_sw  \n",
       "0    [missed, opportunity, excited, see, movie, eve...        140  \n",
       "1    [phoenix, think, need, super, dark, film, tbh,...         25  \n",
       "2    [everyone, praised, overrated, movie, overrate...         13  \n",
       "3    [idiotic, film, say, phoenix, master, actor, b...         36  \n",
       "4    [terrible, thing, good, movie, phoenixs, actin...         65  \n",
       "..                                                 ...        ...  \n",
       "118  [uncomfortable, way, everybody, keep, saying, ...         33  \n",
       "119  [solid, film, glaring, problems, okay, first, ...        292  \n",
       "120  [joker, endgame, need, say, everything, movie,...         53  \n",
       "121  [absolutely, strong, fanboy, hype, rush, going...         36  \n",
       "122  [overhyped, alright, good, film, see, like, ma...         31  \n",
       "\n",
       "[246 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 5: Create a Frequency Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.probability import FreqDist\n",
    "def get_most_common(tokens):\n",
    "    fdist = FreqDist(tokens)\n",
    "    return fdist.most_common(12)\n",
    "all_df['topwords_unfil'] = all_df.apply(lambda x: get_most_common(x['tokens']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def get_most_common(tokens):\n",
    "    fdist = FreqDist(tokens)\n",
    "    return fdist.most_common(12)\n",
    "all_df['topwords_fil'] = all_df.apply(lambda x: get_most_common(x['no_sw']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_fdist(tokens):\n",
    "    return (FreqDist(tokens))\n",
    "    \n",
    "all_df['freq_dist'] = all_df.apply(lambda x: get_fdist(x['no_sw']),axis=1)\n",
    "all_df['freq_dist_unfil'] = all_df.apply(lambda x: get_fdist(x['tokens']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>freq_dist</th>\n",
       "      <th>freq_dist_unfil</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'excited': 1, ...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>{'phoenix': 1, 'think': 1, 'need': 1, 'super':...</td>\n",
       "      <td>{'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'overrated': 2, ...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>{'idiotic': 1, 'film': 1, 'say': 1, 'phoenix':...</td>\n",
       "      <td>{'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>{'terrible': 3, 'thing': 1, 'good': 2, 'movie'...</td>\n",
       "      <td>{'terrible': 3, 'the': 5, 'only': 1, 'thing': ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>118</td>\n",
       "      <td>Nerve-wracking, but in very uncomfortable way...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Nerve-wracking, but in very uncomfortable wa...</td>\n",
       "      <td>8</td>\n",
       "      <td>[but, in, very, uncomfortable, way, why, every...</td>\n",
       "      <td>57</td>\n",
       "      <td>[uncomfortable, way, everybody, keep, saying, ...</td>\n",
       "      <td>33</td>\n",
       "      <td>[(it, 4), (a, 4), (movie, 3), (in, 2), (keep, ...</td>\n",
       "      <td>[(movie, 3), (keep, 2), (saying, 2), (psycho, ...</td>\n",
       "      <td>{'uncomfortable': 1, 'way': 1, 'everybody': 1,...</td>\n",
       "      <td>{'but': 1, 'in': 2, 'very': 1, 'uncomfortable'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>119</td>\n",
       "      <td>Solid film but there are glaring problems\\nOk...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Solid film but there are glaring problems\\nO...</td>\n",
       "      <td>13</td>\n",
       "      <td>[solid, film, but, there, are, glaring, proble...</td>\n",
       "      <td>628</td>\n",
       "      <td>[solid, film, glaring, problems, okay, first, ...</td>\n",
       "      <td>292</td>\n",
       "      <td>[(the, 35), (to, 22), (it, 16), (and, 16), (i,...</td>\n",
       "      <td>[(joker, 6), (movie, 5), (film, 4), (like, 4),...</td>\n",
       "      <td>{'solid': 1, 'film': 4, 'glaring': 1, 'problem...</td>\n",
       "      <td>{'solid': 1, 'film': 4, 'but': 5, 'there': 3, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>120</td>\n",
       "      <td>Joker &gt; Endgame\\nNeed I say more? Everything ...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Joker &gt; Endgame\\nNeed I say more?, Everythin...</td>\n",
       "      <td>5</td>\n",
       "      <td>[joker, endgame, need, i, say, more, everythin...</td>\n",
       "      <td>83</td>\n",
       "      <td>[joker, endgame, need, say, everything, movie,...</td>\n",
       "      <td>53</td>\n",
       "      <td>[(joker, 3), (movie, 3), (in, 3), (it, 3), (th...</td>\n",
       "      <td>[(joker, 3), (movie, 3), (masterful, 2), (awes...</td>\n",
       "      <td>{'joker': 3, 'endgame': 1, 'need': 1, 'say': 1...</td>\n",
       "      <td>{'joker': 3, 'endgame': 1, 'need': 1, 'i': 1, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>121</td>\n",
       "      <td>Absolutely not a 10\\nStrong fanboy and hype r...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Absolutely not a 10\\nStrong fanboy and hype ...</td>\n",
       "      <td>5</td>\n",
       "      <td>[absolutely, not, a, strong, fanboy, and, hype...</td>\n",
       "      <td>81</td>\n",
       "      <td>[absolutely, strong, fanboy, hype, rush, going...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(the, 7), (is, 6), (a, 4), (fanboy, 2), (and,...</td>\n",
       "      <td>[(fanboy, 2), (movie, 2), (absolutely, 1), (st...</td>\n",
       "      <td>{'absolutely': 1, 'strong': 1, 'fanboy': 2, 'h...</td>\n",
       "      <td>{'absolutely': 1, 'not': 1, 'a': 4, 'strong': ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>122</td>\n",
       "      <td>Overhyped, but it's alright\\nIt's a good film...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Overhyped, but it's alright\\nIt's a good fil...</td>\n",
       "      <td>3</td>\n",
       "      <td>[overhyped, but, it, alright, it, a, good, fil...</td>\n",
       "      <td>60</td>\n",
       "      <td>[overhyped, alright, good, film, see, like, ma...</td>\n",
       "      <td>31</td>\n",
       "      <td>[(it, 4), (but, 3), (a, 3), (good, 2), (do, 2)...</td>\n",
       "      <td>[(good, 2), (overhyped, 1), (alright, 1), (fil...</td>\n",
       "      <td>{'overhyped': 1, 'alright': 1, 'good': 2, 'fil...</td>\n",
       "      <td>{'overhyped': 1, 'but': 3, 'it': 4, 'alright':...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>246 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     0 PoN  \\\n",
       "0     Missed Opportunity\\nI had been very excited t...   N   \n",
       "1     5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2     Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3     What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4     Terrible\\nThe only thing good about this movi...   N   \n",
       "..                                                 ...  ..   \n",
       "118   Nerve-wracking, but in very uncomfortable way...   P   \n",
       "119   Solid film but there are glaring problems\\nOk...   P   \n",
       "120   Joker > Endgame\\nNeed I say more? Everything ...   P   \n",
       "121   Absolutely not a 10\\nStrong fanboy and hype r...   P   \n",
       "122   Overhyped, but it's alright\\nIt's a good film...   P   \n",
       "\n",
       "                                             sentences  num_sentences  \\\n",
       "0    [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1    [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2    [ Everyone praised an overrated movie., Overra...              2   \n",
       "3    [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4    [ Terrible\\nThe only thing good about this mov...              9   \n",
       "..                                                 ...            ...   \n",
       "118  [ Nerve-wracking, but in very uncomfortable wa...              8   \n",
       "119  [ Solid film but there are glaring problems\\nO...             13   \n",
       "120  [ Joker > Endgame\\nNeed I say more?, Everythin...              5   \n",
       "121  [ Absolutely not a 10\\nStrong fanboy and hype ...              5   \n",
       "122  [ Overhyped, but it's alright\\nIt's a good fil...              3   \n",
       "\n",
       "                                                tokens  num_tokens  \\\n",
       "0    [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1    [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2    [everyone, praised, an, overrated, movie, over...          26   \n",
       "3    [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4    [terrible, the, only, thing, good, about, this...         124   \n",
       "..                                                 ...         ...   \n",
       "118  [but, in, very, uncomfortable, way, why, every...          57   \n",
       "119  [solid, film, but, there, are, glaring, proble...         628   \n",
       "120  [joker, endgame, need, i, say, more, everythin...          83   \n",
       "121  [absolutely, not, a, strong, fanboy, and, hype...          81   \n",
       "122  [overhyped, but, it, alright, it, a, good, fil...          60   \n",
       "\n",
       "                                                 no_sw  num_no_sw  \\\n",
       "0    [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1    [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2    [everyone, praised, overrated, movie, overrate...         13   \n",
       "3    [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4    [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "..                                                 ...        ...   \n",
       "118  [uncomfortable, way, everybody, keep, saying, ...         33   \n",
       "119  [solid, film, glaring, problems, okay, first, ...        292   \n",
       "120  [joker, endgame, need, say, everything, movie,...         53   \n",
       "121  [absolutely, strong, fanboy, hype, rush, going...         36   \n",
       "122  [overhyped, alright, good, film, see, like, ma...         31   \n",
       "\n",
       "                                        topwords_unfil  \\\n",
       "0    [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1    [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2    [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3    [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4    [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "..                                                 ...   \n",
       "118  [(it, 4), (a, 4), (movie, 3), (in, 2), (keep, ...   \n",
       "119  [(the, 35), (to, 22), (it, 16), (and, 16), (i,...   \n",
       "120  [(joker, 3), (movie, 3), (in, 3), (it, 3), (th...   \n",
       "121  [(the, 7), (is, 6), (a, 4), (fanboy, 2), (and,...   \n",
       "122  [(it, 4), (but, 3), (a, 3), (good, 2), (do, 2)...   \n",
       "\n",
       "                                          topwords_fil  \\\n",
       "0    [(movie, 3), (said, 3), (many, 3), (times, 3),...   \n",
       "1    [(dark, 2), (phoenix, 1), (think, 1), (need, 1...   \n",
       "2    [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3    [(make, 2), (movie, 2), (idiotic, 1), (film, 1...   \n",
       "4    [(movie, 4), (terrible, 3), (acting, 3), (good...   \n",
       "..                                                 ...   \n",
       "118  [(movie, 3), (keep, 2), (saying, 2), (psycho, ...   \n",
       "119  [(joker, 6), (movie, 5), (film, 4), (like, 4),...   \n",
       "120  [(joker, 3), (movie, 3), (masterful, 2), (awes...   \n",
       "121  [(fanboy, 2), (movie, 2), (absolutely, 1), (st...   \n",
       "122  [(good, 2), (overhyped, 1), (alright, 1), (fil...   \n",
       "\n",
       "                                             freq_dist  \\\n",
       "0    {'missed': 2, 'opportunity': 2, 'excited': 1, ...   \n",
       "1    {'phoenix': 1, 'think': 1, 'need': 1, 'super':...   \n",
       "2    {'everyone': 1, 'praised': 1, 'overrated': 2, ...   \n",
       "3    {'idiotic': 1, 'film': 1, 'say': 1, 'phoenix':...   \n",
       "4    {'terrible': 3, 'thing': 1, 'good': 2, 'movie'...   \n",
       "..                                                 ...   \n",
       "118  {'uncomfortable': 1, 'way': 1, 'everybody': 1,...   \n",
       "119  {'solid': 1, 'film': 4, 'glaring': 1, 'problem...   \n",
       "120  {'joker': 3, 'endgame': 1, 'need': 1, 'say': 1...   \n",
       "121  {'absolutely': 1, 'strong': 1, 'fanboy': 2, 'h...   \n",
       "122  {'overhyped': 1, 'alright': 1, 'good': 2, 'fil...   \n",
       "\n",
       "                                       freq_dist_unfil  \n",
       "0    {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...  \n",
       "1    {'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...  \n",
       "2    {'everyone': 1, 'praised': 1, 'an': 1, 'overra...  \n",
       "3    {'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...  \n",
       "4    {'terrible': 3, 'the': 5, 'only': 1, 'thing': ...  \n",
       "..                                                 ...  \n",
       "118  {'but': 1, 'in': 2, 'very': 1, 'uncomfortable'...  \n",
       "119  {'solid': 1, 'film': 4, 'but': 5, 'there': 3, ...  \n",
       "120  {'joker': 3, 'endgame': 1, 'need': 1, 'i': 1, ...  \n",
       "121  {'absolutely': 1, 'not': 1, 'a': 4, 'strong': ...  \n",
       "122  {'overhyped': 1, 'but': 3, 'it': 4, 'alright':...  \n",
       "\n",
       "[246 rows x 12 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 6: Try Different Sentiment Analysis Tools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### VADER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "sid = SentimentIntensityAnalyzer()\n",
    "def get_vader_score(review):\n",
    "    return sid.polarity_scores(review)\n",
    "\n",
    "all_df['vader_all'] = all_df.apply(lambda x: get_vader_score(x[0]),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def separate_vader_score(vader_score, key):\n",
    "    return vader_score[key]\n",
    "\n",
    "all_df['v_compound'] = all_df.apply(lambda x: separate_vader_score(x['vader_all'], 'compound'),axis=1)\n",
    "all_df['v_neg'] = all_df.apply(lambda x: separate_vader_score(x['vader_all'], 'neg'),axis=1)\n",
    "all_df['v_neu'] = all_df.apply(lambda x: separate_vader_score(x['vader_all'], 'neu'),axis=1)\n",
    "all_df['v_pos'] = all_df.apply(lambda x: separate_vader_score(x['vader_all'], 'pos'),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>freq_dist</th>\n",
       "      <th>freq_dist_unfil</th>\n",
       "      <th>vader_all</th>\n",
       "      <th>v_compound</th>\n",
       "      <th>v_neg</th>\n",
       "      <th>v_neu</th>\n",
       "      <th>v_pos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'excited': 1, ...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "      <td>{'neg': 0.068, 'neu': 0.836, 'pos': 0.096, 'co...</td>\n",
       "      <td>0.7501</td>\n",
       "      <td>0.068</td>\n",
       "      <td>0.836</td>\n",
       "      <td>0.096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>{'phoenix': 1, 'think': 1, 'need': 1, 'super':...</td>\n",
       "      <td>{'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...</td>\n",
       "      <td>{'neg': 0.069, 'neu': 0.77, 'pos': 0.16, 'comp...</td>\n",
       "      <td>0.7184</td>\n",
       "      <td>0.069</td>\n",
       "      <td>0.770</td>\n",
       "      <td>0.160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'overrated': 2, ...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.79, 'pos': 0.21, 'compou...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.790</td>\n",
       "      <td>0.210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>{'idiotic': 1, 'film': 1, 'say': 1, 'phoenix':...</td>\n",
       "      <td>{'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...</td>\n",
       "      <td>{'neg': 0.138, 'neu': 0.77, 'pos': 0.092, 'com...</td>\n",
       "      <td>-0.6698</td>\n",
       "      <td>0.138</td>\n",
       "      <td>0.770</td>\n",
       "      <td>0.092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>{'terrible': 3, 'thing': 1, 'good': 2, 'movie'...</td>\n",
       "      <td>{'terrible': 3, 'the': 5, 'only': 1, 'thing': ...</td>\n",
       "      <td>{'neg': 0.086, 'neu': 0.778, 'pos': 0.136, 'co...</td>\n",
       "      <td>0.7184</td>\n",
       "      <td>0.086</td>\n",
       "      <td>0.778</td>\n",
       "      <td>0.136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3   What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4   Terrible\\nThe only thing good about this movi...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "3  [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4  [ Terrible\\nThe only thing good about this mov...              9   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "3  [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4  [terrible, the, only, thing, good, about, this...         124   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "3  [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4  [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3  [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4  [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "\n",
       "                                        topwords_fil  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3  [(make, 2), (movie, 2), (idiotic, 1), (film, 1...   \n",
       "4  [(movie, 4), (terrible, 3), (acting, 3), (good...   \n",
       "\n",
       "                                           freq_dist  \\\n",
       "0  {'missed': 2, 'opportunity': 2, 'excited': 1, ...   \n",
       "1  {'phoenix': 1, 'think': 1, 'need': 1, 'super':...   \n",
       "2  {'everyone': 1, 'praised': 1, 'overrated': 2, ...   \n",
       "3  {'idiotic': 1, 'film': 1, 'say': 1, 'phoenix':...   \n",
       "4  {'terrible': 3, 'thing': 1, 'good': 2, 'movie'...   \n",
       "\n",
       "                                     freq_dist_unfil  \\\n",
       "0  {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...   \n",
       "1  {'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...   \n",
       "2  {'everyone': 1, 'praised': 1, 'an': 1, 'overra...   \n",
       "3  {'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...   \n",
       "4  {'terrible': 3, 'the': 5, 'only': 1, 'thing': ...   \n",
       "\n",
       "                                           vader_all  v_compound  v_neg  \\\n",
       "0  {'neg': 0.068, 'neu': 0.836, 'pos': 0.096, 'co...      0.7501  0.068   \n",
       "1  {'neg': 0.069, 'neu': 0.77, 'pos': 0.16, 'comp...      0.7184  0.069   \n",
       "2  {'neg': 0.0, 'neu': 0.79, 'pos': 0.21, 'compou...      0.7269  0.000   \n",
       "3  {'neg': 0.138, 'neu': 0.77, 'pos': 0.092, 'com...     -0.6698  0.138   \n",
       "4  {'neg': 0.086, 'neu': 0.778, 'pos': 0.136, 'co...      0.7184  0.086   \n",
       "\n",
       "   v_neu  v_pos  \n",
       "0  0.836  0.096  \n",
       "1  0.770  0.160  \n",
       "2  0.790  0.210  \n",
       "3  0.770  0.092  \n",
       "4  0.778  0.136  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DIY SUMMARY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_weighted_freq_dist(review, freq_dist):\n",
    "    max_freq = max(freq_dist.values())\n",
    "    for word in freq_dist.keys():\n",
    "        freq_dist[word] = (freq_dist[word]/max_freq)\n",
    "    return freq_dist\n",
    "\n",
    "all_df['weighted_freq_dist'] = all_df.apply(lambda x: get_weighted_freq_dist(x['sentences'], x['freq_dist']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sentence_score(review, freq_dist):\n",
    "    sentence_scores = {}\n",
    "    for sent in review:\n",
    "        for word in nltk.word_tokenize(sent.lower()):\n",
    "            if word in freq_dist.keys():\n",
    "                if len(sent.split(' ')) < 30:\n",
    "                    if sent not in sentence_scores.keys():\n",
    "                        sentence_scores[sent] = freq_dist[word]\n",
    "                    else:\n",
    "                        sentence_scores[sent] += freq_dist[word]\n",
    "    return sentence_scores\n",
    "\n",
    "all_df['sentence_scores'] = all_df.apply(lambda x: get_sentence_score(x['sentences'], x['freq_dist']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_summary_sentences(sentence_scores):\n",
    "    sorted_sentences = sorted(sentence_scores.items(), key=lambda kv: kv[1], reverse=True)\n",
    "    return ''.join(sent[0] for sent in sorted_sentences[:5])\n",
    "\n",
    "all_df['summary_sentences'] = all_df.apply(lambda x: get_summary_sentences(x['sentence_scores']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "summaries = all_df['summary_sentences'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Todd Philips should maybe read some comics and don;t copy movies like taxi driver or similar.Bt this does still not make a great movie. What idiotic FIlm\\nI can say that Phoenix is master actor.'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summaries[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Doing VADER on the Summary Section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df['vader_sum_all'] = all_df.apply(lambda x: get_vader_score(x['summary_sentences']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df['v_compound_sum'] = all_df.apply(lambda x: separate_vader_score(x['vader_sum_all'], 'compound'),axis=1)\n",
    "all_df['v_neg_sum'] = all_df.apply(lambda x: separate_vader_score(x['vader_sum_all'], 'neg'),axis=1)\n",
    "all_df['v_neu_sum'] = all_df.apply(lambda x: separate_vader_score(x['vader_sum_all'], 'neu'),axis=1)\n",
    "all_df['v_pos_sum'] = all_df.apply(lambda x: separate_vader_score(x['vader_sum_all'], 'pos'),axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Doing VADER on the Most Frequent Words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_freq_words(freq_dist):\n",
    "    sorted_words = sorted(freq_dist.items(), key=lambda kv: kv[1], reverse=True)\n",
    "    return ' '.join(word[0] for word in sorted_words[:50])\n",
    "\n",
    "all_df['v_freq_words'] = all_df.apply(lambda x: get_freq_words(x['freq_dist']), axis=1)\n",
    "\n",
    "all_df['vader_fq_all'] = all_df.apply(lambda x: get_vader_score(x['v_freq_words']),axis=1)\n",
    "all_df['v_compound_fd'] = all_df.apply(lambda x: separate_vader_score(x['vader_fq_all'], 'compound'),axis=1)\n",
    "all_df['v_neg_fd'] = all_df.apply(lambda x: separate_vader_score(x['vader_fq_all'], 'neg'),axis=1)\n",
    "all_df['v_neu_fd'] = all_df.apply(lambda x: separate_vader_score(x['vader_fq_all'], 'neu'),axis=1)\n",
    "all_df['v_pos_fd'] = all_df.apply(lambda x: separate_vader_score(x['vader_fq_all'], 'pos'),axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 7: Test `Step 6` with Machine Learning!!\n",
    "### Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "def get_NB(small_df, labels):\n",
    "    x_train, x_test, y_train, y_test = train_test_split(small_df.values, labels, test_size=0.3, random_state = 109)\n",
    "\n",
    "    gnb = GaussianNB()\n",
    "    gnb.fit(x_train, y_train)\n",
    "    y_pred = gnb.predict(x_test)\n",
    "    from sklearn import metrics\n",
    "    print(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>v_compound_sum</th>\n",
       "      <th>v_neg_sum</th>\n",
       "      <th>v_neu_sum</th>\n",
       "      <th>v_pos_sum</th>\n",
       "      <th>v_freq_words</th>\n",
       "      <th>vader_fq_all</th>\n",
       "      <th>v_compound_fd</th>\n",
       "      <th>v_neg_fd</th>\n",
       "      <th>v_neu_fd</th>\n",
       "      <th>v_pos_fd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>movie said many times missed opportunity see t...</td>\n",
       "      <td>{'neg': 0.181, 'neu': 0.633, 'pos': 0.187, 'co...</td>\n",
       "      <td>-0.1531</td>\n",
       "      <td>0.181</td>\n",
       "      <td>0.633</td>\n",
       "      <td>0.187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.4019</td>\n",
       "      <td>0.066</td>\n",
       "      <td>0.785</td>\n",
       "      <td>0.148</td>\n",
       "      <td>dark phoenix think need super film tbh dc comi...</td>\n",
       "      <td>{'neg': 0.075, 'neu': 0.594, 'pos': 0.331, 'co...</td>\n",
       "      <td>0.8020</td>\n",
       "      <td>0.075</td>\n",
       "      <td>0.594</td>\n",
       "      <td>0.331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.790</td>\n",
       "      <td>0.210</td>\n",
       "      <td>overrated movie everyone praised time reviews ...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.596, 'pos': 0.404, 'comp...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.596</td>\n",
       "      <td>0.404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.6591</td>\n",
       "      <td>0.175</td>\n",
       "      <td>0.762</td>\n",
       "      <td>0.063</td>\n",
       "      <td>make movie idiotic film say phoenix master act...</td>\n",
       "      <td>{'neg': 0.184, 'neu': 0.609, 'pos': 0.207, 'co...</td>\n",
       "      <td>0.2570</td>\n",
       "      <td>0.184</td>\n",
       "      <td>0.609</td>\n",
       "      <td>0.207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.7311</td>\n",
       "      <td>0.071</td>\n",
       "      <td>0.779</td>\n",
       "      <td>0.150</td>\n",
       "      <td>movie terrible acting good dont movies plot ma...</td>\n",
       "      <td>{'neg': 0.193, 'neu': 0.58, 'pos': 0.227, 'com...</td>\n",
       "      <td>0.3261</td>\n",
       "      <td>0.193</td>\n",
       "      <td>0.580</td>\n",
       "      <td>0.227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3   What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4   Terrible\\nThe only thing good about this movi...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "3  [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4  [ Terrible\\nThe only thing good about this mov...              9   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "3  [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4  [terrible, the, only, thing, good, about, this...         124   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "3  [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4  [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3  [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4  [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "\n",
       "                                        topwords_fil  ... v_compound_sum  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...         0.0000   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...         0.4019   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...         0.7269   \n",
       "3  [(make, 2), (movie, 2), (idiotic, 1), (film, 1...  ...        -0.6591   \n",
       "4  [(movie, 4), (terrible, 3), (acting, 3), (good...  ...         0.7311   \n",
       "\n",
       "  v_neg_sum v_neu_sum  v_pos_sum  \\\n",
       "0     0.000     0.000      0.000   \n",
       "1     0.066     0.785      0.148   \n",
       "2     0.000     0.790      0.210   \n",
       "3     0.175     0.762      0.063   \n",
       "4     0.071     0.779      0.150   \n",
       "\n",
       "                                        v_freq_words  \\\n",
       "0  movie said many times missed opportunity see t...   \n",
       "1  dark phoenix think need super film tbh dc comi...   \n",
       "2  overrated movie everyone praised time reviews ...   \n",
       "3  make movie idiotic film say phoenix master act...   \n",
       "4  movie terrible acting good dont movies plot ma...   \n",
       "\n",
       "                                        vader_fq_all  v_compound_fd v_neg_fd  \\\n",
       "0  {'neg': 0.181, 'neu': 0.633, 'pos': 0.187, 'co...        -0.1531    0.181   \n",
       "1  {'neg': 0.075, 'neu': 0.594, 'pos': 0.331, 'co...         0.8020    0.075   \n",
       "2  {'neg': 0.0, 'neu': 0.596, 'pos': 0.404, 'comp...         0.7269    0.000   \n",
       "3  {'neg': 0.184, 'neu': 0.609, 'pos': 0.207, 'co...         0.2570    0.184   \n",
       "4  {'neg': 0.193, 'neu': 0.58, 'pos': 0.227, 'com...         0.3261    0.193   \n",
       "\n",
       "  v_neu_fd v_pos_fd  \n",
       "0    0.633    0.187  \n",
       "1    0.594    0.331  \n",
       "2    0.596    0.404  \n",
       "3    0.609    0.207  \n",
       "4    0.580    0.227  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 1: Vader Scores (Original)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6621621621621622\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound','v_pos', 'v_neg', 'v_neu']) # 0.645\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 2: Vader Scores (from Summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7027027027027027\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_sum','v_pos_sum', 'v_neg_sum', 'v_neu_sum']) # 0.59\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 3: Vader Scores (original) AND Vader Scores (summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6891891891891891\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_sum','v_pos_sum', 'v_neg_sum', 'v_neu_sum', \n",
    "                          'v_compound','v_pos', 'v_neg', 'v_neu']) # 0.618\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 4: Vader Scores (50 most frequent -- filtered -- words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7297297297297297\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_fd','v_pos_fd', 'v_neu_fd', 'v_neg_fd']) # 0.598\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 5: All `compound` Vader Scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7027027027027027\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_fd','v_compound_sum', 'v_compound']) # 0.615\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 6: ALL THE NUMBERS!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7027027027027027\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_sum','v_pos_sum', 'v_neg_sum', 'v_neu_sum', \n",
    "                          'v_compound_fd','v_pos_fd', 'v_neg_fd', 'v_neu_fd', \n",
    "                          'v_compound','v_pos', 'v_neg', 'v_neu']) # 0.613\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST 7: Test UNFILTERED most frequent words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_freq_words(freq_dist):\n",
    "    sorted_words = sorted(freq_dist.items(), key=lambda kv: kv[1], reverse=True)\n",
    "    return ' '.join(word[0] for word in sorted_words[:50])\n",
    "\n",
    "all_df['v_freq_words_unfil'] = all_df.apply(lambda x: get_freq_words(x['freq_dist_unfil']), axis=1)\n",
    "\n",
    "all_df['vader_fd_all_unfil'] = all_df.apply(lambda x: get_vader_score(x['v_freq_words_unfil']),axis=1)\n",
    "\n",
    "all_df['v_compound_fd_uf'] = all_df.apply(lambda x: separate_vader_score(x['vader_fd_all_unfil'], 'compound'),axis=1)\n",
    "all_df['v_neg_fd_uf'] = all_df.apply(lambda x: separate_vader_score(x['vader_fd_all_unfil'], 'neg'),axis=1)\n",
    "all_df['v_neu_fd_uf'] = all_df.apply(lambda x: separate_vader_score(x['vader_fd_all_unfil'], 'neu'),axis=1)\n",
    "all_df['v_pos_fd_uf'] = all_df.apply(lambda x: separate_vader_score(x['vader_fd_all_unfil'], 'pos'),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7297297297297297\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_sum','v_pos_sum', 'v_neg_sum', 'v_neu_sum', \n",
    "                          'v_compound_fd','v_pos_fd', 'v_neg_fd', 'v_neu_fd', \n",
    "                          'v_compound_fd_uf','v_pos_fd_uf', 'v_neg_fd_uf', 'v_neu_fd_uf',\n",
    "                          'v_compound','v_pos', 'v_neg', 'v_neu']) # 0.618\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7162162162162162\n"
     ]
    }
   ],
   "source": [
    "small_df = all_df.filter(['v_compound_fd_uf','v_pos_fd_uf', 'v_neg_fd_uf', 'v_neu_fd_uf']) # 0.603\n",
    "get_NB(small_df, all_df['PoN'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "summaries_pos = all_df[all_df['PoN'] == 'P']\n",
    "summaries_neg = all_df[all_df['PoN'] == 'N']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "summaries_pos_list = summaries_pos['summary_sentences'].tolist()\n",
    "summaries_neg_list = summaries_neg['summary_sentences'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Just don\\'t expect any \"real\" Batman references.Director Phillips delivers a film that looks and feels and sounds much different than other comic book movies.Cinematographer Lawrence Sher is a frequent Phillips collaborator (all 3 Hangover movies) and the dark look and gritty feel are present in most every shot.We are informed Arthur suffers from Pseudobulbar Affect, also known as emotional incontinence, which causes that creepy laughter to pop up at some inappropriate times.The \"Smile\" song is especially relevant as its origins can be traced by to Charlie Chaplin\\'s MODERN TIMES, a silent movie classic featured in this film.This is not one for the younger kids, no matter how much they enjoy THE AVENGERS or WONDER WOMAN (or any other DC or Marvel film).']"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summaries_pos_list[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summaries_neg_list[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summaries_neg_list[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>v_freq_words_unfil</th>\n",
       "      <th>vader_fd_all_unfil</th>\n",
       "      <th>v_compound_fd_uf</th>\n",
       "      <th>v_neg_fd_uf</th>\n",
       "      <th>v_neu_fd_uf</th>\n",
       "      <th>v_pos_fd_uf</th>\n",
       "      <th>nltk_negs</th>\n",
       "      <th>unigram_feats</th>\n",
       "      <th>bigram_feats</th>\n",
       "      <th>bigram_feats_neg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>of i the that it a and to was had been very mo...</td>\n",
       "      <td>{'neg': 0.041, 'neu': 0.816, 'pos': 0.143, 'co...</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.816</td>\n",
       "      <td>0.143</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>[of, i, the, that, it, a, and, to, was, had, b...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>was a that for there dark in it phoenix i do t...</td>\n",
       "      <td>{'neg': 0.097, 'neu': 0.732, 'pos': 0.171, 'co...</td>\n",
       "      <td>0.4427</td>\n",
       "      <td>0.097</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.171</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>[a, for, was, dark, was_NEG, that_NEG, phoenix...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>overrated movie everyone praised an of all tim...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.783, 'pos': 0.217, 'comp...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.783</td>\n",
       "      <td>0.217</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>[overrated, movie, everyone, praised, an, of, ...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>and is make movie to with the what idiotic fil...</td>\n",
       "      <td>{'neg': 0.208, 'neu': 0.741, 'pos': 0.051, 'co...</td>\n",
       "      <td>-0.8344</td>\n",
       "      <td>0.208</td>\n",
       "      <td>0.741</td>\n",
       "      <td>0.051</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>[and_NEG, make_NEG, movie_NEG, to_NEG, with_NE...</td>\n",
       "      <td>[what_idiotic, idiotic_film, film_i, i_can, ca...</td>\n",
       "      <td>[what_idiotic, idiotic_film, film_i, i_can, ca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>...</td>\n",
       "      <td>the this movie it to terrible acting but and f...</td>\n",
       "      <td>{'neg': 0.181, 'neu': 0.703, 'pos': 0.116, 'co...</td>\n",
       "      <td>-0.5853</td>\n",
       "      <td>0.181</td>\n",
       "      <td>0.703</td>\n",
       "      <td>0.116</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>[it_NEG, the_NEG, to_NEG, and_NEG, for_NEG, th...</td>\n",
       "      <td>[terrible_the, the_only, only_thing, thing_goo...</td>\n",
       "      <td>[terrible_the, the_only, only_thing, thing_goo...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3   What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4   Terrible\\nThe only thing good about this movi...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "3  [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4  [ Terrible\\nThe only thing good about this mov...              9   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "3  [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4  [terrible, the, only, thing, good, about, this...         124   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "3  [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4  [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3  [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4  [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "\n",
       "                                        topwords_fil  ...  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...   \n",
       "3  [(make, 2), (movie, 2), (idiotic, 1), (film, 1...  ...   \n",
       "4  [(movie, 4), (terrible, 3), (acting, 3), (good...  ...   \n",
       "\n",
       "                                  v_freq_words_unfil  \\\n",
       "0  of i the that it a and to was had been very mo...   \n",
       "1  was a that for there dark in it phoenix i do t...   \n",
       "2  overrated movie everyone praised an of all tim...   \n",
       "3  and is make movie to with the what idiotic fil...   \n",
       "4  the this movie it to terrible acting but and f...   \n",
       "\n",
       "                                  vader_fd_all_unfil v_compound_fd_uf  \\\n",
       "0  {'neg': 0.041, 'neu': 0.816, 'pos': 0.143, 'co...           0.6705   \n",
       "1  {'neg': 0.097, 'neu': 0.732, 'pos': 0.171, 'co...           0.4427   \n",
       "2  {'neg': 0.0, 'neu': 0.783, 'pos': 0.217, 'comp...           0.7269   \n",
       "3  {'neg': 0.208, 'neu': 0.741, 'pos': 0.051, 'co...          -0.8344   \n",
       "4  {'neg': 0.181, 'neu': 0.703, 'pos': 0.116, 'co...          -0.5853   \n",
       "\n",
       "   v_neg_fd_uf  v_neu_fd_uf  v_pos_fd_uf  \\\n",
       "0        0.041        0.816        0.143   \n",
       "1        0.097        0.732        0.171   \n",
       "2        0.000        0.783        0.217   \n",
       "3        0.208        0.741        0.051   \n",
       "4        0.181        0.703        0.116   \n",
       "\n",
       "                                           nltk_negs  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...   \n",
       "2  [everyone, praised, an, overrated, movie, over...   \n",
       "3  [what, idiotic, film, i, can, say, that, phoen...   \n",
       "4  [terrible, the, only, thing, good, about, this...   \n",
       "\n",
       "                                       unigram_feats  \\\n",
       "0  [of, i, the, that, it, a, and, to, was, had, b...   \n",
       "1  [a, for, was, dark, was_NEG, that_NEG, phoenix...   \n",
       "2  [overrated, movie, everyone, praised, an, of, ...   \n",
       "3  [and_NEG, make_NEG, movie_NEG, to_NEG, with_NE...   \n",
       "4  [it_NEG, the_NEG, to_NEG, and_NEG, for_NEG, th...   \n",
       "\n",
       "                                        bigram_feats  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...   \n",
       "3  [what_idiotic, idiotic_film, film_i, i_can, ca...   \n",
       "4  [terrible_the, the_only, only_thing, thing_goo...   \n",
       "\n",
       "                                    bigram_feats_neg  \n",
       "0  [missed_opportunity, opportunity_i, i_had, had...  \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...  \n",
       "2  [everyone_praised, praised_an, an_overrated, o...  \n",
       "3  [what_idiotic, idiotic_film, film_i, i_can, ca...  \n",
       "4  [terrible_the, the_only, only_thing, thing_goo...  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### VERSION 1\n",
    "#     all_words_neg = sentim_analyzer.all_words([mark_negation(doc) for doc in training_docs])\n",
    "#     unigram_feats = sentim_analyzer.unigram_word_feats(all_words_neg)\n",
    "#     sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats)\n",
    "#     training_set = sentim_analyzer.apply_features(training_docs)\n",
    "#     test_set = sentim_analyzer.apply_features(testing_docs)\n",
    "sentim_analyzer = SentimentAnalyzer()\n",
    "\n",
    "def get_nltk_negs(tokens):\n",
    "    all_words_neg = sentim_analyzer.all_words([mark_negation(tokens)])\n",
    "    return all_words_neg\n",
    "\n",
    "def get_unigram_feats(neg_tokens):\n",
    "    unigram_feats = sentim_analyzer.unigram_word_feats(neg_tokens)\n",
    "    return unigram_feats\n",
    "    \n",
    "def get_bigram_feats(tokens):\n",
    "    ngrams = zip(*[tokens[i:] for i in range(2)])\n",
    "    return [\"_\".join(ngram) for ngram in ngrams]\n",
    "\n",
    "all_df['nltk_negs'] = all_df.apply(lambda x: get_nltk_negs(x['tokens']), axis=1)\n",
    "all_df['unigram_feats'] = all_df.apply(lambda x: get_unigram_feats(x['nltk_negs']), axis=1)\n",
    "all_df['bigram_feats'] = all_df.apply(lambda x: get_bigram_feats(x['tokens']), axis=1)\n",
    "all_df['bigram_feats_neg'] = all_df.apply(lambda x: get_bigram_feats(x['nltk_negs']), axis=1)\n",
    "all_df[:5]\n",
    "# all_df['nltk_unfil'] = all_df.apply(lambda x: get_nltk_data(x['tokens']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "### VERSION 2\n",
    "#     all_words_neg = sentim_analyzer.all_words([mark_negation(doc) for doc in training_docs])\n",
    "#     unigram_feats = sentim_analyzer.unigram_word_feats(all_words_neg)\n",
    "#     sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats)\n",
    "#     training_set = sentim_analyzer.apply_features(training_docs)\n",
    "#     test_set = sentim_analyzer.apply_features(testing_docs)\n",
    "sentim_analyzer = SentimentAnalyzer()\n",
    "\n",
    "def get_nltk_data(tokens):\n",
    "    neg_tokens = sentim_analyzer.all_words([mark_negation(tokens)])\n",
    "    unigram_feats = sentim_analyzer.unigram_word_feats(neg_tokens)\n",
    "    sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats)\n",
    "    return sentim_analyzer.apply_features(tokens)\n",
    "\n",
    "\n",
    "# def get_unigram_feats(neg_tokens):\n",
    "    \n",
    "#     return unigram_feats\n",
    "nltk_df = pd.DataFrame()\n",
    "nltk_df['nltk_data'] = all_df.apply(lambda x: get_nltk_data(x['tokens']), axis=1)\n",
    "\n",
    "# all_df['nltk']\n",
    "# all_df['unigram_feats'] = all_df.apply(lambda x: get_unigram_feats(x['nltk_negs']), axis=1)\n",
    "# all_df['nltk_unfil'] = all_df.apply(lambda x: get_nltk_data(x['tokens']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df['nltk_all'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      0\n",
       "2      0\n",
       "3      0\n",
       "4      0\n",
       "      ..\n",
       "118    0\n",
       "119    0\n",
       "120    0\n",
       "121    0\n",
       "122    0\n",
       "Name: nltk_all, Length: 246, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['nltk_all']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>vader_fd_all_unfil</th>\n",
       "      <th>v_compound_fd_uf</th>\n",
       "      <th>v_neg_fd_uf</th>\n",
       "      <th>v_neu_fd_uf</th>\n",
       "      <th>v_pos_fd_uf</th>\n",
       "      <th>nltk_negs</th>\n",
       "      <th>unigram_feats</th>\n",
       "      <th>bigram_feats</th>\n",
       "      <th>bigram_feats_neg</th>\n",
       "      <th>nltk_all</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>{'neg': 0.041, 'neu': 0.816, 'pos': 0.143, 'co...</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.816</td>\n",
       "      <td>0.143</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>[of, i, the, that, it, a, and, to, was, had, b...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>{'neg': 0.097, 'neu': 0.732, 'pos': 0.171, 'co...</td>\n",
       "      <td>0.4427</td>\n",
       "      <td>0.097</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.171</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>[a, for, was, dark, was_NEG, that_NEG, phoenix...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.783, 'pos': 0.217, 'comp...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.783</td>\n",
       "      <td>0.217</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>[overrated, movie, everyone, praised, an, of, ...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "\n",
       "                                        topwords_fil  ...  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...   \n",
       "\n",
       "                                  vader_fd_all_unfil v_compound_fd_uf  \\\n",
       "0  {'neg': 0.041, 'neu': 0.816, 'pos': 0.143, 'co...           0.6705   \n",
       "1  {'neg': 0.097, 'neu': 0.732, 'pos': 0.171, 'co...           0.4427   \n",
       "2  {'neg': 0.0, 'neu': 0.783, 'pos': 0.217, 'comp...           0.7269   \n",
       "\n",
       "  v_neg_fd_uf  v_neu_fd_uf  v_pos_fd_uf  \\\n",
       "0       0.041        0.816        0.143   \n",
       "1       0.097        0.732        0.171   \n",
       "2       0.000        0.783        0.217   \n",
       "\n",
       "                                           nltk_negs  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...   \n",
       "2  [everyone, praised, an, overrated, movie, over...   \n",
       "\n",
       "                                       unigram_feats  \\\n",
       "0  [of, i, the, that, it, a, and, to, was, had, b...   \n",
       "1  [a, for, was, dark, was_NEG, that_NEG, phoenix...   \n",
       "2  [overrated, movie, everyone, praised, an, of, ...   \n",
       "\n",
       "                                        bigram_feats  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...   \n",
       "\n",
       "                                    bigram_feats_neg nltk_all  \n",
       "0  [missed_opportunity, opportunity_i, i_had, had...        0  \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...        0  \n",
       "2  [everyone_praised, praised_an, an_overrated, o...        0  \n",
       "\n",
       "[3 rows x 42 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STEP 8: Add Bag of Words to Machine Learning models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.tokenize import casual_tokenize\n",
    "from collections import Counter\n",
    "all_df['bow_nosw'] = all_df.apply(lambda x: Counter(casual_tokenize(x[0])), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>v_compound_fd_uf</th>\n",
       "      <th>v_neg_fd_uf</th>\n",
       "      <th>v_neu_fd_uf</th>\n",
       "      <th>v_pos_fd_uf</th>\n",
       "      <th>nltk_negs</th>\n",
       "      <th>unigram_feats</th>\n",
       "      <th>bigram_feats</th>\n",
       "      <th>bigram_feats_neg</th>\n",
       "      <th>nltk_all</th>\n",
       "      <th>bow_nosw</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.816</td>\n",
       "      <td>0.143</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>[of, i, the, that, it, a, and, to, was, had, b...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.4427</td>\n",
       "      <td>0.097</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.171</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>[a, for, was, dark, was_NEG, that_NEG, phoenix...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.7269</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.783</td>\n",
       "      <td>0.217</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>[overrated, movie, everyone, praised, an, of, ...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "\n",
       "                                        topwords_fil  ... v_compound_fd_uf  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...           0.6705   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...           0.4427   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...           0.7269   \n",
       "\n",
       "  v_neg_fd_uf v_neu_fd_uf  v_pos_fd_uf  \\\n",
       "0       0.041       0.816        0.143   \n",
       "1       0.097       0.732        0.171   \n",
       "2       0.000       0.783        0.217   \n",
       "\n",
       "                                           nltk_negs  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...   \n",
       "2  [everyone, praised, an, overrated, movie, over...   \n",
       "\n",
       "                                       unigram_feats  \\\n",
       "0  [of, i, the, that, it, a, and, to, was, had, b...   \n",
       "1  [a, for, was, dark, was_NEG, that_NEG, phoenix...   \n",
       "2  [overrated, movie, everyone, praised, an, of, ...   \n",
       "\n",
       "                                        bigram_feats  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...   \n",
       "\n",
       "                                    bigram_feats_neg nltk_all  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...        0   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...        0   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...        0   \n",
       "\n",
       "                                            bow_nosw  \n",
       "0  {'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...  \n",
       "1  {'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...  \n",
       "2  {'Everyone': 1, 'praised': 1, 'an': 1, 'overra...  \n",
       "\n",
       "[3 rows x 43 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Keeping punctuation\n",
    "# def diy_cleaner(review):\n",
    "#     both = review.split('\\n')\n",
    "#     title = both[0]\n",
    "#     review = both[1]\n",
    "#     cleaned = title + '.' + title + '.' + review\n",
    "#     return cleaned.lower()\n",
    "\n",
    "# Removing punctuation\n",
    "\n",
    "# def diy_cleaner(review):\n",
    "#     both = review.split('\\n')\n",
    "#     title = both[0]\n",
    "#     review = both[1]\n",
    "#     review = review.replace(\"\\'\",'')\n",
    "#     review = review.replace(\"'\",'')\n",
    "#     review = review.replace(\",\",'')\n",
    "#     cleaned = title + ' ' + title + ' ' + ' '.join(review.split('.'))\n",
    "#     return cleaned.lower()\n",
    "\n",
    "import re, string\n",
    "\n",
    "def diy_cleaner(review):\n",
    "    both = review.split('\\n')\n",
    "    title = both[0]\n",
    "    review = both[1]\n",
    "    review = review.replace(\"'\",\"\")\n",
    "    pattern = re.compile('[\\W_]+')\n",
    "    review = pattern.sub(' ', review)\n",
    "    cleaned = title + ' ' + title + ' ' + review\n",
    "    return cleaned.lower()\n",
    "\n",
    "all_df['diy_cleaner'] = all_df.apply(lambda x: diy_cleaner(x[0]), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[' missed opportunity  missed opportunity i had been very excited to see this movie ever since i had 1st heard about it and was anticipating its release but when it started getting the type of hype and press that it was i became a bit apprehensive as the things that were being said about it which seemed outrageous mostly were things that were said about other moves i had been looking forward to seeing and that had ended letting me down the joker sadly turned out to be one of those movies for me now as i know it has been said many times before phoenixs portrayal of man with mental health depression was very very good convincing but the story and the plot seemed like a big missed opportunity to deliver an anti hero origin story of one of the most coveted villains in comic book lore i liked the quasi mirroring of a failed system whose middle lower class revolt against the rich in a sort of if we burn you burn with us type of way that has been done many times before im sure people can see glimpses of that today in our us culture and who knows maybe the studio execs got their fingers involved and are the ones that watered it down a bit too much maybe there will be a directors cut that is darker than the theatrical release i certainly hope so because for all the reviews i have read that speak of people walking out of theaters because of the dark feel and psychological overtones being too much for them to stomach all i felt was a sense of wanting it to be bigger and grander than what i was seeing i would recommend seeing this movie so that you can formulate your own opinion but i gave it a low rating because when it was over i walked out feeling like i just saw a movie ive already seen many times before ',\n",
       " ' funny like a clown  funny like a clown greetings again from the darkness the first thing to know is that this is not a superhero movie in fact there are no heroes in the movie unless you would like to apply the label to a single mom who lives down the hall from arthur fleck mr fleck lives at home with his invalid mother in a grungy run down apartment he works as a clown for hire dreams of becoming a stand up comedian and depends on social services to supply the 7 medications he takes since being released from arkham state hospital its a bleak existence at a bleak time in a bleak city gotham is in the midst of a garbage workers strike only the super rats are happy political upheaval and a growing chasm between the classes and then it gets worse for arthur the second thing to know is that this is a standalone joker film and one mostly unrelated or not connected to previous projects featuring the colorful clown prince character played and voiced by such memorable actors as cesar romero jack nicholson heath ledger mark hamill jared leto and even zach galifianakis director todd phillips who co wrote the script with scott silver is best known for such extreme comedies as the hangover franchise and old school so hes a bit outside of his usual wheelhouse phillips and silver seem to embrace not just the history of the character but also the look texture and tone of filmmaking from an earlier era the gritty and outcast feel of scorceses taxi driver and the king of comedy is present and so are numerous tributes to familiar joker moments of days gone by three time oscar nominee joaquin phoenix plays arthur fleck and he delivers arthurs slow descent into madness or shall we say further descent its clear from the beginning that arthur views himself as ignored by society while all he wants to do is bring joy and laughter to others and be noticed his daydreams or visions of himself in a better world send a strong message phoenix shows us what full commitment to a role looks like he lost 50 pounds leaving a frame that contorts moves and dances in a manner unlike what weve seen before in fact its a toss up on which shows up more frequently his dances moves or his maniacal pained laughter we are informed arthur suffers from pseudobulbar affect also known as emotional incontinence which causes that creepy laughter to pop up at some inappropriate times of course the comparisons to heath ledgers oscar winning turn in the dark knight are inevitable the roles and films are written quite differently and its safe to say both actors were all in action sequences and special visual effects are both noticeably absent but the violence is sure to shock this is not one for the younger kids no matter how much they enjoy the avengers or wonder woman or any other dc or marvel film this gritty visceral approach is often a tough watch and is much more a character study of mental illness than a costume drama although arthurs clothes and make up are front and center when arthur states i have nothing but bad thoughts we believe him and the sympathetic back story explains a great deal and will likely prove quite controversial phoenix dominates the film as he should and supporting work is provided by robert de niro as murray franklin a tv talk show host in the johnny carson mode zazie beetz deadpool 2 as the single mom neighbor sophie dumond frances conroy as penny fleck arthurs mother brett cullen as a not so empathetic thomas wayne and shea whigham and bill camp as police detectives ill hesitantly mention that dante pereira olson makes a couple of brief appearances as an adolescent bruce wayne and just for fun we get a shot of the young man honing the batpole skills he will use later in life just dont expect any real batman references director phillips delivers a film that looks and feels and sounds much different than other comic book movies cinematographer lawrence sher is a frequent phillips collaborator all 3 hangover movies and the dark look and gritty feel are present in most every shot hildur guonadottir this years emmy winner for chernobyl serves up a foreboding score one that never overwhelms and one that contrasts perfectly with the more traditional songs utilized throughout stephen sondheims send in the clowns jimmy durante singing smile creams white room thats life by frank sinatra and gary glitters familiar rock and roll part 1 and 2 the smile song is especially relevant as its origins can be traced by to charlie chaplins modern times a silent movie classic featured in this film phillips even uses the saul bass designed warner bros logo to open the credits making sure we understand the time period no cell phones etc the film traces arthurs slide into crime a transition that he wasnt seeking and one that he believes was forced upon him his rise as a savior to the working class is secondary to his own journey and the chaos is handled on the perimeters of the film preventing this from becoming a super villain movie keep in mind joker played at venice telluride and toronto three prestigious festivals this is just another thing that sets it apart from others in the genre despite the 1981 time stamp the consistent anti rich message and class disparity is prevalent throughout this appears to be phillips way of including a contemporary theme in a decades old setting and its a cautionary tale that there should be no clown left behind ']"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['diy_cleaner'][0].tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create BOW using (1) `casual_tokenize` and (2) `Counter`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df['bow_v2'] = all_df.apply(lambda x: Counter(casual_tokenize(x['diy_cleaner'])), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>v_neu_fd_uf</th>\n",
       "      <th>v_pos_fd_uf</th>\n",
       "      <th>nltk_negs</th>\n",
       "      <th>unigram_feats</th>\n",
       "      <th>bigram_feats</th>\n",
       "      <th>bigram_feats_neg</th>\n",
       "      <th>nltk_all</th>\n",
       "      <th>bow_nosw</th>\n",
       "      <th>diy_cleaner</th>\n",
       "      <th>bow_v2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.816</td>\n",
       "      <td>0.143</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>[of, i, the, that, it, a, and, to, was, had, b...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...</td>\n",
       "      <td>missed opportunity  missed opportunity i had ...</td>\n",
       "      <td>{'missed': 3, 'opportunity': 3, 'i': 14, 'had'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.171</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>[a, for, was, dark, was_NEG, that_NEG, phoenix...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...</td>\n",
       "      <td>5/5 for phoenix's acting..  5/5 for phoenix's...</td>\n",
       "      <td>{'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.783</td>\n",
       "      <td>0.217</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>[overrated, movie, everyone, praised, an, of, ...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "      <td>everyone praised an overrated movie.  everyon...</td>\n",
       "      <td>{'everyone': 2, 'praised': 2, 'an': 2, 'overra...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "\n",
       "                                        topwords_fil  ... v_neu_fd_uf  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...       0.816   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...       0.732   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...       0.783   \n",
       "\n",
       "  v_pos_fd_uf                                          nltk_negs  \\\n",
       "0       0.143  [missed, opportunity, i, had, been, very, exci...   \n",
       "1       0.171  [for, phoenix, i, do, think, there, was, a, ne...   \n",
       "2       0.217  [everyone, praised, an, overrated, movie, over...   \n",
       "\n",
       "                                       unigram_feats  \\\n",
       "0  [of, i, the, that, it, a, and, to, was, had, b...   \n",
       "1  [a, for, was, dark, was_NEG, that_NEG, phoenix...   \n",
       "2  [overrated, movie, everyone, praised, an, of, ...   \n",
       "\n",
       "                                        bigram_feats  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...   \n",
       "\n",
       "                                    bigram_feats_neg  nltk_all  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...         0   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...         0   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...         0   \n",
       "\n",
       "                                            bow_nosw  \\\n",
       "0  {'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...   \n",
       "1  {'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...   \n",
       "2  {'Everyone': 1, 'praised': 1, 'an': 1, 'overra...   \n",
       "\n",
       "                                         diy_cleaner  \\\n",
       "0   missed opportunity  missed opportunity i had ...   \n",
       "1   5/5 for phoenix's acting..  5/5 for phoenix's...   \n",
       "2   everyone praised an overrated movie.  everyon...   \n",
       "\n",
       "                                              bow_v2  \n",
       "0  {'missed': 3, 'opportunity': 3, 'i': 14, 'had'...  \n",
       "1  {'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...  \n",
       "2  {'everyone': 2, 'praised': 2, 'an': 2, 'overra...  \n",
       "\n",
       "[3 rows x 45 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Get a Bag of Words from a column (for wordclouds etc!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_bow_from_column(df, column):\n",
    "    all_column_data = ' '.join(df[column].tolist())\n",
    "    all_column_fd = Counter(all_column_data.split())\n",
    "    return all_column_fd\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Get BOW for all, BOW for positive, BOW for negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "big_bow = get_bow_from_column(all_df, 'diy_cleaner')\n",
    "big_bow_n = get_bow_from_column(all_df[all_df['PoN'] == 'N'], 'diy_cleaner')\n",
    "big_bow_p = get_bow_from_column(all_df[all_df['PoN'] == 'P'], 'diy_cleaner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('the', 908),\n",
       " ('a', 466),\n",
       " ('and', 428),\n",
       " ('to', 398),\n",
       " ('of', 375),\n",
       " ('is', 342),\n",
       " ('i', 277),\n",
       " ('it', 268),\n",
       " ('movie', 256),\n",
       " ('this', 250)]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_n.most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('the', 1161),\n",
       " ('a', 649),\n",
       " ('and', 586),\n",
       " ('of', 522),\n",
       " ('to', 474),\n",
       " ('is', 449),\n",
       " ('it', 325),\n",
       " ('that', 280),\n",
       " ('in', 273),\n",
       " ('this', 272)]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_p.most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Wow this is unhelpful. Removing words < 3 characters like Professor Gates does!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pruner(review):\n",
    "    clean_review = ' '.join([word for word in review.split() if len(word) > 3])\n",
    "    return clean_review\n",
    "\n",
    "all_df['pruned'] = all_df.apply(lambda x: pruner(x['diy_cleaner']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "big_bow = get_bow_from_column(all_df, 'pruned')\n",
    "big_bow_n = get_bow_from_column(all_df[all_df['PoN'] == 'N'], 'pruned')\n",
    "big_bow_p = get_bow_from_column(all_df[all_df['PoN'] == 'P'], 'pruned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('this', 522),\n",
       " ('movie', 508),\n",
       " ('that', 493),\n",
       " ('joker', 440),\n",
       " ('film', 283),\n",
       " ('with', 249),\n",
       " ('from', 176),\n",
       " ('just', 169),\n",
       " ('phoenix', 159),\n",
       " ('character', 153)]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow.most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('movie', 256),\n",
       " ('this', 250),\n",
       " ('that', 213),\n",
       " ('joker', 197),\n",
       " ('with', 103),\n",
       " ('just', 97),\n",
       " ('film', 79),\n",
       " ('from', 77),\n",
       " ('about', 75),\n",
       " ('character', 66)]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_n.most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('that', 280),\n",
       " ('this', 272),\n",
       " ('movie', 252),\n",
       " ('joker', 243),\n",
       " ('film', 204),\n",
       " ('with', 146),\n",
       " ('phoenix', 108),\n",
       " ('from', 99),\n",
       " ('character', 87),\n",
       " ('joaquin', 80)]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_p.most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      missed opportunity missed opportunity been ver...\n",
       "1      phoenix's acting.. phoenix's acting.. dont thi...\n",
       "2      everyone praised overrated movie. everyone pra...\n",
       "3      what idiotic film what idiotic film that phoen...\n",
       "4      terrible terrible only thing good about this m...\n",
       "                             ...                        \n",
       "118    nerve-wracking, very uncomfortable nerve-wrack...\n",
       "119    solid film there glaring problems solid film t...\n",
       "120    joker endgame joker endgame need more everythi...\n",
       "121    absolutely absolutely strong fanboy hype rush ...\n",
       "122    overhyped, it's alright overhyped, it's alrigh...\n",
       "Name: pruned, Length: 246, dtype: object"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# bow_df = all_df['pruned']\n",
    "# get_NB(small_df, all_df['PoN'])\n",
    "all_df['pruned']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>been</th>\n",
       "      <th>very</th>\n",
       "      <th>excited</th>\n",
       "      <th>this</th>\n",
       "      <th>movie</th>\n",
       "      <th>ever</th>\n",
       "      <th>since</th>\n",
       "      <th>heard</th>\n",
       "      <th>...</th>\n",
       "      <th>information</th>\n",
       "      <th>follows</th>\n",
       "      <th>stress</th>\n",
       "      <th>overlook</th>\n",
       "      <th>offers</th>\n",
       "      <th>easy</th>\n",
       "      <th>answers</th>\n",
       "      <th>alike</th>\n",
       "      <th>company</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 4249 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed  opportunity  been  very  excited  this  movie  ever  since  \\\n",
       "PoN                                                                       \n",
       "N         3            3     4     3        1     2      3     1      1   \n",
       "N         0            0     1     0        0     1      0     0      0   \n",
       "N         0            0     0     0        0     1      3     0      0   \n",
       "N         0            0     0     0        0     2      2     0      0   \n",
       "N         0            0     0     0        0     4      4     0      0   \n",
       "\n",
       "     heard  ...  information  follows  stress  overlook  offers  easy  \\\n",
       "PoN         ...                                                         \n",
       "N        1  ...            0        0       0         0       0     0   \n",
       "N        0  ...            0        0       0         0       0     0   \n",
       "N        0  ...            0        0       0         0       0     0   \n",
       "N        0  ...            0        0       0         0       0     0   \n",
       "N        0  ...            0        0       0         0       0     0   \n",
       "\n",
       "     answers  alike  company  acceptable  \n",
       "PoN                                       \n",
       "N          0      0        0           0  \n",
       "N          0      0        0           0  \n",
       "N          0      0        0           0  \n",
       "N          0      0        0           0  \n",
       "N          0      0        0           0  \n",
       "\n",
       "[5 rows x 4249 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['bow_v3'] = all_df.apply(lambda x: Counter(casual_tokenize(x['pruned'])), axis=1)\n",
    "new_df = pd.DataFrame(all_df['bow_v3'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6486486486486487\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>i</th>\n",
       "      <th>had</th>\n",
       "      <th>been</th>\n",
       "      <th>very</th>\n",
       "      <th>excited</th>\n",
       "      <th>to</th>\n",
       "      <th>see</th>\n",
       "      <th>this</th>\n",
       "      <th>...</th>\n",
       "      <th>stress</th>\n",
       "      <th>overlook</th>\n",
       "      <th>&gt;</th>\n",
       "      <th>offers</th>\n",
       "      <th>easy</th>\n",
       "      <th>answers</th>\n",
       "      <th>alike</th>\n",
       "      <th>company</th>\n",
       "      <th>til</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 4530 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed  opportunity   i  had  been  very  excited  to  see  this  ...  \\\n",
       "PoN                                                                    ...   \n",
       "N         3            3  14    4     4     3        1   6    2     2  ...   \n",
       "N         0            0   1    0     1     0        0   1    1     1  ...   \n",
       "N         0            0   0    0     0     0        0   1    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   2    0     2  ...   \n",
       "N         0            0   2    0     0     0        0   4    0     4  ...   \n",
       "\n",
       "     stress  overlook  >  offers  easy  answers  alike  company  til  \\\n",
       "PoN                                                                    \n",
       "N         0         0  0       0     0        0      0        0    0   \n",
       "N         0         0  0       0     0        0      0        0    0   \n",
       "N         0         0  0       0     0        0      0        0    0   \n",
       "N         0         0  0       0     0        0      0        0    0   \n",
       "N         0         0  0       0     0        0      0        0    0   \n",
       "\n",
       "     acceptable  \n",
       "PoN              \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "\n",
       "[5 rows x 4530 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = pd.DataFrame(all_df['bow_v2'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6486486486486487\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missed</th>\n",
       "      <th>Opportunity</th>\n",
       "      <th>I</th>\n",
       "      <th>had</th>\n",
       "      <th>been</th>\n",
       "      <th>very</th>\n",
       "      <th>excited</th>\n",
       "      <th>to</th>\n",
       "      <th>see</th>\n",
       "      <th>this</th>\n",
       "      <th>...</th>\n",
       "      <th>Strong</th>\n",
       "      <th>iq</th>\n",
       "      <th>Deff</th>\n",
       "      <th>comparable</th>\n",
       "      <th>knight</th>\n",
       "      <th>compensate</th>\n",
       "      <th>company</th>\n",
       "      <th>up.Movie</th>\n",
       "      <th>til</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 6168 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Missed  Opportunity   I  had  been  very  excited  to  see  this  ...  \\\n",
       "PoN                                                                    ...   \n",
       "N         1            1  14    4     4     3        1   6    2     2  ...   \n",
       "N         0            0   1    0     1     0        0   1    1     1  ...   \n",
       "N         0            0   0    0     0     0        0   1    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   2    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   4    0     4  ...   \n",
       "\n",
       "     Strong  iq  Deff  comparable  knight  compensate  company  up.Movie  til  \\\n",
       "PoN                                                                             \n",
       "N         0   0     0           0       0           0        0         0    0   \n",
       "N         0   0     0           0       0           0        0         0    0   \n",
       "N         0   0     0           0       0           0        0         0    0   \n",
       "N         0   0     0           0       0           0        0         0    0   \n",
       "N         0   0     0           0       0           0        0         0    0   \n",
       "\n",
       "     acceptable  \n",
       "PoN              \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "N             0  \n",
       "\n",
       "[5 rows x 6168 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = pd.DataFrame(all_df['bow_nosw'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6756756756756757\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>i</th>\n",
       "      <th>had</th>\n",
       "      <th>been</th>\n",
       "      <th>very</th>\n",
       "      <th>excited</th>\n",
       "      <th>to</th>\n",
       "      <th>see</th>\n",
       "      <th>this</th>\n",
       "      <th>...</th>\n",
       "      <th>paced_NEG</th>\n",
       "      <th>annoying_NEG</th>\n",
       "      <th>deff_NEG</th>\n",
       "      <th>comparable_NEG</th>\n",
       "      <th>compensate_NEG</th>\n",
       "      <th>marketing</th>\n",
       "      <th>company</th>\n",
       "      <th>climax</th>\n",
       "      <th>strange</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 6406 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed  opportunity   i  had  been  very  excited  to  see  this  ...  \\\n",
       "PoN                                                                    ...   \n",
       "N         2            2  12    4     4     3        1   6    2     2  ...   \n",
       "N         0            0   1    0     1     0        0   1    0     1  ...   \n",
       "N         0            0   0    0     0     0        0   1    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   0    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   0    0     1  ...   \n",
       "\n",
       "     paced_NEG  annoying_NEG  deff_NEG  comparable_NEG  compensate_NEG  \\\n",
       "PoN                                                                      \n",
       "N            0             0         0               0               0   \n",
       "N            0             0         0               0               0   \n",
       "N            0             0         0               0               0   \n",
       "N            0             0         0               0               0   \n",
       "N            0             0         0               0               0   \n",
       "\n",
       "     marketing  company  climax  strange  acceptable  \n",
       "PoN                                                   \n",
       "N            0        0       0        0           0  \n",
       "N            0        0       0        0           0  \n",
       "N            0        0       0        0           0  \n",
       "N            0        0       0        0           0  \n",
       "N            0        0       0        0           0  \n",
       "\n",
       "[5 rows x 6406 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['bow_v4'] = all_df.apply(lambda x: Counter(casual_tokenize(' '.join(x['nltk_negs']))), axis=1)\n",
    "new_df = pd.DataFrame(all_df['bow_v4'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6351351351351351\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed_opportunity</th>\n",
       "      <th>opportunity_i</th>\n",
       "      <th>i_had</th>\n",
       "      <th>had_been</th>\n",
       "      <th>been_very</th>\n",
       "      <th>very_excited</th>\n",
       "      <th>excited_to</th>\n",
       "      <th>to_see</th>\n",
       "      <th>see_this</th>\n",
       "      <th>this_movie</th>\n",
       "      <th>...</th>\n",
       "      <th>slow_do</th>\n",
       "      <th>happen_the</th>\n",
       "      <th>middle_and</th>\n",
       "      <th>climax_cinematography</th>\n",
       "      <th>joker_acting</th>\n",
       "      <th>fine_if</th>\n",
       "      <th>forced_at</th>\n",
       "      <th>just_strange</th>\n",
       "      <th>strange_but</th>\n",
       "      <th>but_acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24658 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed_opportunity  opportunity_i  i_had  had_been  been_very  \\\n",
       "PoN                                                                  \n",
       "N                     2              1      3         2          1   \n",
       "N                     0              0      0         0          0   \n",
       "N                     0              0      0         0          0   \n",
       "N                     0              0      0         0          0   \n",
       "N                     0              0      0         0          0   \n",
       "\n",
       "     very_excited  excited_to  to_see  see_this  this_movie  ...  slow_do  \\\n",
       "PoN                                                          ...            \n",
       "N               1           1       1         1           2  ...        0   \n",
       "N               0           0       0         0           0  ...        0   \n",
       "N               0           0       0         0           0  ...        0   \n",
       "N               0           0       0         0           0  ...        0   \n",
       "N               0           0       0         0           4  ...        0   \n",
       "\n",
       "     happen_the  middle_and  climax_cinematography  joker_acting  fine_if  \\\n",
       "PoN                                                                         \n",
       "N             0           0                      0             0        0   \n",
       "N             0           0                      0             0        0   \n",
       "N             0           0                      0             0        0   \n",
       "N             0           0                      0             0        0   \n",
       "N             0           0                      0             0        0   \n",
       "\n",
       "     forced_at  just_strange  strange_but  but_acceptable  \n",
       "PoN                                                        \n",
       "N            0             0            0               0  \n",
       "N            0             0            0               0  \n",
       "N            0             0            0               0  \n",
       "N            0             0            0               0  \n",
       "N            0             0            0               0  \n",
       "\n",
       "[5 rows x 24658 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['bow_v5'] = all_df.apply(lambda x: Counter(casual_tokenize(' '.join(x['bigram_feats']))), axis=1)\n",
    "new_df = pd.DataFrame(all_df['bow_v5'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.581081081081081\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_bigrams = []\n",
    "for review in all_df['bigram_feats']:\n",
    "    for bigram in review:\n",
    "        all_bigrams.append(bigram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "bigram_count = Counter(all_bigrams)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('of_the', 286),\n",
       " ('the_joker', 217),\n",
       " ('this_movie', 162),\n",
       " ('in_the', 157),\n",
       " ('the_movie', 154),\n",
       " ('the_film', 129),\n",
       " ('is_a', 124),\n",
       " ('to_be', 116),\n",
       " ('to_the', 113),\n",
       " ('joker_is', 98)]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bigram_count.most_common(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Returning to Most Frequent Words\n",
    "What can we learn from the intersection of \"positive\" and \"negative\" words? \n",
    "Essentially creating a new \"stopword\" list of \"words that frequently occur in both lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "big_bow = get_bow_from_column(all_df, 'pruned')\n",
    "big_bow_n = get_bow_from_column(all_df[all_df['PoN'] == 'N'], 'pruned')\n",
    "big_bow_p = get_bow_from_column(all_df[all_df['PoN'] == 'P'], 'pruned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['movie',\n",
       " 'this',\n",
       " 'that',\n",
       " 'joker',\n",
       " 'with',\n",
       " 'just',\n",
       " 'film',\n",
       " 'from',\n",
       " 'about',\n",
       " 'character']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "most_common_neg = [word[0] for word in big_bow_n.most_common(100)]\n",
    "most_common_neg[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['that',\n",
       " 'this',\n",
       " 'movie',\n",
       " 'joker',\n",
       " 'film',\n",
       " 'with',\n",
       " 'phoenix',\n",
       " 'from',\n",
       " 'character',\n",
       " 'joaquin']"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "most_common_pos = [word[0] for word in big_bow_p.most_common(100)]\n",
    "most_common_pos[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in array1 that are not in array2:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['after', 'before', 'boring', 'characters', 'didnt', 'different',\n",
       "       'down', 'everyone', 'felt', 'give', 'hype', 'interesting', 'look',\n",
       "       'love', 'never', 'over', 'overrated', 'part', 'phoenixs',\n",
       "       'reviews', 'same', 'their', 'them', 'then', 'things', 'want',\n",
       "       'where', 'without'], dtype='<U11')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "print(\"Unique values in array1 that are not in array2:\")\n",
    "neg_notpos = np.setdiff1d(most_common_neg, most_common_pos)\n",
    "neg_notpos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in array2 that are not in array1:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['actor', 'arthur', 'best', 'book', 'cinema', 'comic', 'could',\n",
       "       'director', 'ever', 'films', 'fleck', 'going', 'here', 'life',\n",
       "       'makes', 'oscar', 'perfect', 'phillips', 'score', 'slow', 'take',\n",
       "       'thing', 'those', 'todd', 'violence', 'while', 'world', 'your'],\n",
       "      dtype='<U11')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Unique values in array2 that are not in array1:\")\n",
    "pos_notneg = np.setdiff1d(most_common_pos, most_common_neg)\n",
    "pos_notneg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Common values between two arrays:\n",
      "72\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['about', 'acting', 'also', 'batman', 'because', 'been', 'being',\n",
       "       'better', 'character', 'dark', 'does', 'doesnt', 'dont', 'driver',\n",
       "       'even', 'feel', 'film', 'first', 'from', 'good', 'great', 'have',\n",
       "       'heath', 'into', 'joaquin', 'joker', 'just', 'know', 'like',\n",
       "       'made', 'make', 'many', 'masterpiece', 'mental', 'more', 'most',\n",
       "       'movie', 'movies', 'much', 'nothing', 'only', 'origin', 'other',\n",
       "       'people', 'performance', 'phoenix', 'plot', 'really', 'seen',\n",
       "       'society', 'some', 'story', 'taxi', 'than', 'that', 'thats',\n",
       "       'there', 'they', 'think', 'this', 'time', 'times', 'very', 'watch',\n",
       "       'well', 'were', 'what', 'when', 'which', 'will', 'with', 'would'],\n",
       "      dtype='<U11')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Common values between two arrays:\")\n",
    "in_both = np.intersect1d(most_common_neg, most_common_pos)\n",
    "print(len(in_both))\n",
    "in_both"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_common_words(num):\n",
    "    most_common_neg = [word[0] for word in big_bow_n.most_common(num)]\n",
    "    most_common_pos = [word[0] for word in big_bow_p.most_common(num)]\n",
    "    in_both = np.intersect1d(most_common_neg, most_common_pos)\n",
    "    neg_notpos = np.setdiff1d(most_common_neg, most_common_pos)\n",
    "    pos_notneg = np.setdiff1d(most_common_pos, most_common_neg)\n",
    "    return [len(in_both), len(neg_notpos), len(pos_notneg), len(in_both)/num, in_both, neg_notpos, pos_notneg]\n",
    "\n",
    "common_100 = get_common_words(100)\n",
    "common_200 = get_common_words(200)\n",
    "common_300 = get_common_words(300)\n",
    "common_500 = get_common_words(500)\n",
    "common_1000 = get_common_words(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[72, 28, 28, 0.72]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_100[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[141, 59, 59, 0.705]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_200[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[204, 96, 96, 0.68]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_300[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[308, 192, 192, 0.616]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_500[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[565, 435, 435, 0.565]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_1000[:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Only tokenizing words that aren't in the 1000 most common"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_only_polarized(tokens):\n",
    "#     return [token for token in tokens if token not in common_1000[4]] # 66\n",
    "#     return [token for token in tokens if token not in common_100[4]] # 70\n",
    "    return [token for token in tokens if token not in common_500[4]] # 70\n",
    "\n",
    "all_df['no_shared_words'] = all_df.apply(lambda x: get_only_polarized(x['tokens']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>bigram_feats_neg</th>\n",
       "      <th>nltk_all</th>\n",
       "      <th>bow_nosw</th>\n",
       "      <th>diy_cleaner</th>\n",
       "      <th>bow_v2</th>\n",
       "      <th>pruned</th>\n",
       "      <th>bow_v3</th>\n",
       "      <th>bow_v4</th>\n",
       "      <th>bow_v5</th>\n",
       "      <th>no_shared_words</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>[missed_opportunity, opportunity_i, i_had, had...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...</td>\n",
       "      <td>missed opportunity  missed opportunity i had ...</td>\n",
       "      <td>{'missed': 3, 'opportunity': 3, 'i': 14, 'had'...</td>\n",
       "      <td>missed opportunity missed opportunity been ver...</td>\n",
       "      <td>{'missed': 3, 'opportunity': 3, 'been': 4, 've...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "      <td>{'missed_opportunity': 2, 'opportunity_i': 1, ...</td>\n",
       "      <td>[missed, opportunity, i, had, excited, to, see...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>[for_phoenix, phoenix_i, i_do, do_think, think...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...</td>\n",
       "      <td>5/5 for phoenix's acting..  5/5 for phoenix's...</td>\n",
       "      <td>{'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...</td>\n",
       "      <td>phoenix's acting.. phoenix's acting.. dont thi...</td>\n",
       "      <td>{'phoenix's': 2, 'acting': 2, '..': 2, 'dont':...</td>\n",
       "      <td>{'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...</td>\n",
       "      <td>{'for_phoenix': 1, 'phoenix_i': 1, 'i_do': 1, ...</td>\n",
       "      <td>[for, i, do, was, a, for, a, tbh, is, a, dc, h...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>[everyone_praised, praised_an, an_overrated, o...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "      <td>everyone praised an overrated movie.  everyon...</td>\n",
       "      <td>{'everyone': 2, 'praised': 2, 'an': 2, 'overra...</td>\n",
       "      <td>everyone praised overrated movie. everyone pra...</td>\n",
       "      <td>{'everyone': 2, 'praised': 2, 'overrated': 3, ...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "      <td>{'everyone_praised': 1, 'praised_an': 1, 'an_o...</td>\n",
       "      <td>[praised, an, of, all, the, are, out, to, be, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>[what_idiotic, idiotic_film, film_i, i_can, ca...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'What': 1, 'idiotic': 1, 'FIlm': 1, 'I': 1, '...</td>\n",
       "      <td>what idiotic film  what idiotic film i can sa...</td>\n",
       "      <td>{'what': 2, 'idiotic': 2, 'film': 2, 'i': 1, '...</td>\n",
       "      <td>what idiotic film what idiotic film that phoen...</td>\n",
       "      <td>{'what': 2, 'idiotic': 2, 'film': 2, 'that': 1...</td>\n",
       "      <td>{'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...</td>\n",
       "      <td>{'what_idiotic': 1, 'idiotic_film': 1, 'film_i...</td>\n",
       "      <td>[idiotic, i, can, say, is, master, bt, not, a,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>...</td>\n",
       "      <td>[terrible_the, the_only, only_thing, thing_goo...</td>\n",
       "      <td>0</td>\n",
       "      <td>{'Terrible': 1, 'The': 2, 'only': 1, 'thing': ...</td>\n",
       "      <td>terrible  terrible the only thing good about ...</td>\n",
       "      <td>{'terrible': 4, 'the': 5, 'only': 1, 'thing': ...</td>\n",
       "      <td>terrible terrible only thing good about this m...</td>\n",
       "      <td>{'terrible': 4, 'only': 1, 'thing': 1, 'good':...</td>\n",
       "      <td>{'terrible': 1, 'the': 1, 'only': 1, 'thing': ...</td>\n",
       "      <td>{'terrible_the': 1, 'the_only': 1, 'only_thing...</td>\n",
       "      <td>[terrible, the, is, but, i, and, for, entertai...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   0 PoN  \\\n",
       "0   Missed Opportunity\\nI had been very excited t...   N   \n",
       "1   5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2   Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3   What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4   Terrible\\nThe only thing good about this movi...   N   \n",
       "\n",
       "                                           sentences  num_sentences  \\\n",
       "0  [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1  [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2  [ Everyone praised an overrated movie., Overra...              2   \n",
       "3  [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4  [ Terrible\\nThe only thing good about this mov...              9   \n",
       "\n",
       "                                              tokens  num_tokens  \\\n",
       "0  [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1  [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2  [everyone, praised, an, overrated, movie, over...          26   \n",
       "3  [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4  [terrible, the, only, thing, good, about, this...         124   \n",
       "\n",
       "                                               no_sw  num_no_sw  \\\n",
       "0  [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1  [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2  [everyone, praised, overrated, movie, overrate...         13   \n",
       "3  [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4  [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "\n",
       "                                      topwords_unfil  \\\n",
       "0  [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1  [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3  [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4  [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "\n",
       "                                        topwords_fil  ...  \\\n",
       "0  [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...   \n",
       "1  [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...   \n",
       "2  [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...   \n",
       "3  [(make, 2), (movie, 2), (idiotic, 1), (film, 1...  ...   \n",
       "4  [(movie, 4), (terrible, 3), (acting, 3), (good...  ...   \n",
       "\n",
       "                                    bigram_feats_neg nltk_all  \\\n",
       "0  [missed_opportunity, opportunity_i, i_had, had...        0   \n",
       "1  [for_phoenix, phoenix_i, i_do, do_think, think...        0   \n",
       "2  [everyone_praised, praised_an, an_overrated, o...        0   \n",
       "3  [what_idiotic, idiotic_film, film_i, i_can, ca...        0   \n",
       "4  [terrible_the, the_only, only_thing, thing_goo...        0   \n",
       "\n",
       "                                            bow_nosw  \\\n",
       "0  {'Missed': 1, 'Opportunity': 1, 'I': 14, 'had'...   \n",
       "1  {'5/5': 1, 'for': 2, 'Phoenix's': 1, 'acting':...   \n",
       "2  {'Everyone': 1, 'praised': 1, 'an': 1, 'overra...   \n",
       "3  {'What': 1, 'idiotic': 1, 'FIlm': 1, 'I': 1, '...   \n",
       "4  {'Terrible': 1, 'The': 2, 'only': 1, 'thing': ...   \n",
       "\n",
       "                                         diy_cleaner  \\\n",
       "0   missed opportunity  missed opportunity i had ...   \n",
       "1   5/5 for phoenix's acting..  5/5 for phoenix's...   \n",
       "2   everyone praised an overrated movie.  everyon...   \n",
       "3   what idiotic film  what idiotic film i can sa...   \n",
       "4   terrible  terrible the only thing good about ...   \n",
       "\n",
       "                                              bow_v2  \\\n",
       "0  {'missed': 3, 'opportunity': 3, 'i': 14, 'had'...   \n",
       "1  {'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...   \n",
       "2  {'everyone': 2, 'praised': 2, 'an': 2, 'overra...   \n",
       "3  {'what': 2, 'idiotic': 2, 'film': 2, 'i': 1, '...   \n",
       "4  {'terrible': 4, 'the': 5, 'only': 1, 'thing': ...   \n",
       "\n",
       "                                              pruned  \\\n",
       "0  missed opportunity missed opportunity been ver...   \n",
       "1  phoenix's acting.. phoenix's acting.. dont thi...   \n",
       "2  everyone praised overrated movie. everyone pra...   \n",
       "3  what idiotic film what idiotic film that phoen...   \n",
       "4  terrible terrible only thing good about this m...   \n",
       "\n",
       "                                              bow_v3  \\\n",
       "0  {'missed': 3, 'opportunity': 3, 'been': 4, 've...   \n",
       "1  {'phoenix's': 2, 'acting': 2, '..': 2, 'dont':...   \n",
       "2  {'everyone': 2, 'praised': 2, 'overrated': 3, ...   \n",
       "3  {'what': 2, 'idiotic': 2, 'film': 2, 'that': 1...   \n",
       "4  {'terrible': 4, 'only': 1, 'thing': 1, 'good':...   \n",
       "\n",
       "                                              bow_v4  \\\n",
       "0  {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...   \n",
       "1  {'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...   \n",
       "2  {'everyone': 1, 'praised': 1, 'an': 1, 'overra...   \n",
       "3  {'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...   \n",
       "4  {'terrible': 1, 'the': 1, 'only': 1, 'thing': ...   \n",
       "\n",
       "                                              bow_v5  \\\n",
       "0  {'missed_opportunity': 2, 'opportunity_i': 1, ...   \n",
       "1  {'for_phoenix': 1, 'phoenix_i': 1, 'i_do': 1, ...   \n",
       "2  {'everyone_praised': 1, 'praised_an': 1, 'an_o...   \n",
       "3  {'what_idiotic': 1, 'idiotic_film': 1, 'film_i...   \n",
       "4  {'terrible_the': 1, 'the_only': 1, 'only_thing...   \n",
       "\n",
       "                                     no_shared_words  \n",
       "0  [missed, opportunity, i, had, excited, to, see...  \n",
       "1  [for, i, do, was, a, for, a, tbh, is, a, dc, h...  \n",
       "2  [praised, an, of, all, the, are, out, to, be, ...  \n",
       "3  [idiotic, i, can, say, is, master, bt, not, a,...  \n",
       "4  [terrible, the, is, but, i, and, for, entertai...  \n",
       "\n",
       "[5 rows x 50 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>i</th>\n",
       "      <th>had</th>\n",
       "      <th>excited</th>\n",
       "      <th>to</th>\n",
       "      <th>see</th>\n",
       "      <th>heard</th>\n",
       "      <th>it</th>\n",
       "      <th>and</th>\n",
       "      <th>...</th>\n",
       "      <th>overlook</th>\n",
       "      <th>easy</th>\n",
       "      <th>answers</th>\n",
       "      <th>alike</th>\n",
       "      <th>iq</th>\n",
       "      <th>deff</th>\n",
       "      <th>comparable</th>\n",
       "      <th>compensate</th>\n",
       "      <th>company</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 4506 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed  opportunity   i  had  excited  to  see  heard  it  and  ...  \\\n",
       "PoN                                                                  ...   \n",
       "N         2            2  12    4        1   6    2      1   9    7  ...   \n",
       "N         0            0   1    0        0   1    1      0   2    1  ...   \n",
       "N         0            0   0    0        0   1    0      0   1    0  ...   \n",
       "N         0            0   1    0        0   2    0      0   0    4  ...   \n",
       "N         0            0   2    0        0   4    0      0   4    3  ...   \n",
       "\n",
       "     overlook  easy  answers  alike  iq  deff  comparable  compensate  \\\n",
       "PoN                                                                     \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "\n",
       "     company  acceptable  \n",
       "PoN                       \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "\n",
       "[5 rows x 4506 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['bow_v6'] = all_df.apply(lambda x: Counter(casual_tokenize(' '.join(x['no_shared_words']))), axis=1)\n",
    "new_df = pd.DataFrame(all_df['bow_v6'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7027027027027027\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_only_polarized_v2(tokens):\n",
    "#     return [token for token in tokens if token in common_1000[5]] # 54\n",
    "#     return [token for token in tokens if token not in common_1000[5]] # 59\n",
    "#     return [token for token in tokens if token not in common_1000[6]] # 60\n",
    "    return [token for token in tokens if token not in common_1000[6]] # 60\n",
    "\n",
    "all_df['no_neg_words'] = all_df.apply(lambda x: get_only_polarized_v2(x['tokens']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>missed</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>i</th>\n",
       "      <th>had</th>\n",
       "      <th>been</th>\n",
       "      <th>very</th>\n",
       "      <th>excited</th>\n",
       "      <th>to</th>\n",
       "      <th>see</th>\n",
       "      <th>this</th>\n",
       "      <th>...</th>\n",
       "      <th>overlook</th>\n",
       "      <th>easy</th>\n",
       "      <th>answers</th>\n",
       "      <th>alike</th>\n",
       "      <th>iq</th>\n",
       "      <th>deff</th>\n",
       "      <th>comparable</th>\n",
       "      <th>compensate</th>\n",
       "      <th>company</th>\n",
       "      <th>acceptable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 4388 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     missed  opportunity   i  had  been  very  excited  to  see  this  ...  \\\n",
       "PoN                                                                    ...   \n",
       "N         2            2  12    4     4     3        1   6    2     2  ...   \n",
       "N         0            0   1    0     1     0        0   1    1     1  ...   \n",
       "N         0            0   0    0     0     0        0   1    0     1  ...   \n",
       "N         0            0   1    0     0     0        0   2    0     1  ...   \n",
       "N         0            0   2    0     0     0        0   4    0     4  ...   \n",
       "\n",
       "     overlook  easy  answers  alike  iq  deff  comparable  compensate  \\\n",
       "PoN                                                                     \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "N           0     0        0      0   0     0           0           0   \n",
       "\n",
       "     company  acceptable  \n",
       "PoN                       \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "N          0           0  \n",
       "\n",
       "[5 rows x 4388 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df['bow_v7'] = all_df.apply(lambda x: Counter(casual_tokenize(' '.join(x['no_neg_words']))), axis=1)\n",
    "new_df = pd.DataFrame(all_df['bow_v7'].tolist(), all_df['PoN'])\n",
    "new_df = new_df.fillna(0).astype(int)\n",
    "new_df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6081081081081081\n"
     ]
    }
   ],
   "source": [
    "get_NB(new_df, new_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>PoN</th>\n",
       "      <th>sentences</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>tokens</th>\n",
       "      <th>num_tokens</th>\n",
       "      <th>no_sw</th>\n",
       "      <th>num_no_sw</th>\n",
       "      <th>topwords_unfil</th>\n",
       "      <th>topwords_fil</th>\n",
       "      <th>...</th>\n",
       "      <th>diy_cleaner</th>\n",
       "      <th>bow_v2</th>\n",
       "      <th>pruned</th>\n",
       "      <th>bow_v3</th>\n",
       "      <th>bow_v4</th>\n",
       "      <th>bow_v5</th>\n",
       "      <th>no_shared_words</th>\n",
       "      <th>bow_v6</th>\n",
       "      <th>no_neg_words</th>\n",
       "      <th>bow_v7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Missed Opportunity\\nI had been very excited t...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Missed Opportunity\\nI had been very excited ...</td>\n",
       "      <td>1</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>306</td>\n",
       "      <td>[missed, opportunity, excited, see, movie, eve...</td>\n",
       "      <td>140</td>\n",
       "      <td>[(of, 13), (i, 12), (the, 12), (that, 10), (it...</td>\n",
       "      <td>[(movie, 3), (said, 3), (many, 3), (times, 3),...</td>\n",
       "      <td>...</td>\n",
       "      <td>missed opportunity  missed opportunity i had ...</td>\n",
       "      <td>{'missed': 3, 'opportunity': 3, 'i': 14, 'had'...</td>\n",
       "      <td>missed opportunity missed opportunity been ver...</td>\n",
       "      <td>{'missed': 3, 'opportunity': 3, 'been': 4, 've...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "      <td>{'missed_opportunity': 2, 'opportunity_i': 1, ...</td>\n",
       "      <td>[missed, opportunity, i, had, excited, to, see...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "      <td>[missed, opportunity, i, had, been, very, exci...</td>\n",
       "      <td>{'missed': 2, 'opportunity': 2, 'i': 12, 'had'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5/5 for Phoenix's acting..\\nI don't think the...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ 5/5 for Phoenix's acting.., I don't think th...</td>\n",
       "      <td>5</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>59</td>\n",
       "      <td>[phoenix, think, need, super, dark, film, tbh,...</td>\n",
       "      <td>25</td>\n",
       "      <td>[(was, 4), (a, 3), (that, 3), (for, 2), (there...</td>\n",
       "      <td>[(dark, 2), (phoenix, 1), (think, 1), (need, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>5/5 for phoenix's acting..  5/5 for phoenix's...</td>\n",
       "      <td>{'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...</td>\n",
       "      <td>phoenix's acting.. phoenix's acting.. dont thi...</td>\n",
       "      <td>{'phoenix's': 2, 'acting': 2, '..': 2, 'dont':...</td>\n",
       "      <td>{'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...</td>\n",
       "      <td>{'for_phoenix': 1, 'phoenix_i': 1, 'i_do': 1, ...</td>\n",
       "      <td>[for, i, do, was, a, for, a, tbh, is, a, dc, h...</td>\n",
       "      <td>{'for': 2, 'i': 1, 'do': 1, 'was': 4, 'a': 3, ...</td>\n",
       "      <td>[for, phoenix, i, do, think, there, was, a, ne...</td>\n",
       "      <td>{'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Everyone praised an overrated movie.\\nOverrat...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Everyone praised an overrated movie., Overra...</td>\n",
       "      <td>2</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>26</td>\n",
       "      <td>[everyone, praised, overrated, movie, overrate...</td>\n",
       "      <td>13</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>[(overrated, 2), (movie, 2), (everyone, 1), (p...</td>\n",
       "      <td>...</td>\n",
       "      <td>everyone praised an overrated movie.  everyon...</td>\n",
       "      <td>{'everyone': 2, 'praised': 2, 'an': 2, 'overra...</td>\n",
       "      <td>everyone praised overrated movie. everyone pra...</td>\n",
       "      <td>{'everyone': 2, 'praised': 2, 'overrated': 3, ...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "      <td>{'everyone_praised': 1, 'praised_an': 1, 'an_o...</td>\n",
       "      <td>[praised, an, of, all, the, are, out, to, be, ...</td>\n",
       "      <td>{'praised': 1, 'an': 1, 'of': 1, 'all': 1, 'th...</td>\n",
       "      <td>[everyone, praised, an, overrated, movie, over...</td>\n",
       "      <td>{'everyone': 1, 'praised': 1, 'an': 1, 'overra...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>What idiotic FIlm\\nI can say that Phoenix is ...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ What idiotic FIlm\\nI can say that Phoenix is...</td>\n",
       "      <td>4</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>66</td>\n",
       "      <td>[idiotic, film, say, phoenix, master, actor, b...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(and, 4), (is, 2), (make, 2), (movie, 2), (to...</td>\n",
       "      <td>[(make, 2), (movie, 2), (idiotic, 1), (film, 1...</td>\n",
       "      <td>...</td>\n",
       "      <td>what idiotic film  what idiotic film i can sa...</td>\n",
       "      <td>{'what': 2, 'idiotic': 2, 'film': 2, 'i': 1, '...</td>\n",
       "      <td>what idiotic film what idiotic film that phoen...</td>\n",
       "      <td>{'what': 2, 'idiotic': 2, 'film': 2, 'that': 1...</td>\n",
       "      <td>{'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...</td>\n",
       "      <td>{'what_idiotic': 1, 'idiotic_film': 1, 'film_i...</td>\n",
       "      <td>[idiotic, i, can, say, is, master, bt, not, a,...</td>\n",
       "      <td>{'idiotic': 1, 'i': 1, 'can': 1, 'say': 1, 'is...</td>\n",
       "      <td>[what, idiotic, film, i, can, say, that, phoen...</td>\n",
       "      <td>{'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Terrible\\nThe only thing good about this movi...</td>\n",
       "      <td>N</td>\n",
       "      <td>[ Terrible\\nThe only thing good about this mov...</td>\n",
       "      <td>9</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>124</td>\n",
       "      <td>[terrible, thing, good, movie, phoenixs, actin...</td>\n",
       "      <td>65</td>\n",
       "      <td>[(the, 5), (this, 4), (movie, 4), (it, 4), (to...</td>\n",
       "      <td>[(movie, 4), (terrible, 3), (acting, 3), (good...</td>\n",
       "      <td>...</td>\n",
       "      <td>terrible  terrible the only thing good about ...</td>\n",
       "      <td>{'terrible': 4, 'the': 5, 'only': 1, 'thing': ...</td>\n",
       "      <td>terrible terrible only thing good about this m...</td>\n",
       "      <td>{'terrible': 4, 'only': 1, 'thing': 1, 'good':...</td>\n",
       "      <td>{'terrible': 1, 'the': 1, 'only': 1, 'thing': ...</td>\n",
       "      <td>{'terrible_the': 1, 'the_only': 1, 'only_thing...</td>\n",
       "      <td>[terrible, the, is, but, i, and, for, entertai...</td>\n",
       "      <td>{'terrible': 3, 'the': 5, 'is': 2, 'but': 3, '...</td>\n",
       "      <td>[terrible, the, only, thing, good, about, this...</td>\n",
       "      <td>{'terrible': 3, 'the': 5, 'only': 1, 'thing': ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>118</td>\n",
       "      <td>Nerve-wracking, but in very uncomfortable way...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Nerve-wracking, but in very uncomfortable wa...</td>\n",
       "      <td>8</td>\n",
       "      <td>[but, in, very, uncomfortable, way, why, every...</td>\n",
       "      <td>57</td>\n",
       "      <td>[uncomfortable, way, everybody, keep, saying, ...</td>\n",
       "      <td>33</td>\n",
       "      <td>[(it, 4), (a, 4), (movie, 3), (in, 2), (keep, ...</td>\n",
       "      <td>[(movie, 3), (keep, 2), (saying, 2), (psycho, ...</td>\n",
       "      <td>...</td>\n",
       "      <td>nerve-wracking, but in very uncomfortable way...</td>\n",
       "      <td>{'nerve-wracking': 2, ',': 2, 'but': 2, 'in': ...</td>\n",
       "      <td>nerve-wracking, very uncomfortable nerve-wrack...</td>\n",
       "      <td>{'nerve-wracking': 2, ',': 2, 'very': 2, 'unco...</td>\n",
       "      <td>{'but': 1, 'in': 1, 'very': 1, 'uncomfortable'...</td>\n",
       "      <td>{'but_in': 1, 'in_very': 1, 'very_uncomfortabl...</td>\n",
       "      <td>[but, in, way, why, everybody, keep, it, a, it...</td>\n",
       "      <td>{'but': 1, 'in': 2, 'way': 1, 'why': 1, 'every...</td>\n",
       "      <td>[but, in, very, uncomfortable, way, why, every...</td>\n",
       "      <td>{'but': 1, 'in': 2, 'very': 1, 'uncomfortable'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>119</td>\n",
       "      <td>Solid film but there are glaring problems\\nOk...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Solid film but there are glaring problems\\nO...</td>\n",
       "      <td>13</td>\n",
       "      <td>[solid, film, but, there, are, glaring, proble...</td>\n",
       "      <td>628</td>\n",
       "      <td>[solid, film, glaring, problems, okay, first, ...</td>\n",
       "      <td>292</td>\n",
       "      <td>[(the, 35), (to, 22), (it, 16), (and, 16), (i,...</td>\n",
       "      <td>[(joker, 6), (movie, 5), (film, 4), (like, 4),...</td>\n",
       "      <td>...</td>\n",
       "      <td>solid film but there are glaring problems  so...</td>\n",
       "      <td>{'solid': 2, 'film': 5, 'but': 6, 'there': 4, ...</td>\n",
       "      <td>solid film there glaring problems solid film t...</td>\n",
       "      <td>{'solid': 2, 'film': 5, 'there': 4, 'glaring':...</td>\n",
       "      <td>{'solid': 1, 'film': 3, 'but': 4, 'there': 2, ...</td>\n",
       "      <td>{'solid_film': 1, 'film_but': 1, 'but_there': ...</td>\n",
       "      <td>[solid, but, are, glaring, problems, okay, i, ...</td>\n",
       "      <td>{'solid': 1, 'but': 5, 'are': 4, 'glaring': 1,...</td>\n",
       "      <td>[film, but, there, are, glaring, problems, oka...</td>\n",
       "      <td>{'film': 4, 'but': 5, 'there': 3, 'are': 4, 'g...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>120</td>\n",
       "      <td>Joker &gt; Endgame\\nNeed I say more? Everything ...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Joker &gt; Endgame\\nNeed I say more?, Everythin...</td>\n",
       "      <td>5</td>\n",
       "      <td>[joker, endgame, need, i, say, more, everythin...</td>\n",
       "      <td>83</td>\n",
       "      <td>[joker, endgame, need, say, everything, movie,...</td>\n",
       "      <td>53</td>\n",
       "      <td>[(joker, 3), (movie, 3), (in, 3), (it, 3), (th...</td>\n",
       "      <td>[(joker, 3), (movie, 3), (masterful, 2), (awes...</td>\n",
       "      <td>...</td>\n",
       "      <td>joker &gt; endgame  joker &gt; endgame need i say m...</td>\n",
       "      <td>{'joker': 4, '&gt;': 2, 'endgame': 2, 'need': 1, ...</td>\n",
       "      <td>joker endgame joker endgame need more everythi...</td>\n",
       "      <td>{'joker': 4, 'endgame': 2, 'need': 1, 'more': ...</td>\n",
       "      <td>{'joker': 2, 'endgame': 1, 'need': 1, 'i': 1, ...</td>\n",
       "      <td>{'joker_endgame': 1, 'endgame_need': 1, 'need_...</td>\n",
       "      <td>[endgame, i, say, is, masterful, in, single, w...</td>\n",
       "      <td>{'endgame': 1, 'i': 1, 'say': 1, 'is': 2, 'mas...</td>\n",
       "      <td>[joker, need, i, say, more, everything, about,...</td>\n",
       "      <td>{'joker': 3, 'need': 1, 'i': 1, 'say': 1, 'mor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>121</td>\n",
       "      <td>Absolutely not a 10\\nStrong fanboy and hype r...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Absolutely not a 10\\nStrong fanboy and hype ...</td>\n",
       "      <td>5</td>\n",
       "      <td>[absolutely, not, a, strong, fanboy, and, hype...</td>\n",
       "      <td>81</td>\n",
       "      <td>[absolutely, strong, fanboy, hype, rush, going...</td>\n",
       "      <td>36</td>\n",
       "      <td>[(the, 7), (is, 6), (a, 4), (fanboy, 2), (and,...</td>\n",
       "      <td>[(fanboy, 2), (movie, 2), (absolutely, 1), (st...</td>\n",
       "      <td>...</td>\n",
       "      <td>absolutely not a 10  absolutely not a 10 stro...</td>\n",
       "      <td>{'absolutely': 2, 'not': 2, 'a': 2, '10': 2, '...</td>\n",
       "      <td>absolutely absolutely strong fanboy hype rush ...</td>\n",
       "      <td>{'absolutely': 2, 'strong': 1, 'fanboy': 1, 'h...</td>\n",
       "      <td>{'absolutely': 1, 'not': 1, 'a_NEG': 4, 'stron...</td>\n",
       "      <td>{'absolutely_not': 1, 'not_a': 1, 'a_strong': ...</td>\n",
       "      <td>[not, a, strong, fanboy, and, rush, on, the, i...</td>\n",
       "      <td>{'not': 1, 'a': 4, 'strong': 1, 'fanboy': 2, '...</td>\n",
       "      <td>[absolutely, not, a, fanboy, and, hype, rush, ...</td>\n",
       "      <td>{'absolutely': 1, 'not': 1, 'a': 4, 'fanboy': ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>122</td>\n",
       "      <td>Overhyped, but it's alright\\nIt's a good film...</td>\n",
       "      <td>P</td>\n",
       "      <td>[ Overhyped, but it's alright\\nIt's a good fil...</td>\n",
       "      <td>3</td>\n",
       "      <td>[overhyped, but, it, alright, it, a, good, fil...</td>\n",
       "      <td>60</td>\n",
       "      <td>[overhyped, alright, good, film, see, like, ma...</td>\n",
       "      <td>31</td>\n",
       "      <td>[(it, 4), (but, 3), (a, 3), (good, 2), (do, 2)...</td>\n",
       "      <td>[(good, 2), (overhyped, 1), (alright, 1), (fil...</td>\n",
       "      <td>...</td>\n",
       "      <td>overhyped, but it's alright  overhyped, but i...</td>\n",
       "      <td>{'overhyped': 2, ',': 2, 'but': 4, 'it's': 2, ...</td>\n",
       "      <td>overhyped, it's alright overhyped, it's alrigh...</td>\n",
       "      <td>{'overhyped': 2, ',': 2, 'it's': 2, 'alright':...</td>\n",
       "      <td>{'overhyped': 1, 'but': 3, 'it': 4, 'alright':...</td>\n",
       "      <td>{'overhyped_but': 1, 'but_it': 1, 'it_alright'...</td>\n",
       "      <td>[but, it, alright, it, a, but, i, do, see, as,...</td>\n",
       "      <td>{'but': 3, 'it': 4, 'alright': 1, 'a': 3, 'i':...</td>\n",
       "      <td>[overhyped, but, it, alright, it, a, good, fil...</td>\n",
       "      <td>{'overhyped': 1, 'but': 3, 'it': 4, 'alright':...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>246 rows Ã— 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     0 PoN  \\\n",
       "0     Missed Opportunity\\nI had been very excited t...   N   \n",
       "1     5/5 for Phoenix's acting..\\nI don't think the...   N   \n",
       "2     Everyone praised an overrated movie.\\nOverrat...   N   \n",
       "3     What idiotic FIlm\\nI can say that Phoenix is ...   N   \n",
       "4     Terrible\\nThe only thing good about this movi...   N   \n",
       "..                                                 ...  ..   \n",
       "118   Nerve-wracking, but in very uncomfortable way...   P   \n",
       "119   Solid film but there are glaring problems\\nOk...   P   \n",
       "120   Joker > Endgame\\nNeed I say more? Everything ...   P   \n",
       "121   Absolutely not a 10\\nStrong fanboy and hype r...   P   \n",
       "122   Overhyped, but it's alright\\nIt's a good film...   P   \n",
       "\n",
       "                                             sentences  num_sentences  \\\n",
       "0    [ Missed Opportunity\\nI had been very excited ...              1   \n",
       "1    [ 5/5 for Phoenix's acting.., I don't think th...              5   \n",
       "2    [ Everyone praised an overrated movie., Overra...              2   \n",
       "3    [ What idiotic FIlm\\nI can say that Phoenix is...              4   \n",
       "4    [ Terrible\\nThe only thing good about this mov...              9   \n",
       "..                                                 ...            ...   \n",
       "118  [ Nerve-wracking, but in very uncomfortable wa...              8   \n",
       "119  [ Solid film but there are glaring problems\\nO...             13   \n",
       "120  [ Joker > Endgame\\nNeed I say more?, Everythin...              5   \n",
       "121  [ Absolutely not a 10\\nStrong fanboy and hype ...              5   \n",
       "122  [ Overhyped, but it's alright\\nIt's a good fil...              3   \n",
       "\n",
       "                                                tokens  num_tokens  \\\n",
       "0    [missed, opportunity, i, had, been, very, exci...         306   \n",
       "1    [for, phoenix, i, do, think, there, was, a, ne...          59   \n",
       "2    [everyone, praised, an, overrated, movie, over...          26   \n",
       "3    [what, idiotic, film, i, can, say, that, phoen...          66   \n",
       "4    [terrible, the, only, thing, good, about, this...         124   \n",
       "..                                                 ...         ...   \n",
       "118  [but, in, very, uncomfortable, way, why, every...          57   \n",
       "119  [solid, film, but, there, are, glaring, proble...         628   \n",
       "120  [joker, endgame, need, i, say, more, everythin...          83   \n",
       "121  [absolutely, not, a, strong, fanboy, and, hype...          81   \n",
       "122  [overhyped, but, it, alright, it, a, good, fil...          60   \n",
       "\n",
       "                                                 no_sw  num_no_sw  \\\n",
       "0    [missed, opportunity, excited, see, movie, eve...        140   \n",
       "1    [phoenix, think, need, super, dark, film, tbh,...         25   \n",
       "2    [everyone, praised, overrated, movie, overrate...         13   \n",
       "3    [idiotic, film, say, phoenix, master, actor, b...         36   \n",
       "4    [terrible, thing, good, movie, phoenixs, actin...         65   \n",
       "..                                                 ...        ...   \n",
       "118  [uncomfortable, way, everybody, keep, saying, ...         33   \n",
       "119  [solid, film, glaring, problems, okay, first, ...        292   \n",
       "120  [joker, endgame, need, say, everything, movie,...         53   \n",
       "121  [absolutely, strong, fanboy, hype, rush, going...         36   \n",
       "122  [overhyped, alright, good, film, see, like, ma...         31   \n",
       "\n",
       "                                        topwords_unfil  \\\n",
       "0    [(of, 13), (i, 12), (the, 12), (that, 10), (it...   \n",
       "1    [(was, 4), (a, 3), (that, 3), (for, 2), (there...   \n",
       "2    [(overrated, 2), (movie, 2), (everyone, 1), (p...   \n",
       "3    [(and, 4), (is, 2), (make, 2), (movie, 2), (to...   \n",
       "4    [(the, 5), (this, 4), (movie, 4), (it, 4), (to...   \n",
       "..                                                 ...   \n",
       "118  [(it, 4), (a, 4), (movie, 3), (in, 2), (keep, ...   \n",
       "119  [(the, 35), (to, 22), (it, 16), (and, 16), (i,...   \n",
       "120  [(joker, 3), (movie, 3), (in, 3), (it, 3), (th...   \n",
       "121  [(the, 7), (is, 6), (a, 4), (fanboy, 2), (and,...   \n",
       "122  [(it, 4), (but, 3), (a, 3), (good, 2), (do, 2)...   \n",
       "\n",
       "                                          topwords_fil  ...  \\\n",
       "0    [(movie, 3), (said, 3), (many, 3), (times, 3),...  ...   \n",
       "1    [(dark, 2), (phoenix, 1), (think, 1), (need, 1...  ...   \n",
       "2    [(overrated, 2), (movie, 2), (everyone, 1), (p...  ...   \n",
       "3    [(make, 2), (movie, 2), (idiotic, 1), (film, 1...  ...   \n",
       "4    [(movie, 4), (terrible, 3), (acting, 3), (good...  ...   \n",
       "..                                                 ...  ...   \n",
       "118  [(movie, 3), (keep, 2), (saying, 2), (psycho, ...  ...   \n",
       "119  [(joker, 6), (movie, 5), (film, 4), (like, 4),...  ...   \n",
       "120  [(joker, 3), (movie, 3), (masterful, 2), (awes...  ...   \n",
       "121  [(fanboy, 2), (movie, 2), (absolutely, 1), (st...  ...   \n",
       "122  [(good, 2), (overhyped, 1), (alright, 1), (fil...  ...   \n",
       "\n",
       "                                           diy_cleaner  \\\n",
       "0     missed opportunity  missed opportunity i had ...   \n",
       "1     5/5 for phoenix's acting..  5/5 for phoenix's...   \n",
       "2     everyone praised an overrated movie.  everyon...   \n",
       "3     what idiotic film  what idiotic film i can sa...   \n",
       "4     terrible  terrible the only thing good about ...   \n",
       "..                                                 ...   \n",
       "118   nerve-wracking, but in very uncomfortable way...   \n",
       "119   solid film but there are glaring problems  so...   \n",
       "120   joker > endgame  joker > endgame need i say m...   \n",
       "121   absolutely not a 10  absolutely not a 10 stro...   \n",
       "122   overhyped, but it's alright  overhyped, but i...   \n",
       "\n",
       "                                                bow_v2  \\\n",
       "0    {'missed': 3, 'opportunity': 3, 'i': 14, 'had'...   \n",
       "1    {'5/5': 2, 'for': 3, 'phoenix's': 2, 'acting':...   \n",
       "2    {'everyone': 2, 'praised': 2, 'an': 2, 'overra...   \n",
       "3    {'what': 2, 'idiotic': 2, 'film': 2, 'i': 1, '...   \n",
       "4    {'terrible': 4, 'the': 5, 'only': 1, 'thing': ...   \n",
       "..                                                 ...   \n",
       "118  {'nerve-wracking': 2, ',': 2, 'but': 2, 'in': ...   \n",
       "119  {'solid': 2, 'film': 5, 'but': 6, 'there': 4, ...   \n",
       "120  {'joker': 4, '>': 2, 'endgame': 2, 'need': 1, ...   \n",
       "121  {'absolutely': 2, 'not': 2, 'a': 2, '10': 2, '...   \n",
       "122  {'overhyped': 2, ',': 2, 'but': 4, 'it's': 2, ...   \n",
       "\n",
       "                                                pruned  \\\n",
       "0    missed opportunity missed opportunity been ver...   \n",
       "1    phoenix's acting.. phoenix's acting.. dont thi...   \n",
       "2    everyone praised overrated movie. everyone pra...   \n",
       "3    what idiotic film what idiotic film that phoen...   \n",
       "4    terrible terrible only thing good about this m...   \n",
       "..                                                 ...   \n",
       "118  nerve-wracking, very uncomfortable nerve-wrack...   \n",
       "119  solid film there glaring problems solid film t...   \n",
       "120  joker endgame joker endgame need more everythi...   \n",
       "121  absolutely absolutely strong fanboy hype rush ...   \n",
       "122  overhyped, it's alright overhyped, it's alrigh...   \n",
       "\n",
       "                                                bow_v3  \\\n",
       "0    {'missed': 3, 'opportunity': 3, 'been': 4, 've...   \n",
       "1    {'phoenix's': 2, 'acting': 2, '..': 2, 'dont':...   \n",
       "2    {'everyone': 2, 'praised': 2, 'overrated': 3, ...   \n",
       "3    {'what': 2, 'idiotic': 2, 'film': 2, 'that': 1...   \n",
       "4    {'terrible': 4, 'only': 1, 'thing': 1, 'good':...   \n",
       "..                                                 ...   \n",
       "118  {'nerve-wracking': 2, ',': 2, 'very': 2, 'unco...   \n",
       "119  {'solid': 2, 'film': 5, 'there': 4, 'glaring':...   \n",
       "120  {'joker': 4, 'endgame': 2, 'need': 1, 'more': ...   \n",
       "121  {'absolutely': 2, 'strong': 1, 'fanboy': 1, 'h...   \n",
       "122  {'overhyped': 2, ',': 2, 'it's': 2, 'alright':...   \n",
       "\n",
       "                                                bow_v4  \\\n",
       "0    {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...   \n",
       "1    {'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...   \n",
       "2    {'everyone': 1, 'praised': 1, 'an': 1, 'overra...   \n",
       "3    {'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...   \n",
       "4    {'terrible': 1, 'the': 1, 'only': 1, 'thing': ...   \n",
       "..                                                 ...   \n",
       "118  {'but': 1, 'in': 1, 'very': 1, 'uncomfortable'...   \n",
       "119  {'solid': 1, 'film': 3, 'but': 4, 'there': 2, ...   \n",
       "120  {'joker': 2, 'endgame': 1, 'need': 1, 'i': 1, ...   \n",
       "121  {'absolutely': 1, 'not': 1, 'a_NEG': 4, 'stron...   \n",
       "122  {'overhyped': 1, 'but': 3, 'it': 4, 'alright':...   \n",
       "\n",
       "                                                bow_v5  \\\n",
       "0    {'missed_opportunity': 2, 'opportunity_i': 1, ...   \n",
       "1    {'for_phoenix': 1, 'phoenix_i': 1, 'i_do': 1, ...   \n",
       "2    {'everyone_praised': 1, 'praised_an': 1, 'an_o...   \n",
       "3    {'what_idiotic': 1, 'idiotic_film': 1, 'film_i...   \n",
       "4    {'terrible_the': 1, 'the_only': 1, 'only_thing...   \n",
       "..                                                 ...   \n",
       "118  {'but_in': 1, 'in_very': 1, 'very_uncomfortabl...   \n",
       "119  {'solid_film': 1, 'film_but': 1, 'but_there': ...   \n",
       "120  {'joker_endgame': 1, 'endgame_need': 1, 'need_...   \n",
       "121  {'absolutely_not': 1, 'not_a': 1, 'a_strong': ...   \n",
       "122  {'overhyped_but': 1, 'but_it': 1, 'it_alright'...   \n",
       "\n",
       "                                       no_shared_words  \\\n",
       "0    [missed, opportunity, i, had, excited, to, see...   \n",
       "1    [for, i, do, was, a, for, a, tbh, is, a, dc, h...   \n",
       "2    [praised, an, of, all, the, are, out, to, be, ...   \n",
       "3    [idiotic, i, can, say, is, master, bt, not, a,...   \n",
       "4    [terrible, the, is, but, i, and, for, entertai...   \n",
       "..                                                 ...   \n",
       "118  [but, in, way, why, everybody, keep, it, a, it...   \n",
       "119  [solid, but, are, glaring, problems, okay, i, ...   \n",
       "120  [endgame, i, say, is, masterful, in, single, w...   \n",
       "121  [not, a, strong, fanboy, and, rush, on, the, i...   \n",
       "122  [but, it, alright, it, a, but, i, do, see, as,...   \n",
       "\n",
       "                                                bow_v6  \\\n",
       "0    {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...   \n",
       "1    {'for': 2, 'i': 1, 'do': 1, 'was': 4, 'a': 3, ...   \n",
       "2    {'praised': 1, 'an': 1, 'of': 1, 'all': 1, 'th...   \n",
       "3    {'idiotic': 1, 'i': 1, 'can': 1, 'say': 1, 'is...   \n",
       "4    {'terrible': 3, 'the': 5, 'is': 2, 'but': 3, '...   \n",
       "..                                                 ...   \n",
       "118  {'but': 1, 'in': 2, 'way': 1, 'why': 1, 'every...   \n",
       "119  {'solid': 1, 'but': 5, 'are': 4, 'glaring': 1,...   \n",
       "120  {'endgame': 1, 'i': 1, 'say': 1, 'is': 2, 'mas...   \n",
       "121  {'not': 1, 'a': 4, 'strong': 1, 'fanboy': 2, '...   \n",
       "122  {'but': 3, 'it': 4, 'alright': 1, 'a': 3, 'i':...   \n",
       "\n",
       "                                          no_neg_words  \\\n",
       "0    [missed, opportunity, i, had, been, very, exci...   \n",
       "1    [for, phoenix, i, do, think, there, was, a, ne...   \n",
       "2    [everyone, praised, an, overrated, movie, over...   \n",
       "3    [what, idiotic, film, i, can, say, that, phoen...   \n",
       "4    [terrible, the, only, thing, good, about, this...   \n",
       "..                                                 ...   \n",
       "118  [but, in, very, uncomfortable, way, why, every...   \n",
       "119  [film, but, there, are, glaring, problems, oka...   \n",
       "120  [joker, need, i, say, more, everything, about,...   \n",
       "121  [absolutely, not, a, fanboy, and, hype, rush, ...   \n",
       "122  [overhyped, but, it, alright, it, a, good, fil...   \n",
       "\n",
       "                                                bow_v7  \n",
       "0    {'missed': 2, 'opportunity': 2, 'i': 12, 'had'...  \n",
       "1    {'for': 2, 'phoenix': 1, 'i': 1, 'do': 1, 'thi...  \n",
       "2    {'everyone': 1, 'praised': 1, 'an': 1, 'overra...  \n",
       "3    {'what': 1, 'idiotic': 1, 'film': 1, 'i': 1, '...  \n",
       "4    {'terrible': 3, 'the': 5, 'only': 1, 'thing': ...  \n",
       "..                                                 ...  \n",
       "118  {'but': 1, 'in': 2, 'very': 1, 'uncomfortable'...  \n",
       "119  {'film': 4, 'but': 5, 'there': 3, 'are': 4, 'g...  \n",
       "120  {'joker': 3, 'need': 1, 'i': 1, 'say': 1, 'mor...  \n",
       "121  {'absolutely': 1, 'not': 1, 'a': 4, 'fanboy': ...  \n",
       "122  {'overhyped': 1, 'but': 3, 'it': 4, 'alright':...  \n",
       "\n",
       "[246 rows x 53 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['missed', 'opportunity', 'been', 'very', 'excited', 'this', 'movie', 'ever', 'since', 'heard', 'about', 'anticipating', 'release', 'when', 'started', 'getting', 'type', 'hype', 'press', 'that', 'became', 'apprehensive', 'things', 'were', 'being', 'said', 'which', 'seemed', 'outrageous', 'mostly', 'other', 'moves', 'looking', 'forward', 'seeing', 'ended', 'letting', 'down', 'joker', 'sadly', 'turned', 'those', 'movies', 'know', 'many', 'times', 'before', 'phoenixs', 'portrayal', 'with', 'mental', 'health', 'depression', 'good', 'convincing', 'story', 'plot', 'like', 'deliver', 'anti', 'hero', 'origin', 'most', 'coveted', 'villains', 'comic', 'book', 'lore', 'liked', 'quasi', 'mirroring', 'failed', 'system', 'whose', 'middle', 'lower', 'class', 'revolt', 'against', 'rich', 'sort', 'burn', 'done', 'sure', 'people', 'glimpses', 'today', 'culture', 'knows', 'maybe', 'studio', 'execs', 'their', 'fingers', 'involved', 'ones', 'watered', 'much', 'there', 'will', 'directors', 'darker', 'than', 'theatrical', 'certainly', 'hope', 'because', 'reviews', 'have', 'read', 'speak', 'walking', 'theaters', 'dark', 'feel', 'psychological', 'overtones', 'them', 'stomach', 'felt', 'sense', 'wanting', 'bigger', 'grander', 'what', 'would', 'recommend', 'formulate', 'your', 'opinion', 'gave', 'rating', 'over', 'walked', 'feeling', 'just', 'already', 'seen', \"phoenix's\", 'acting..', 'dont', 'think', 'need', 'super', 'film', 'comics', 'character', 'dramatized', 'effort', 'knight', 'unfortunately', 'captivating', 'inspiration', 'made', 'stuff', 'enough', 'real', 'world', 'everyone', 'praised', 'overrated', 'movie.', 'time', 'here', 'making', 'better', 'actually', 'idiotic', 'phoenix', 'master', 'actor', 'does', 'still', 'make', 'great', 'thsi', 'lives', 'from', 'blabla', 'every', 'medium', 'nothing', 'only', 'thing', 'behind', 'money', 'media', 'todd', 'philips', 'should', 'some', 'copy', 'taxi', 'driver', 'similar', 'terrible', 'acting', 'watch', 'alone', 'doesnt', 'interesting', 'entertaining', 'give', 'script', 'barely', 'development', 'characters', 'matter', 'outside', 'last', 'minutes', 'best', 'part', 'force', 'through', 'first', 'hours', 'garbage', 'punishment', 'even', 'they', 'couldve', 'condensed', 'into', 'minute', 'special', 'cant', 'believe', 'then', 'again', 'written', 'primarily', 'oscars', 'usually', 'instead', 'poor', 'attempt', 'books', 'sell', 'strays', 'smacks', 'trying', 'hard', 'awards', 'relevance', 'names', 'gotham', 'tries', 'nominations', 'criticism', 'actors', 'thought', 'given', 'wasnt', 'dragged', 'longer', 'versions', 'learned', 'thing.', 'borrows', 'elements', 'strive', 'award', 'well', 'except', 'writing', 'shamelessly', 'theatre', 'edgy', 'scary', 'brain', 'damaged', 'sissy', 'dances', 'while', 'annoying', 'rude', 'expects', 'society', 'pedestal', 'hell', 'hate', 'complete', 'crap', 'really', 'understand', 'watching', 'couldnt', 'till', 'boring', 'myself', 'extremely', 'zero', 'connection', 'joaquin', 'heath', 'ledger', 'needed', 'asking', 'these', 'freaking', 'normal', 'same', 'sentence', 'joaquins', 'never', 'isnt', 'disaster', 'slow', 'could', 'keep', 'falling', 'asleep', 'theater', 'imagine', 'future', 'films', 'alright', 'film...', 'ruined', 'masterpiece', 'raving', 'predictable', 'samey', 'theres', 'creativity', 'king', 'comedy', 'copying', 'almost', 'pointless', 'waste', 'disappointing', 'long', 'possibly', 'take', 'tell', 'audience', 'mentally', 'unwell', 'surprising', 'mother', 'imaginative', 'white', 'sock', \"don't\", 'review', 'movies,', 'one...', 'watched', 'site', 'absolutely', 'little', 'else', 'found', 'longish', 'fall', 'mean', 'entertain', 'yourself', 'washing', 'machine', 'going', 'straight', 'anyone', 'butt!', 'claiming', 'ridiculous', 'walk', 'happens', 'predict', 'advance', 'rather', 'relies', 'fascinated', 'antics', 'psychotic', 'nutcase', 'whilst', 'convince', 'somehow', 'heroic', 'highly', 'nice', 'excellent', 'suffers', 'three', 'uninteresting', 'dialog', 'pace', 'lengthy', 'number', 'ideas', 'combined', 'more', 'destroy', 'look', 'left', 'beside', 'genre', 'supposed', 'thriller', 'addition', 'crime', 'drama', 'cannot', 'exaggerated', 'high', 'ratings', 'want', 'fair', 'although', 'stars', 'definitely', 'worth', 'consequently', 'skip', '10/10', 'actual', 'unbiased', 'review.', 'titles', 'says', 'marvel', 'hardcore', 'check', 'profiles', 'where', 'fans', 'opposite', 'pure', 'simple', 'truth', 'horrible', 'worst', 'pretty', 'remake', 'shots', 'exactly', 'ripping', 'aside', 'illness', 'psychology', 'slapped', 'title', 'draw', 'expect', 'hoping', 'wrong', 'agree', 'portraying', 'issues', 'though', 'call', 'oscar', 'worthy', 'stretch', 'notice', 'critics', 'saying', 'different', 'perspective', 'each', 'goes', 'audio', 'music', 'certain', 'aspects', 'shot', 'camera', 'words', 'enjoy', 'critic', 'cinema', 'aspect', 'viewers', 'disappointed', 'unlike', 'fascination', 'version', 'term', 'lightly', 'indeed', 'fact', 'gone', 'kids', 'knowing', 'rated', 'graphic', 'also', 'promotes', 'violence', 'guns', 'uncomfortable', 'country', 'rent', 'lastly', 'enjoyed', 'picture', 'past', 'course', 'lets', '2001', 'kings', 'speech', 'bought', 'likely', 'probably', 'forgot', 'soon', 'after', 'list', 'didnt', 'included', 'inception', 'true', 'grit', 'once', 'raved', 'case', 'forget', 'week', 'labeled', 'labeling', 'attention', 'cheap', 'tactic', 'overhyped', 'slowwwwww', 'gladly', 'half', 'until', 'usual', 'must', 'gore', 'disney', 'hear', 'thumbs', 'question', 'below', 'reviewing', 'performance', 'storyline', 'played', 'literally', 'hats', 'discrediting', 'whatsoever', 'reason', 'drawn', 'winded', 'kept', 'agreeing', 'jumping', 'band', 'wagon', 'easily', 'create', 'within', 'hour', 'push', 'ything', 'villian', 'based', 'superhero', 'aware', 'however', 'halloween', 'meets', 'physcotic', 'escapee', 'decides', 'kill', 'sounds', 'michael', 'myers', 'proud', 'brilliant', 'love', 'pheonixs', 'ought', 'please', 'process', 'receive', 'sheep', 'write', 'compelled', 'thoughts', 'head', 'apparently', 'quite', 'peoples', 'heads', 'comes', 'perception', 'order', 'mine', 'anybody', 'elses', 'critique', 'following', 'dissapointing', 'boring!!!', 'wonderful', 'role', 'orgin', 'buffalo', 'bill', 'silence', 'lambs', 'depressing', 'limp', 'wristed', 'whith', 'feminine', 'dancing', 'masculinity', 'remember', 'dark,', 'depressing,', 'slow,', 'heavy,', 'kudos', 'tough', 'backstory', 'sorry', 'genres', 'simply', 'stay', 'heavy', 'spoon', 'point', 'depressed', 'ready', 'react', 'keith', 'comments', 'perhaps', 'paid', 'ledgers', 'inventive', 'charismatic', 'maniacal', 'creepy', 'batman', 'ecosystem', 'fills', 'relationship', 'cathartic', 'moment', 'catalyze', 'reaction', 'paced', 'told', 'choice', 'evening', 'gambling', 'addicted', 'director', 'scorsese', 'overlong', 'dull', 'feed', 'network', 'basic', 'carbon', 'plots', 'lifted', 'find', 'become', 'psyco', 'coudnt', 'entertainment', 'cinematic', 'experience', 'fantastic', 'ways', 'awful', 'blank', 'slate', 'study', 'crazy', 'over-hyped,', 'overacted', 'proper', 'millennial', 'absolute', 'disappointment', 'believed', 'fool', 'person', 'stupid', 'cringe', 'happening', 'smoking', 'around', 'action', 'substance', 'humor', 'everything', 'disturbing', 'respected', 'refer', 'powerful', 'illustration', 'loners', 'dangerous', 'themselves', 'others', 'theyre', 'untreated', 'educated', 'standpoint', 'millions', 'goers', 'cause', 'worry', 'impact', 'kind', 'societys', 'problems', 'goodness', 'driven', 'further', 'fearful', 'repercussions', 'stigmatisation', 'prejudice', 'bullying', 'right', 'seem', 'care', 'such', 'content', 'less', 'cinematography', 'otherwise', 'rehash', 'thats', 'exploitation', 'misrepresentation', 'pathologies', 'unforgiveable', 'fanboys', 'forgotten?', 'throughout', 'history', 'always', 'replaced', 'nature', 'paganism', 'translated', 'devil', 'roman', 'catholicism', 'bring', 'social', 'coherence', 'figure', 'represent', 'meticulous', 'forgotten', 'hurts', 'favorite', 'broke', 'golden', 'rule', 'laid', 'robert', 'downey', 'tropic', 'thunder', 'full', 'planning', 'cunning', 'depth', 'chaotic', 'narcissism', 'excellently', 'depicted', 'eternal', 'opening', 'scene', 'waiting', 'keyser', 'souse', 'control', 'display', 'black', 'mirror', 'pulling', 'strings', 'along', 'came', 'sorrowful', 'victim', 'threw', 'tantrum', 'lost', 'empowered', 'taking', 'becoming', 'anarchistic', 'commentator', 'forest', 'gump', 'rain', 'robot', 'depictions', 'suffering', 'writers', 'remembered', 'level', 'ingenuity', 'leaves', 'understanding', 'cognitive', 'approach', 'phillips', 'displayed', 'cruel', 'fist', 'banished', 'vulgar', 'insult', 'narrative', 'intriguing', 'dualistic', 'decades', 'meet', 'universe', 'sequel', 'jokers', 'lord', 'life', 'grudge', 'match', 'between', 'christian', 'bales', 'machinist', 'malnutritioned', 'clown', 'prince', 'threatening', 'forever', 'joaquim', 'mark', 'sorely', 'rewatch', 'something', 'extended', 'trailer', 'exposed', 'revelations', 'challenged', 'presented', 'basically', 'superlatives', 'explanations', 'adorning', 'without', 'incredible', 'shadowed', 'truly', 'went', 'night', 'positive', 'honestly', 'totally', 'bored', 'thinking', 'start', 'gruesome', 'makes', 'leave', 'short', 'leaving', 'realy', 'whit', 'happy', 'grave', 'bad...', 'whole', 'apperently', 'completely', 'acted', 'trash', 'weak', 'face', 'paint', 'drug', 'addict', 'loser', 'blames', 'everybody', 'failings', 'mediocre', 'offensive', 'ultra', 'liberal', 'preaching', 'millennials', 'reinforces', 'school', 'college', 'teachings', 'fault', 'parents', 'boss', 'government', 'neighbors', 'cops', 'imdb', 'superior', 'godfather', 'generation', 'pathetic', 'hopes', 'werent', 'amazing', 'tedious', 'experienced', 'childhood', 'trauma', 'spend', 'asylum', 'seven', 'medication', 'effect', 'metro', 'incident', 'breaking', 'chain', 'free', 'himself', 'change', 'evolve', 'beginning', 'seventy', 'percent', 'screen', 'dedicated', 'arthur', 'fleck', 'support', 'lack', 'soul', 'deniero', 'disappoints', 'aura', 'somewhere', 'nineties', 'wait', 'anything', 'espaically', 'repeated', 'space', 'alot', 'nothings', 'drag', 'suspense', 'work', 'begin', 'turns', 'unbelievable', 'smart', 'using', 'intuition', 'batmans', 'greatest', 'embarrassing', 'stand', 'unrelated', 'series', 'appreciated', 'main', 'decent', 'strictly', 'come', 'childcare', 'arrangements', 'wish', 'home', 'repeating', 'subject', 'missing', 'deserve', 'pursuing', 'career', 'talent', 'beaten', 'ridiculed', 'standard', 'rated.', 'makeup', 'reviewers', 'guess', 'disturbed', 'guys', 'demise', 'proviked', 'societal', 'fecay', 'consequential', 'violent', 'joachin', 'effeminate', 'weird', 'dance', 'demonstrate', 'evolved', 'self', 'overhyped.', 'borders', 'irritating', 'aimlessly', 'behavior', 'laughter', 'repetitious', 'wrote', 'star', 'family', 'friends', 'worked', 'years!!!', 'seriously', 'amateur', 'loved', 'outstanding', 'decided', 'leading', 'impressed', 'soundtrack', 'ending', 'phenomenal', 'deserves', 'hands', 'years', 'decaprio', 'revenant', 'next', 'weeknd', 'havent', 'flaw', 'edit', 'oscar.', 'holy', 'fine', 'pheonix', 'hair', 'winning', 'gotta', 'okay', 'intelligent', 'insane', 'holds', 'deep', 'conversations', 'prominent', 'capable', 'complicated', 'bank', 'robbery', 'step', 'ahead', 'police', 'intelligence', 'strong', 'personality', 'emotionality', 'laughed', 'controllably', \"'triumph\", \"will'\", 'nihilists', 'sick', 'disgusting', 'evil', 'total', 'piece', 'scheisse', 'affect', 'emotionally', 'troubled', 'young', 'pulled', 'suicide', 'addictive', 'behaviors', 'hopelessness', 'triumph', 'defer', 'voting', 'video', 'majorly', 'screwed', 'dude', 'alien', 'body', 'naked', 'waist', 'disquieting', 'taut', 'skin', 'stretched', 'tightly', 'bone', 'structure', 'bones', 'stick', 'angles', 'places', 'exoskeleton', 'medical', 'experiment', 'single', 'pleasant', 'beauty', 'happiness', 'catharsis', 'misery', 'churning', 'emptiness', 'fifty', 'circle', 'despair', 'humanity', 'showing', 'sane', 'live', 'gets', 'vanilla.', 'blah.', 'wasted', 'giving', 'terrible-not', 'recall', 'accurate', 'hoped', 'pitiful', 'took', 'enjoyment', 'worse', \"didn't\", 'screening', 'honest', 'fuss', 'expecting', 'multi', 'layered', 'descent', 'dimensional', 'means', 'bait', 'pretentious,', 'takes', 'itself', 'wants', 'smarter', 'enjoying', 'rest', 'achieve', 'toker', 'awkward', 'loner', 'stoner', 'schtick', 'surely', 'academy', 'sheer', 'scrawnyer', 'gargantuan', 'artistic', 'achievement', 'forcibly', 'sucking', 'stomack', 'reads', 'wrong.', 'travis', 'bickle', 'product', 'actions', 'justified', 'rendered', 'aspirational', 'either', 'aesthetics', 'rupert', 'pupkin', 'scorseses', 'another', 'heavily', 'insight', 'divide', 'neurological', 'glitter', 'thrown', 'disguise', 'shallow', 'adds', 'confusion', 'ends', 'none', 'poser', 'familiar', 'feels', 'fresh', 'knocks', 'socks', 'laugh', 'haunting', 'singular', 'commits', 'third', 'murder', 'obviously', 'defense', 'beta', 'ghus', 'gaye', 'ghhade', 'yahan', 'impossible', 'nikalna', 'fears', 'humorless', 'digging', 'hated', 'hbos', 'succession', 'notes', 'protagonists', 'humanize', 'maintain', 'necessary', 'ironic', 'distance', 'movie?', 'serial', 'killer', 'abused', 'child', 'attacked', 'street', 'subway', 'mass', 'murderer', 'jokes', 'famous', 'funny', 'careful', 'prevent', 'private', 'someone', 'official', 'background', 'checks', 'messed', 'logical', 'response', 'wacked', 'maniac', 'murdering', 'enjoyable', 'swimming', 'sewage', 'succeeded', 'collapses', 'putrid', 'mess', 'ultimately', 'thanks', 'lacking', 'focus', 'journey', 'constant', 'musical', 'score', 'dramatic', 'detracted', 'performed', 'entertained', 'taken', 'partner', 'finished', 'devoured', 'previous', 'horribly', 'derivative', 'repugnant', 'dramatically', 'flawed', 'excruciatingly', 'telescoped', 'lens', 'vilifies', 'points', 'consistency', 'theyd', 'guts', 'struggle', 'sexuality', 'might', 'help', 'mind', 'declared', 'profound', 'strokes', 'specifically', 'preclude', 'manifestation', 'explained', 'willed', 'seat', 'acrid', 'stinky', 'seventies', 'references', 'dessert', 'duration', 'eventually', 'slopped', 'riddle', 'promise', 'remarkably', 'banal', 'serves', 'illuminate', 'gluttonous', 'exploitative', 'villainy', 'corporations', 'production', 'values', 'comparing', 'exquisitely', 'stark', 'visions', 'nolan', 'hype!', 'wonder', 'licensed', 'brand', 'creates', 'chaos', 'manipulation', 'threat', 'explosions', 'gunpowders', 'borrowing', 'costume', 'signature', 'iconic', 'argue', 'early', 'stages', 'transforming', 'supervillain', 'whats', 'psychopath', 'patient', 'bullied', 'disregarded', 'turn', 'villain', 'justice', 'independent', 'unnecessary', 'legendary', 'inhuman', 'terrorising', 'morally', 'dislike', 'depiction', 'disturbances', 'relating', 'filmographically', 'terrorise', 'spectator', 'strip', 'narative', 'madness', 'yeah', 'driving', 'puts', 'political', 'message', 'rehashed', 'junk', 'hollywood', 'nowadays', 'twice', 'needs', 'zimmer', 'howard', 'combo', 'unpopular', 'opinion:', 'account', 'hearing', 'tons', 'praises', 'terribly', 'living', 'regards', 'climate', 'hint', 'overacting', 'galore', 'underwhelmed', 'friendly', 'surprised', 'magic', 'looong', 'imho', 'gives', 'damn', 'darth', 'vaders', 'centuries', 'boogeyman', 'overpaid', 'lalaland', 'schmocks', 'wont', 'jump', 'prequel', 'explains', 'train', 'least', 'solid', 'filmmaking', 'finesse', 'build', 'surprises', 'load', 'layman', 'olds', 'roll', 'eyes', 'cacophony', 'scenes', 'cheesy', 'moments', 'massive', 'subtle', 'sinister', 'second', 'elevator', 'joke', 'miss', 'having', 'student', 'throw', 'bunch', 'cinematographer', 'gratuitous', 'senseless', 'drool', 'dudes', 'brought', 'road', 'trip', 'hangover', 'clichÃ©s', 'hardly', 'suspenseful', 'building', 'serious?', 'imitation', 'cynical', 'taste', 'mouth', 'essential', 'viewing', 'reinvention', 'doesent', 'clever', 'banter', 'known', 'villians', 'snooze', 'fest', 'plays', 'leeway', 'mannerisms', 'spot', 'demeanor', 'capsized', 'killings', 'bland', 'desperately', 'element', 'towards', 'death', 'rebirth', 'smartest', 'dissappointment', 'billboard', 'signs', 'london', 'underground', 'learning', 'approved', 'masses', 'appeared', 'arthouse', 'interpretation', 'firstly', 'source', 'material', 'psychiatrist', 'describes', 'supersane', 'sees', 'irony', 'works', 'comedian', 'alan', 'moore', 'watchmen', 'settling', 'treats', 'conform', 'follow', 'rules', 'regulations', 'edge', 'tragedies', 'snaps', 'contrary', 'ruthless', 'daring', 'sadistic', 'twisted', 'conforming', 'societies', 'norms', 'innovative', 'somewhat', 'dissapointed', 'portrayed', 'recognition', 'stop', 'suggest', 'compromised', 'both', 'laughing', 'condition', 'uncontrollably', 'nervous', 'anxious', 'dumbs', 'origins', 'subsequently', 'pity', 'mobbed', 'refused', 'treatment', 'funding', 'cuts', 'treated', 'colleagues', 'elderly', 'issue', 'unrequited', 'neighbour', 'subsequent', 'humiliation', 'niros', 'mothers', 'leads', 'bloody', 'brutal', 'finale', 'arthurs', 'transformation', 'brutality', 'harshness', 'whether', 'caring', 'physically', 'disabled', 'shows', 'sympathy', 'dwarf', 'strongly', 'suggests', 'antithesis', 'infact', 'successfully', 'standing', 'result', 'poorly', 'redeeming', 'several', 'earlier', 'flashback', 'events', 'place', 'figment', 'imagination', 'sergio', 'leones', 'upon', 'america', 'dreamed', 'state', 'killing', 'prefers', 'multiple', 'valid', 'hypothesis', 'ponder', 'considered', 'cannon', 'prefer', 'glad', 'standalone', 'inspired', 'numerous', 'includes', 'clockwork', 'orange', 'forgives', 'drive', 'personally', 'effectiveness', 'panache', 'recently', 'indian', 'readers', 'called', 'wajood', 'starring', 'nana', 'patekar', 'franchise', 'associated', 'acting....', 'happen', 'nose,', 'silly', 'forced', 'described', 'realistic', 'despite', 'show', 'finalized', 'sustain', 'flecks', 'downfall', 'organic', 'explored', 'sufficiently', 'amalgamation', 'masterpieces', 'deal', 'matters', 'thoughtful', 'mature', \"haven't\", 'entire', 'movie!', '2019', 'year', 'astra', 'hellboy', 'slowness', 'accompanied', 'stringed', 'instruments', 'impression', 'carry', 'weight', 'importance', 'clearly', 'playing', 'elevates', 'compelling', 'majority', 'active', 'choices', 'context', 'running', 'beat', 'theme', 'vaguely', 'referenced', 'confusing', 'useless', 'shouldnt', 'opposed', 'whered', 'bernadette', 'important', 'useful', 'during', 'services', 'consequences', 'killed', 'imaginary', 'anarchy', 'winds', 'starting', 'movement', 'kills', 'wayne', 'enterprises', 'employees', 'interaction', 'crowd', 'seems', 'pleased', 'general', 'displeasure', 'wealthy', 'whenever', 'asked', 'keeps', 'politics', 'coming', 'across', 'confused', 'refusal', 'pick', 'side', 'surface', 'touching', 'subjects', 'determine', 'commentary', 'thinks', 'looks', 'lose', 'bargain', 'matinee', 'ripped', 'comfy', 'chairs', 'priced', 'snacks', 'lacks', 'thing-', 'value', 'albeit', 'plain', 'generally', 'criminal', 'genius', 'mastermind', 'masterful', 'comprehension', 'trickery', 'chemicals', 'delusional', 'intellect', 'diary', 'flat', 'jack', 'nicholson', 'raised', 'reached', 'respect', 'portrays', 'brazen', 'craziness', 'sake', 'locked', 'institution', 'arest', 'dtotal', 'csome', 'fake', 'hype!!!!!!!', 'wrenching', 'cried', 'kinda', 'cool', 'expectations.', 'potential', 'badly', 'directed', 'miserable', 'unpleasant', 'slog', 'news', 'clowns', 'back', 'pranksters', 'mimicking', 'pennywise', 'scare', 'viral', 'memes', 'incels', 'chooses', 'date', 'dour', 'demented', 'featured', 'nolans', 'marvelously', 'doubt', 'skinny', 'lonely', 'drugged', 'psychos', 'rushing', 'hail', 'manipulaitve', 'consumed', 'infectious', 'sometimes', 'charming', 'confidence', 'dumb', 'insecure', 'controls', 'spiral', 'pieces', 'optimism', 'starts', 'seemingly', 'theyve', 'name', 'eliminate', 'youd', 'closest', 'resemble', 'plenty', 'individuals', 'gritty', 'neither', 'word', '\"masterpiece\"', 'attached', 'coordinated', 'especially', 'channeling', 'confess', 'reminded', 'burrell', 'phil', 'dunphy', 'modern', 'harmless', 'regardless', 'impressive', 'unreliable', 'narrator', 'necessarily', 'showcase', 'line', 'serious', 'afterward', 'disconnected', 'overall', 'fairly', 'bubble', 'glorified', 'fiction', 'begs', 'anyway', 'urge', 'cents', \"''joker\", 'culture.', 'instead,', \"it's\", 'prime', 'example', \"it''\", 'stole', 'hits', 'nail', 'impulse', 'stories', 'constantly', 'repeat', 'chance', 'rejected', 'angry', 'fails', 'becomes', 'plus', 'various', 'cartoons', 'subtly', 'dialogues', 'league', 'claim', 'fully', 'reflects', 'successful', 'cast', 'spell', 'reality', 'meaning', 'exist', 'tried', 'chose', 'form', 'inside', 'lines', 'russian', 'babushka', 'empty', 'open', 'layers', 'doll', 'technical', 'exercise', 'quote', 'exposing', 'shallowness', 'pseudo', 'scott', 'silver', 'gifs', 'strung', 'together', 'fired', 'struts', 'clock', 'deadpans', 'punch', 'dangles', 'wall', 'note', 'youll', 'twitter', 'facebook', 'feeds', 'cracks', 'practically', 'stuffed', 'phony', 'philosophy', 'stupidly', 'adolescent', 'imparting', 'cultural', 'wisdom', 'tirades', 'muses', 'screams', 'nobodys', 'civil', 'anymore', 'observation', 'truisms', 'slides', 'aims', 'able', 'combine', 'features', 'commercial', 'mainstream', 'authentic', 'accusation', 'haters', 'often', 'pretentious', 'trilogy', 'whereas', 'philiphs', 'quintessence', 'pretentiousness', 'collection', 'fanfiction', 'quotes', 'poured', 'sauce', 'tricks', 'battered', 'twists', 'creation', 'goodbye', 'stable', 'ceased', 'popular', 'darkness', 'father', 'bale', 'showed', 'masterfully', 'ambivalence', 'fascinating', 'wounded', 'nihilist', '...:', 'psycho', 'saves', 'marketing', 'illnesses...', 'lead', 'torturing', 'children', 'relation', 'somebody', 'scared', 'underwhelming', 'frankly', 'unbelivably', 'breathtaking', 'divisive', 'initial', 'excitement', 'rate', 'disappoint', 'film.', 'nearly', 'expected', 'apart', 'whos', 'dealing', 'bipolar', 'disorder', 'including', 'negative', 'passing', 'popularity', 'centered', 'heaths', 'alleged', 'confirmed', 'gossip', 'queen', 'regain', 'therefore', 'slowly', 'began', 'offbeat', 'rogue', 'allowed', 'profit', 'cooked', 'close', 'moaning', 'ordinary', 'spread', 'naturally', 'capitalize', 'zooming', 'unstable', 'viewesr', 'decide', 'hand', 'unexplainable', 'holes', 'recommended', 'adversary', 'wicked', 'notch', 'brillance', 'ability', 'compete', 'equal', 'power', 'pychopath', 'embarressment', 'blaiming', 'thomas', 'bullies', 'sleezeball', 'stock', 'trader', 'types', 'deserved', 'defence', 'hunted', 'away', 'horror', 'clownface', 'upset', 'mobs', 'tired', 'trump', 'preachy', 'tired,', 'tragic', 'turkey', 'miss!', 'jokerwords', 'fail', 'alcoholic', 'judy', 'lunatic', 'informed', 'utter', 'cobblers', 'void', 'ultimate', 'columbus', 'purported', 'extraordinaire', 'zilch', 'henchmen', 'chase', 'arch', 'nemesis', 'small', 'contemporaries', 'incoherent', 'nonsense', 'dominated', 'unfocused', 'struggling', 'problem', 'revolting', 'characterisation', 'rested', 'physicality', 'contorted', 'inference', 'duped', 'obvious', 'trick', 'raging', 'bull', 'dallas', 'buyers', 'club', 'wanted', 'pass', 'raise', 'funds', 'shirt', 'wear', 'method', 'style', 'largely', 'improvised', 'fill', 'behaviour', 'meaningless', 'unsurprisingly', 'pathos', 'unremittingly', 'morose', 'nicholsons', 'captured', 'absent', 'instantly', 'forgettable', 'lacked', 'stream', 'sold', 'poke', 'aladdin', 'misleading', 'lite', 'edition', 'postmodern', 'fight', 'lifts', 'reactions', 'herd', 'mentality', 'play', 'groundbreaking', 'pulls', 'seriousness', 'posturing', 'backbone', 'consistent', 'themes', 'essentially', 'hollow', 'description', 'timid', 'pretends', 'proto', 'dozen', 'suitable', 'untalented', 'smoker', 'ratcatcher', 'calendar', 'weaker', 'foes', 'named', 'otis', 'flannegan', 'julian', 'credit', 'dare', 'impostor', 'afterthought', 'irrelevant', 'genuinely', 'overly', 'eager', 'proclaim', 'manages', 'weakest', 'direction', 'average', 'describe', 'subtlety', 'nuance', 'wouldnt', 'cared', 'characterization', 'addressed', 'group', 'happened', 'lyrics', 'song', 'repertoire', 'limitations', 'wherein', 'liberties', 'filled', 'brim', 'convenience', 'move', 'particular', 'manner', 'unnatural', 'telling', 'lazy', 'shoe', 'horn', 'figured', 'pretended', 'inflated', 'estimation', 'mentioned', 'lining', 'earn', 'nomination', 'roles', 'effortless', 'strain', 'natural', 'extent', 'owing', 'physical', 'whoever', 'ageing', 'later', 'cbms', 'logan', 'alright,', 'directing', 'clothes', 'unwatchable', 'talking', 'twenty', 'hitler', 'heroes', 'fictional', 'vader', 'episodes', 'wars', 'galaxys', 'terrorized', 'mercy', 'human', 'endeavor', 'understood', 'circumstances', 'stayed', 'acts', 'reviled', 'spoiler', 'alert', 'gratified', 'redemption', \"let's\", 'math', 'afraid', 'clouded', 'everyones', 'judgement', 'flaws', 'original', 'pull', 'bringing', 'major', 'glowing', 'talk', 'uneven', 'jumpy', 'beyond', 'tiny', 'comics?', 'idea', 'liking', 'norm', 'automatically', 'praise', 'shake', 'expectations', 'peak', 'crying', 'existence', 'thousand', 'struggled', 'personal', 'common', 'betray', 'attitude', 'kidding', 'horse', 'filth', 'flaming', 'shooter', 'severely', 'insanely', 'immature', 'stops', 'hitting', 'ugly', 'unique', 'memorable', 'faulting', 'terrific', 'screw', 'considering', 'harder', 'recent', 'memory', 'born', 'languorous', 'psychopathic', 'intent', 'failure', 'providing', 'shoddy', 'construct', 'vision', 'nihilistic', 'nowhere', 'meant', 'empathize', 'disgruntled', 'easier', 'motivations', 'disgruntlement', 'propped', 'relevant', 'novel', 'hasnt', 'million', 'focused', 'sequences', 'gary', 'bombastic', 'incongruent', 'deadweight', 'lambast', 'embrace', 'amorality', 'biting', 'satire', 'motivation', 'superficial', 'dreck', 'trade', 'reigns', 'knock', 'shoved', 'assed', 'unintelligent', 'unnecessarily', 'aggressively', 'steals', 'handle', 'influences', 'worries', 'overblown', 'mainly', 'view', 'exploration', 'occasionally', 'rumblings', 'weve', 'niro', 'slightest', 'esque', 'woman', 'finds', 'boyfriend', 'neighbor', 'rarely', 'logic', 'conservative', 'protests', 'remotely', 'convoluted', 'mile', 'huge', 'buildup', 'relationships', 'unearned', 'mere', 'pawns', 'machinations', 'arent', 'retard', 'encourages', 'knew', 'questionable', 'image', 'convinced', 'commit', 'tyler', 'durden', 'boredom', 'patrick', 'bateman', 'american', 'plan', 'inseparably', 'connected', 'symbol', 'hide', 'judiciary', 'requires', 'implied', 'broken', 'deeply', 'hurt', 'inspire', 'imitators', 'generous', 'flawless', 'board', 'boasts', 'mirely', 'handed', 'choppy', 'flow', 'decisions', 'wildly', 'highlghts', 'illnesses', 'handled', 'sprinkle', 'light', 'hearted', 'remind', 'strained', 'angle', 'difficult', 'introspection', 'youre', 'danger', 'poses', 'blunder', 'handling', 'harm', 'existential', 'pandering', 'categorize', 'consider', \"wasn't\", 'joker!', 'avoid', 'beloved', 'tactician', 'conscience', 'enjoys', 'game', 'tortured', 'inconsistencies', 'bruce', 'shown', 'qualities', 'compassion', 'fringe', 'changed', 'alert!', 'rotten', 'lenient', 'brings', 'validity', 'unreasonable', 'gloomy', 'treat', 'difficulty', 'protest', 'senator', 'candidate', 'president', 'position', 'highligts', 'biased', 'disorders', 'drops', 'hustlers', 'haah', 'haaah', 'haaaah', 'haaaaah', 'haaaaaah', 'what?', 'berate', 'bspw', 'borat', 'blend', 'normally', 'manchilds', 'favored', 'exception', 'category', 'advise', 'difference', 'nonetheless', 'haaaaaaah', 'used', 'sccenes', 'cringed', 'cheaply', 'express', 'girlfriend', 'added', 'manage', 'squeezed', 'noble', 'effort,', 'substance.', 'unusual', 'remains', 'cipher', 'loves', 'enlightening', 'traumatic', 'injury', 'delusions', 'schizophrenia', 'ourselves', 'sorta', 'douglas', 'shades', 'touches', 'earned', 'soliloquy', 'awareness', 'developed', 'cooky', 'spectacular', 'hints', 'displeased', 'annoyed', 'waynes', 'deaths', 'situation', 'indirectly', 'created', 'unhappy', 'serious,', 'tense...', 'bad!', 'darkest', 'highest', 'thrilling', 'instructions', 'flipped', 'boundaries', 'audiences', 'clear', 'fundemental', 'formula', 'blow', 'intense', 'perfect', 'dropping', 'mega', 'bore', 'imbd', 'assumed', 'murdered', 'moved', 'mill', 'granddaughter', 'great,', \"can't\", 'rest.', 'lackluster', 'color', 'random', 'center', 'creams', 'room', 'masculine', 'spent', 'masterclass', 'avid', 'goer', 'parts.', 'extraordinary', 'grasp', 'tells', 'haaaaaaah!', 'bullsheiÃŸe'])"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_n.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "import wordcloud\n",
    "from wordcloud import WordCloud, ImageColorGenerator\n",
    "from PIL import Image\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt \n",
    "def create_word_cloud_with_mask(path_of_mask_image, dictionary, \n",
    "                                max_num_words, title):\n",
    "        mask = np.array(Image.open(path_of_mask_image))\n",
    "        #creating the word cloud \n",
    "        word_cloud = WordCloud(background_color = \"white\", \n",
    "                               max_words = max_num_words, \n",
    "                              mask = mask, max_font_size = 125, \n",
    "                              random_state = 1006)\n",
    "        word_cloud.generate_from_frequencies(dictionary)\n",
    "        #creating the coloring for the word cloud \n",
    "        image_colors = ImageColorGenerator(mask)\n",
    "        plt.figure(figsize = [8,8])\n",
    "        plt.imshow(word_cloud.recolor(color_func = image_colors), \n",
    "                  interpolation = \"bilinear\")\n",
    "        plt.title(title)\n",
    "        sns.set_context(\"poster\")\n",
    "        plt.axis(\"off\")\n",
    "        return plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import sys\n",
    "# print(sys.executable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mask = np.array(Image.open('../questionmark.png'))\n",
    "# mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'matplotlib.pyplot' from '/usr/local/lib/python3.7/site-packages/matplotlib/pyplot.py'>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "create_word_cloud_with_mask('thumbup.png', big_bow_n, 750, \"Pre-clean\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({'missed': 5,\n",
       "         'opportunity': 4,\n",
       "         'been': 35,\n",
       "         'very': 27,\n",
       "         'excited': 5,\n",
       "         'this': 250,\n",
       "         'movie': 256,\n",
       "         'ever': 6,\n",
       "         'since': 6,\n",
       "         'heard': 2,\n",
       "         'about': 75,\n",
       "         'anticipating': 1,\n",
       "         'release': 2,\n",
       "         'when': 25,\n",
       "         'started': 4,\n",
       "         'getting': 7,\n",
       "         'type': 5,\n",
       "         'hype': 21,\n",
       "         'press': 1,\n",
       "         'that': 213,\n",
       "         'became': 8,\n",
       "         'apprehensive': 1,\n",
       "         'things': 14,\n",
       "         'were': 26,\n",
       "         'being': 26,\n",
       "         'said': 12,\n",
       "         'which': 32,\n",
       "         'seemed': 3,\n",
       "         'outrageous': 1,\n",
       "         'mostly': 1,\n",
       "         'other': 21,\n",
       "         'moves': 3,\n",
       "         'looking': 6,\n",
       "         'forward': 4,\n",
       "         'seeing': 11,\n",
       "         'ended': 1,\n",
       "         'letting': 3,\n",
       "         'down': 14,\n",
       "         'joker': 197,\n",
       "         'sadly': 6,\n",
       "         'turned': 2,\n",
       "         'those': 11,\n",
       "         'movies': 38,\n",
       "         'know': 22,\n",
       "         'many': 22,\n",
       "         'times': 22,\n",
       "         'before': 18,\n",
       "         'phoenixs': 14,\n",
       "         'portrayal': 13,\n",
       "         'with': 103,\n",
       "         'mental': 30,\n",
       "         'health': 9,\n",
       "         'depression': 2,\n",
       "         'good': 52,\n",
       "         'convincing': 2,\n",
       "         'story': 59,\n",
       "         'plot': 18,\n",
       "         'like': 54,\n",
       "         'deliver': 1,\n",
       "         'anti': 2,\n",
       "         'hero': 6,\n",
       "         'origin': 15,\n",
       "         'most': 15,\n",
       "         'coveted': 1,\n",
       "         'villains': 6,\n",
       "         'comic': 13,\n",
       "         'book': 9,\n",
       "         'lore': 2,\n",
       "         'liked': 2,\n",
       "         'quasi': 1,\n",
       "         'mirroring': 1,\n",
       "         'failed': 8,\n",
       "         'system': 3,\n",
       "         'whose': 2,\n",
       "         'middle': 3,\n",
       "         'lower': 2,\n",
       "         'class': 4,\n",
       "         'revolt': 1,\n",
       "         'against': 2,\n",
       "         'rich': 4,\n",
       "         'sort': 4,\n",
       "         'burn': 3,\n",
       "         'done': 8,\n",
       "         'sure': 7,\n",
       "         'people': 49,\n",
       "         'glimpses': 1,\n",
       "         'today': 2,\n",
       "         'culture': 4,\n",
       "         'knows': 2,\n",
       "         'maybe': 13,\n",
       "         'studio': 1,\n",
       "         'execs': 1,\n",
       "         'their': 20,\n",
       "         'fingers': 1,\n",
       "         'involved': 3,\n",
       "         'ones': 2,\n",
       "         'watered': 1,\n",
       "         'much': 51,\n",
       "         'there': 47,\n",
       "         'will': 26,\n",
       "         'directors': 1,\n",
       "         'darker': 1,\n",
       "         'than': 26,\n",
       "         'theatrical': 1,\n",
       "         'certainly': 4,\n",
       "         'hope': 5,\n",
       "         'because': 48,\n",
       "         'reviews': 21,\n",
       "         'have': 62,\n",
       "         'read': 10,\n",
       "         'speak': 2,\n",
       "         'walking': 3,\n",
       "         'theaters': 1,\n",
       "         'dark': 30,\n",
       "         'feel': 17,\n",
       "         'psychological': 5,\n",
       "         'overtones': 1,\n",
       "         'them': 14,\n",
       "         'stomach': 3,\n",
       "         'felt': 18,\n",
       "         'sense': 7,\n",
       "         'wanting': 1,\n",
       "         'bigger': 1,\n",
       "         'grander': 1,\n",
       "         'what': 62,\n",
       "         'would': 40,\n",
       "         'recommend': 4,\n",
       "         'formulate': 1,\n",
       "         'your': 11,\n",
       "         'opinion': 6,\n",
       "         'gave': 4,\n",
       "         'rating': 9,\n",
       "         'over': 19,\n",
       "         'walked': 1,\n",
       "         'feeling': 6,\n",
       "         'just': 97,\n",
       "         'already': 7,\n",
       "         'seen': 29,\n",
       "         \"phoenix's\": 2,\n",
       "         'acting..': 2,\n",
       "         'dont': 27,\n",
       "         'think': 27,\n",
       "         'need': 9,\n",
       "         'super': 4,\n",
       "         'film': 79,\n",
       "         'comics': 10,\n",
       "         'character': 66,\n",
       "         'dramatized': 1,\n",
       "         'effort': 7,\n",
       "         'knight': 11,\n",
       "         'unfortunately': 6,\n",
       "         'captivating': 1,\n",
       "         'inspiration': 2,\n",
       "         'made': 20,\n",
       "         'stuff': 5,\n",
       "         'enough': 14,\n",
       "         'real': 11,\n",
       "         'world': 12,\n",
       "         'everyone': 16,\n",
       "         'praised': 2,\n",
       "         'overrated': 16,\n",
       "         'movie.': 2,\n",
       "         'time': 31,\n",
       "         'here': 13,\n",
       "         'making': 6,\n",
       "         'better': 31,\n",
       "         'actually': 13,\n",
       "         'idiotic': 2,\n",
       "         'phoenix': 51,\n",
       "         'master': 4,\n",
       "         'actor': 11,\n",
       "         'does': 28,\n",
       "         'still': 8,\n",
       "         'make': 21,\n",
       "         'great': 28,\n",
       "         'thsi': 1,\n",
       "         'lives': 1,\n",
       "         'from': 77,\n",
       "         'blabla': 1,\n",
       "         'every': 7,\n",
       "         'medium': 1,\n",
       "         'nothing': 32,\n",
       "         'only': 26,\n",
       "         'thing': 14,\n",
       "         'behind': 5,\n",
       "         'money': 10,\n",
       "         'media': 1,\n",
       "         'todd': 9,\n",
       "         'philips': 2,\n",
       "         'should': 13,\n",
       "         'some': 24,\n",
       "         'copy': 3,\n",
       "         'taxi': 27,\n",
       "         'driver': 26,\n",
       "         'similar': 4,\n",
       "         'terrible': 10,\n",
       "         'acting': 45,\n",
       "         'watch': 29,\n",
       "         'alone': 3,\n",
       "         'doesnt': 21,\n",
       "         'interesting': 19,\n",
       "         'entertaining': 7,\n",
       "         'give': 15,\n",
       "         'script': 10,\n",
       "         'barely': 3,\n",
       "         'development': 2,\n",
       "         'characters': 17,\n",
       "         'matter': 6,\n",
       "         'outside': 2,\n",
       "         'last': 6,\n",
       "         'minutes': 9,\n",
       "         'best': 13,\n",
       "         'part': 16,\n",
       "         'force': 3,\n",
       "         'through': 8,\n",
       "         'first': 17,\n",
       "         'hours': 8,\n",
       "         'garbage': 1,\n",
       "         'punishment': 1,\n",
       "         'even': 34,\n",
       "         'they': 45,\n",
       "         'couldve': 2,\n",
       "         'condensed': 1,\n",
       "         'into': 17,\n",
       "         'minute': 4,\n",
       "         'special': 7,\n",
       "         'cant': 10,\n",
       "         'believe': 9,\n",
       "         'then': 18,\n",
       "         'again': 11,\n",
       "         'written': 7,\n",
       "         'primarily': 1,\n",
       "         'oscars': 2,\n",
       "         'usually': 4,\n",
       "         'instead': 13,\n",
       "         'poor': 14,\n",
       "         'attempt': 3,\n",
       "         'books': 3,\n",
       "         'sell': 1,\n",
       "         'strays': 1,\n",
       "         'smacks': 1,\n",
       "         'trying': 8,\n",
       "         'hard': 6,\n",
       "         'awards': 3,\n",
       "         'relevance': 1,\n",
       "         'names': 3,\n",
       "         'gotham': 1,\n",
       "         'tries': 10,\n",
       "         'nominations': 1,\n",
       "         'criticism': 2,\n",
       "         'actors': 6,\n",
       "         'thought': 12,\n",
       "         'given': 6,\n",
       "         'wasnt': 10,\n",
       "         'dragged': 3,\n",
       "         'longer': 2,\n",
       "         'versions': 1,\n",
       "         'learned': 3,\n",
       "         'thing.': 2,\n",
       "         'borrows': 2,\n",
       "         'elements': 2,\n",
       "         'strive': 1,\n",
       "         'award': 5,\n",
       "         'well': 31,\n",
       "         'except': 5,\n",
       "         'writing': 6,\n",
       "         'shamelessly': 1,\n",
       "         'theatre': 4,\n",
       "         'edgy': 2,\n",
       "         'scary': 1,\n",
       "         'brain': 3,\n",
       "         'damaged': 3,\n",
       "         'sissy': 1,\n",
       "         'dances': 1,\n",
       "         'while': 9,\n",
       "         'annoying': 3,\n",
       "         'rude': 1,\n",
       "         'expects': 1,\n",
       "         'society': 19,\n",
       "         'pedestal': 1,\n",
       "         'hell': 6,\n",
       "         'hate': 2,\n",
       "         'complete': 4,\n",
       "         'crap': 4,\n",
       "         'really': 55,\n",
       "         'understand': 10,\n",
       "         'watching': 10,\n",
       "         'couldnt': 7,\n",
       "         'till': 3,\n",
       "         'boring': 47,\n",
       "         'myself': 7,\n",
       "         'extremely': 9,\n",
       "         'zero': 1,\n",
       "         'connection': 2,\n",
       "         'joaquin': 42,\n",
       "         'heath': 15,\n",
       "         'ledger': 11,\n",
       "         'needed': 5,\n",
       "         'asking': 2,\n",
       "         'these': 12,\n",
       "         'freaking': 1,\n",
       "         'normal': 3,\n",
       "         'same': 16,\n",
       "         'sentence': 1,\n",
       "         'joaquins': 3,\n",
       "         'never': 17,\n",
       "         'isnt': 7,\n",
       "         'disaster': 1,\n",
       "         'slow': 8,\n",
       "         'could': 11,\n",
       "         'keep': 2,\n",
       "         'falling': 4,\n",
       "         'asleep': 3,\n",
       "         'theater': 2,\n",
       "         'imagine': 2,\n",
       "         'future': 1,\n",
       "         'films': 13,\n",
       "         'alright': 2,\n",
       "         'film...': 2,\n",
       "         'ruined': 3,\n",
       "         'masterpiece': 16,\n",
       "         'raving': 1,\n",
       "         'predictable': 7,\n",
       "         'samey': 1,\n",
       "         'theres': 11,\n",
       "         'creativity': 1,\n",
       "         'king': 12,\n",
       "         'comedy': 12,\n",
       "         'copying': 1,\n",
       "         'almost': 8,\n",
       "         'pointless': 6,\n",
       "         'waste': 7,\n",
       "         'disappointing': 5,\n",
       "         'long': 13,\n",
       "         'possibly': 2,\n",
       "         'take': 9,\n",
       "         'tell': 5,\n",
       "         'audience': 9,\n",
       "         'mentally': 13,\n",
       "         'unwell': 1,\n",
       "         'surprising': 1,\n",
       "         'mother': 8,\n",
       "         'imaginative': 1,\n",
       "         'white': 3,\n",
       "         'sock': 1,\n",
       "         \"don't\": 12,\n",
       "         'review': 12,\n",
       "         'movies,': 2,\n",
       "         'one...': 2,\n",
       "         'watched': 3,\n",
       "         'site': 1,\n",
       "         'absolutely': 6,\n",
       "         'little': 13,\n",
       "         'else': 7,\n",
       "         'found': 6,\n",
       "         'longish': 1,\n",
       "         'fall': 5,\n",
       "         'mean': 10,\n",
       "         'entertain': 3,\n",
       "         'yourself': 1,\n",
       "         'washing': 1,\n",
       "         'machine': 1,\n",
       "         'going': 11,\n",
       "         'straight': 1,\n",
       "         'anyone': 4,\n",
       "         'butt!': 2,\n",
       "         'claiming': 1,\n",
       "         'ridiculous': 3,\n",
       "         'walk': 6,\n",
       "         'happens': 10,\n",
       "         'predict': 1,\n",
       "         'advance': 1,\n",
       "         'rather': 7,\n",
       "         'relies': 1,\n",
       "         'fascinated': 3,\n",
       "         'antics': 3,\n",
       "         'psychotic': 3,\n",
       "         'nutcase': 1,\n",
       "         'whilst': 1,\n",
       "         'convince': 1,\n",
       "         'somehow': 3,\n",
       "         'heroic': 1,\n",
       "         'highly': 8,\n",
       "         'nice': 3,\n",
       "         'excellent': 5,\n",
       "         'suffers': 1,\n",
       "         'three': 4,\n",
       "         'uninteresting': 3,\n",
       "         'dialog': 1,\n",
       "         'pace': 2,\n",
       "         'lengthy': 1,\n",
       "         'number': 1,\n",
       "         'ideas': 5,\n",
       "         'combined': 2,\n",
       "         'more': 45,\n",
       "         'destroy': 1,\n",
       "         'look': 17,\n",
       "         'left': 12,\n",
       "         'beside': 1,\n",
       "         'genre': 1,\n",
       "         'supposed': 4,\n",
       "         'thriller': 3,\n",
       "         'addition': 1,\n",
       "         'crime': 3,\n",
       "         'drama': 2,\n",
       "         'cannot': 4,\n",
       "         'exaggerated': 3,\n",
       "         'high': 9,\n",
       "         'ratings': 4,\n",
       "         'want': 23,\n",
       "         'fair': 1,\n",
       "         'although': 7,\n",
       "         'stars': 7,\n",
       "         'definitely': 4,\n",
       "         'worth': 6,\n",
       "         'consequently': 1,\n",
       "         'skip': 3,\n",
       "         '10/10': 2,\n",
       "         'actual': 9,\n",
       "         'unbiased': 2,\n",
       "         'review.': 2,\n",
       "         'titles': 2,\n",
       "         'says': 6,\n",
       "         'marvel': 2,\n",
       "         'hardcore': 1,\n",
       "         'check': 1,\n",
       "         'profiles': 1,\n",
       "         'where': 15,\n",
       "         'fans': 2,\n",
       "         'opposite': 1,\n",
       "         'pure': 3,\n",
       "         'simple': 3,\n",
       "         'truth': 1,\n",
       "         'horrible': 6,\n",
       "         'worst': 4,\n",
       "         'pretty': 5,\n",
       "         'remake': 2,\n",
       "         'shots': 3,\n",
       "         'exactly': 1,\n",
       "         'ripping': 1,\n",
       "         'aside': 1,\n",
       "         'illness': 14,\n",
       "         'psychology': 2,\n",
       "         'slapped': 2,\n",
       "         'title': 8,\n",
       "         'draw': 2,\n",
       "         'expect': 2,\n",
       "         'hoping': 3,\n",
       "         'wrong': 10,\n",
       "         'agree': 3,\n",
       "         'portraying': 1,\n",
       "         'issues': 5,\n",
       "         'though': 10,\n",
       "         'call': 1,\n",
       "         'oscar': 12,\n",
       "         'worthy': 8,\n",
       "         'stretch': 1,\n",
       "         'notice': 3,\n",
       "         'critics': 5,\n",
       "         'saying': 11,\n",
       "         'different': 21,\n",
       "         'perspective': 3,\n",
       "         'each': 5,\n",
       "         'goes': 6,\n",
       "         'audio': 1,\n",
       "         'music': 1,\n",
       "         'certain': 3,\n",
       "         'aspects': 1,\n",
       "         'shot': 5,\n",
       "         'camera': 3,\n",
       "         'words': 2,\n",
       "         'enjoy': 2,\n",
       "         'critic': 3,\n",
       "         'cinema': 7,\n",
       "         'aspect': 3,\n",
       "         'viewers': 4,\n",
       "         'disappointed': 12,\n",
       "         'unlike': 1,\n",
       "         'fascination': 1,\n",
       "         'version': 11,\n",
       "         'term': 2,\n",
       "         'lightly': 2,\n",
       "         'indeed': 4,\n",
       "         'fact': 8,\n",
       "         'gone': 4,\n",
       "         'kids': 3,\n",
       "         'knowing': 1,\n",
       "         'rated': 2,\n",
       "         'graphic': 3,\n",
       "         'also': 20,\n",
       "         'promotes': 1,\n",
       "         'violence': 13,\n",
       "         'guns': 2,\n",
       "         'uncomfortable': 4,\n",
       "         'country': 1,\n",
       "         'rent': 2,\n",
       "         'lastly': 1,\n",
       "         'enjoyed': 2,\n",
       "         'picture': 1,\n",
       "         'past': 3,\n",
       "         'course': 4,\n",
       "         'lets': 3,\n",
       "         '2001': 1,\n",
       "         'kings': 3,\n",
       "         'speech': 2,\n",
       "         'bought': 1,\n",
       "         'likely': 2,\n",
       "         'probably': 7,\n",
       "         'forgot': 2,\n",
       "         'soon': 1,\n",
       "         'after': 15,\n",
       "         'list': 1,\n",
       "         'didnt': 17,\n",
       "         'included': 2,\n",
       "         'inception': 2,\n",
       "         'true': 9,\n",
       "         'grit': 1,\n",
       "         'once': 5,\n",
       "         'raved': 1,\n",
       "         'case': 3,\n",
       "         'forget': 1,\n",
       "         'week': 1,\n",
       "         'labeled': 1,\n",
       "         'labeling': 1,\n",
       "         'attention': 3,\n",
       "         'cheap': 3,\n",
       "         'tactic': 2,\n",
       "         'overhyped': 10,\n",
       "         'slowwwwww': 1,\n",
       "         'gladly': 1,\n",
       "         'half': 13,\n",
       "         'until': 5,\n",
       "         'usual': 6,\n",
       "         'must': 6,\n",
       "         'gore': 1,\n",
       "         'disney': 1,\n",
       "         'hear': 2,\n",
       "         'thumbs': 2,\n",
       "         'question': 6,\n",
       "         'below': 1,\n",
       "         'reviewing': 1,\n",
       "         'performance': 37,\n",
       "         'storyline': 12,\n",
       "         'played': 2,\n",
       "         'literally': 2,\n",
       "         'hats': 1,\n",
       "         'discrediting': 1,\n",
       "         'whatsoever': 1,\n",
       "         'reason': 10,\n",
       "         'drawn': 3,\n",
       "         'winded': 2,\n",
       "         'kept': 3,\n",
       "         'agreeing': 1,\n",
       "         'jumping': 1,\n",
       "         'band': 1,\n",
       "         'wagon': 1,\n",
       "         'easily': 4,\n",
       "         'create': 1,\n",
       "         'within': 2,\n",
       "         'hour': 7,\n",
       "         'push': 1,\n",
       "         'ything': 1,\n",
       "         'villian': 1,\n",
       "         'based': 7,\n",
       "         'superhero': 6,\n",
       "         'aware': 3,\n",
       "         'however': 11,\n",
       "         'halloween': 1,\n",
       "         'meets': 1,\n",
       "         'physcotic': 1,\n",
       "         'escapee': 1,\n",
       "         'decides': 2,\n",
       "         'kill': 8,\n",
       "         'sounds': 1,\n",
       "         'michael': 3,\n",
       "         'myers': 2,\n",
       "         'proud': 1,\n",
       "         'brilliant': 9,\n",
       "         'love': 15,\n",
       "         'pheonixs': 1,\n",
       "         'ought': 1,\n",
       "         'please': 2,\n",
       "         'process': 2,\n",
       "         'receive': 1,\n",
       "         'sheep': 2,\n",
       "         'write': 2,\n",
       "         'compelled': 1,\n",
       "         'thoughts': 3,\n",
       "         'head': 2,\n",
       "         'apparently': 2,\n",
       "         'quite': 6,\n",
       "         'peoples': 1,\n",
       "         'heads': 1,\n",
       "         'comes': 1,\n",
       "         'perception': 2,\n",
       "         'order': 3,\n",
       "         'mine': 1,\n",
       "         'anybody': 1,\n",
       "         'elses': 1,\n",
       "         'critique': 1,\n",
       "         'following': 1,\n",
       "         'dissapointing': 4,\n",
       "         'boring!!!': 2,\n",
       "         'wonderful': 2,\n",
       "         'role': 12,\n",
       "         'orgin': 2,\n",
       "         'buffalo': 2,\n",
       "         'bill': 2,\n",
       "         'silence': 2,\n",
       "         'lambs': 2,\n",
       "         'depressing': 8,\n",
       "         'limp': 2,\n",
       "         'wristed': 2,\n",
       "         'whith': 1,\n",
       "         'feminine': 2,\n",
       "         'dancing': 7,\n",
       "         'masculinity': 1,\n",
       "         'remember': 1,\n",
       "         'dark,': 6,\n",
       "         'depressing,': 2,\n",
       "         'slow,': 2,\n",
       "         'heavy,': 2,\n",
       "         'kudos': 1,\n",
       "         'tough': 1,\n",
       "         'backstory': 1,\n",
       "         'sorry': 6,\n",
       "         'genres': 2,\n",
       "         'simply': 8,\n",
       "         'stay': 2,\n",
       "         'heavy': 4,\n",
       "         'spoon': 2,\n",
       "         'point': 14,\n",
       "         'depressed': 5,\n",
       "         'ready': 1,\n",
       "         'react': 1,\n",
       "         'keith': 2,\n",
       "         'comments': 1,\n",
       "         'perhaps': 5,\n",
       "         'paid': 1,\n",
       "         'ledgers': 11,\n",
       "         'inventive': 1,\n",
       "         'charismatic': 2,\n",
       "         'maniacal': 2,\n",
       "         'creepy': 1,\n",
       "         'batman': 26,\n",
       "         'ecosystem': 1,\n",
       "         'fills': 1,\n",
       "         'relationship': 3,\n",
       "         'cathartic': 1,\n",
       "         'moment': 11,\n",
       "         'catalyze': 1,\n",
       "         'reaction': 3,\n",
       "         'paced': 3,\n",
       "         'told': 6,\n",
       "         'choice': 2,\n",
       "         'evening': 1,\n",
       "         'gambling': 2,\n",
       "         'addicted': 2,\n",
       "         'director': 7,\n",
       "         'scorsese': 6,\n",
       "         'overlong': 1,\n",
       "         'dull': 3,\n",
       "         'feed': 1,\n",
       "         'network': 3,\n",
       "         'basic': 1,\n",
       "         'carbon': 1,\n",
       "         'plots': 1,\n",
       "         'lifted': 1,\n",
       "         'find': 6,\n",
       "         'become': 7,\n",
       "         'psyco': 1,\n",
       "         'coudnt': 1,\n",
       "         'entertainment': 9,\n",
       "         'cinematic': 2,\n",
       "         'experience': 2,\n",
       "         'fantastic': 3,\n",
       "         'ways': 4,\n",
       "         'awful': 3,\n",
       "         'blank': 2,\n",
       "         'slate': 1,\n",
       "         'study': 6,\n",
       "         'crazy': 10,\n",
       "         'over-hyped,': 2,\n",
       "         'overacted': 3,\n",
       "         'proper': 5,\n",
       "         'millennial': 2,\n",
       "         'absolute': 5,\n",
       "         'disappointment': 2,\n",
       "         'believed': 1,\n",
       "         'fool': 1,\n",
       "         'person': 14,\n",
       "         'stupid': 3,\n",
       "         'cringe': 4,\n",
       "         'happening': 1,\n",
       "         'smoking': 2,\n",
       "         'around': 10,\n",
       "         'action': 2,\n",
       "         'substance': 3,\n",
       "         'humor': 2,\n",
       "         'everything': 9,\n",
       "         'disturbing': 2,\n",
       "         'respected': 1,\n",
       "         'refer': 1,\n",
       "         'powerful': 2,\n",
       "         'illustration': 1,\n",
       "         'loners': 1,\n",
       "         'dangerous': 1,\n",
       "         'themselves': 4,\n",
       "         'others': 1,\n",
       "         'theyre': 4,\n",
       "         'untreated': 1,\n",
       "         'educated': 2,\n",
       "         'standpoint': 1,\n",
       "         'millions': 1,\n",
       "         'goers': 1,\n",
       "         'cause': 2,\n",
       "         'worry': 1,\n",
       "         'impact': 3,\n",
       "         'kind': 4,\n",
       "         'societys': 1,\n",
       "         'problems': 2,\n",
       "         'goodness': 1,\n",
       "         'driven': 3,\n",
       "         'further': 3,\n",
       "         'fearful': 1,\n",
       "         'repercussions': 1,\n",
       "         'stigmatisation': 1,\n",
       "         'prejudice': 1,\n",
       "         'bullying': 1,\n",
       "         'right': 2,\n",
       "         'seem': 9,\n",
       "         'care': 3,\n",
       "         'such': 12,\n",
       "         'content': 2,\n",
       "         'less': 5,\n",
       "         'cinematography': 7,\n",
       "         'otherwise': 5,\n",
       "         'rehash': 2,\n",
       "         'thats': 16,\n",
       "         'exploitation': 1,\n",
       "         'misrepresentation': 1,\n",
       "         'pathologies': 1,\n",
       "         'unforgiveable': 1,\n",
       "         'fanboys': 2,\n",
       "         'forgotten?': 2,\n",
       "         'throughout': 3,\n",
       "         'history': 3,\n",
       "         'always': 10,\n",
       "         'replaced': 1,\n",
       "         'nature': 4,\n",
       "         'paganism': 1,\n",
       "         'translated': 1,\n",
       "         'devil': 2,\n",
       "         'roman': 1,\n",
       "         'catholicism': 1,\n",
       "         'bring': 3,\n",
       "         'social': 3,\n",
       "         'coherence': 1,\n",
       "         'figure': 1,\n",
       "         'represent': 3,\n",
       "         'meticulous': 2,\n",
       "         'forgotten': 3,\n",
       "         'hurts': 1,\n",
       "         'favorite': 2,\n",
       "         'broke': 1,\n",
       "         'golden': 1,\n",
       "         'rule': 1,\n",
       "         'laid': 1,\n",
       "         'robert': 4,\n",
       "         'downey': 1,\n",
       "         'tropic': 1,\n",
       "         'thunder': 1,\n",
       "         'full': 5,\n",
       "         'planning': 2,\n",
       "         'cunning': 2,\n",
       "         'depth': 6,\n",
       "         'chaotic': 1,\n",
       "         'narcissism': 2,\n",
       "         'excellently': 2,\n",
       "         'depicted': 1,\n",
       "         'eternal': 1,\n",
       "         'opening': 1,\n",
       "         'scene': 8,\n",
       "         'waiting': 6,\n",
       "         'keyser': 1,\n",
       "         'souse': 1,\n",
       "         'control': 5,\n",
       "         'display': 2,\n",
       "         'black': 1,\n",
       "         'mirror': 2,\n",
       "         'pulling': 1,\n",
       "         'strings': 1,\n",
       "         'along': 3,\n",
       "         'came': 3,\n",
       "         'sorrowful': 1,\n",
       "         'victim': 2,\n",
       "         'threw': 2,\n",
       "         'tantrum': 1,\n",
       "         'lost': 5,\n",
       "         'empowered': 1,\n",
       "         'taking': 3,\n",
       "         'becoming': 4,\n",
       "         'anarchistic': 1,\n",
       "         'commentator': 1,\n",
       "         'forest': 1,\n",
       "         'gump': 1,\n",
       "         'rain': 1,\n",
       "         'robot': 1,\n",
       "         'depictions': 1,\n",
       "         'suffering': 1,\n",
       "         'writers': 1,\n",
       "         'remembered': 3,\n",
       "         'level': 5,\n",
       "         'ingenuity': 1,\n",
       "         'leaves': 3,\n",
       "         'understanding': 2,\n",
       "         'cognitive': 1,\n",
       "         'approach': 1,\n",
       "         'phillips': 7,\n",
       "         'displayed': 2,\n",
       "         'cruel': 1,\n",
       "         'fist': 1,\n",
       "         'banished': 1,\n",
       "         'vulgar': 1,\n",
       "         'insult': 1,\n",
       "         'narrative': 3,\n",
       "         'intriguing': 3,\n",
       "         'dualistic': 1,\n",
       "         'decades': 3,\n",
       "         'meet': 1,\n",
       "         'universe': 8,\n",
       "         'sequel': 1,\n",
       "         'jokers': 7,\n",
       "         'lord': 1,\n",
       "         'life': 9,\n",
       "         'grudge': 1,\n",
       "         'match': 1,\n",
       "         'between': 6,\n",
       "         'christian': 1,\n",
       "         'bales': 1,\n",
       "         'machinist': 1,\n",
       "         'malnutritioned': 1,\n",
       "         'clown': 14,\n",
       "         'prince': 1,\n",
       "         'threatening': 2,\n",
       "         'forever': 1,\n",
       "         'joaquim': 1,\n",
       "         'mark': 1,\n",
       "         'sorely': 1,\n",
       "         'rewatch': 2,\n",
       "         'something': 5,\n",
       "         'extended': 1,\n",
       "         'trailer': 6,\n",
       "         'exposed': 1,\n",
       "         'revelations': 1,\n",
       "         'challenged': 6,\n",
       "         'presented': 1,\n",
       "         'basically': 7,\n",
       "         'superlatives': 1,\n",
       "         'explanations': 1,\n",
       "         'adorning': 1,\n",
       "         'without': 16,\n",
       "         'incredible': 2,\n",
       "         'shadowed': 1,\n",
       "         'truly': 2,\n",
       "         'went': 3,\n",
       "         'night': 4,\n",
       "         'positive': 2,\n",
       "         'honestly': 4,\n",
       "         'totally': 9,\n",
       "         'bored': 7,\n",
       "         'thinking': 2,\n",
       "         'start': 3,\n",
       "         'gruesome': 1,\n",
       "         'makes': 13,\n",
       "         'leave': 3,\n",
       "         'short': 5,\n",
       "         'leaving': 1,\n",
       "         'realy': 3,\n",
       "         'whit': 1,\n",
       "         'happy': 4,\n",
       "         'grave': 2,\n",
       "         'bad...': 2,\n",
       "         'whole': 8,\n",
       "         'apperently': 1,\n",
       "         'completely': 5,\n",
       "         'acted': 6,\n",
       "         'trash': 3,\n",
       "         'weak': 2,\n",
       "         'face': 7,\n",
       "         'paint': 1,\n",
       "         'drug': 1,\n",
       "         'addict': 1,\n",
       "         'loser': 3,\n",
       "         'blames': 1,\n",
       "         'everybody': 2,\n",
       "         'failings': 1,\n",
       "         'mediocre': 3,\n",
       "         'offensive': 2,\n",
       "         'ultra': 2,\n",
       "         'liberal': 2,\n",
       "         'preaching': 1,\n",
       "         'millennials': 2,\n",
       "         'reinforces': 1,\n",
       "         'school': 1,\n",
       "         'college': 1,\n",
       "         'teachings': 1,\n",
       "         'fault': 1,\n",
       "         'parents': 1,\n",
       "         'boss': 2,\n",
       "         'government': 1,\n",
       "         'neighbors': 1,\n",
       "         'cops': 1,\n",
       "         'imdb': 2,\n",
       "         'superior': 2,\n",
       "         'godfather': 1,\n",
       "         'generation': 5,\n",
       "         'pathetic': 3,\n",
       "         'hopes': 4,\n",
       "         'werent': 1,\n",
       "         'amazing': 2,\n",
       "         'tedious': 3,\n",
       "         'experienced': 1,\n",
       "         'childhood': 3,\n",
       "         'trauma': 2,\n",
       "         'spend': 1,\n",
       "         'asylum': 1,\n",
       "         'seven': 1,\n",
       "         'medication': 1,\n",
       "         'effect': 4,\n",
       "         'metro': 1,\n",
       "         'incident': 1,\n",
       "         'breaking': 4,\n",
       "         'chain': 1,\n",
       "         'free': 2,\n",
       "         'himself': 5,\n",
       "         'change': 2,\n",
       "         'evolve': 1,\n",
       "         'beginning': 4,\n",
       "         'seventy': 1,\n",
       "         'percent': 1,\n",
       "         'screen': 4,\n",
       "         'dedicated': 1,\n",
       "         'arthur': 13,\n",
       "         'fleck': 9,\n",
       "         'support': 1,\n",
       "         'lack': 4,\n",
       "         'soul': 2,\n",
       "         'deniero': 1,\n",
       "         'disappoints': 1,\n",
       "         'aura': 2,\n",
       "         'somewhere': 3,\n",
       "         'nineties': 1,\n",
       "         'wait': 4,\n",
       "         'anything': 8,\n",
       "         'espaically': 1,\n",
       "         'repeated': 2,\n",
       "         'space': 1,\n",
       "         'alot': 1,\n",
       "         'nothings': 1,\n",
       "         'drag': 1,\n",
       "         'suspense': 1,\n",
       "         'work': 7,\n",
       "         'begin': 2,\n",
       "         'turns': 2,\n",
       "         'unbelievable': 1,\n",
       "         'smart': 4,\n",
       "         'using': 2,\n",
       "         'intuition': 1,\n",
       "         'batmans': 2,\n",
       "         'greatest': 1,\n",
       "         'embarrassing': 1,\n",
       "         'stand': 2,\n",
       "         'unrelated': 2,\n",
       "         'series': 3,\n",
       "         'appreciated': 1,\n",
       "         'main': 7,\n",
       "         'decent': 8,\n",
       "         'strictly': 1,\n",
       "         'come': 5,\n",
       "         'childcare': 1,\n",
       "         'arrangements': 1,\n",
       "         'wish': 1,\n",
       "         'home': 2,\n",
       "         'repeating': 1,\n",
       "         'subject': 2,\n",
       "         'missing': 3,\n",
       "         'deserve': 3,\n",
       "         'pursuing': 1,\n",
       "         'career': 1,\n",
       "         'talent': 1,\n",
       "         'beaten': 1,\n",
       "         'ridiculed': 1,\n",
       "         'standard': 1,\n",
       "         'rated.': 2,\n",
       "         'makeup': 6,\n",
       "         'reviewers': 3,\n",
       "         'guess': 2,\n",
       "         'disturbed': 7,\n",
       "         'guys': 1,\n",
       "         ...})"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_bow_n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
